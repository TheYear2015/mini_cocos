--Auto Generated By Protocol Generater, Dont Direct Modify it!

module(..., package.seeall)

require "app.models.protocol.BufferUtils"

Server_Type = {
    TYPE_SERVER_UNKNOWN                              = 0, -- 不确定的服务器
    TYPE_SERVER_DBSERVER                             = 1, -- 数据库服务器
    TYPE_SERVER_ACCOUNTDBSERVER                      = 2, -- 帐号服务器
    TYPE_SERVER_LOGDBSERVER                          = 3, -- 日志记录服务器
    TYPE_SERVER_LOGINSERVER                          = 4, -- 登陆服务器
    TYPE_SERVER_LOBBYSERVER                          = 5, -- 大厅服务器
    TYPE_SERVER_MANAGESERVER                         = 6, -- 管理服务器
    TYPE_SERVER_SOCIETYSERVER                        = 7, -- 社交服务器
    TYPE_SERVER_GAMESERVER                           = 8, -- 游戏服务器
    TYPE_SERVER_GMSERVER                             = 9, -- GM服务器
    TYPE_SERVER_RECHARGESERVER                       = 10, -- 充值服务器
    TYPE_SERVER_NUM                                  = 11, 
}

GateWay_Type = {
    GateWay_Cucc                                     = 0, -- 联通
    GateWay_Bss                                      = 1, -- 电信
    GateWay_Ctt                                      = 2, -- 铁通
    GateWay_Edu                                      = 3, -- 教育网
    GateWay_Other                                    = 4, -- 其他
}

eFriLimit_Result = {
    Limit_Result_Failure                             = 0, -- 失败
    Limit_Result_Success                             = 1, -- 成功
}

Game_Type = {
    GameType_Common                                  = 0, -- 游戏场
    GameType_Championships                           = 1, -- 锦标赛
    GameType_Diamond                                 = 2, -- 钻石赛
    GameType_Num                                     = 3, -- 场次类型总数
}

Match_Type = {
    MatchType_None                                   = 0, -- 无
    MatchType_Day                                    = 1, -- 日赛
    MatchType_Week                                   = 2, -- 周赛
    MatchType_WeekLink                               = 3, -- 周赛联赛
    MatchType_Num                                    = 4, -- 最大数量
}

Match_State = {
    Match_State_IDLE                                 = 0, -- 未比赛状态
    Match_State_TEAM                                 = 1, -- 排队状态
    Match_State_Game                                 = 2, -- 比赛状态
}

Enroll_Result = {
    Enroll_Result_Success                            = 0, -- 成功
    Enroll_Result_Failure                            = 1, -- 失败，比赛已经开始，不允许报名
    Enroll_Result_Enrolled                           = 2, -- 已经报过名
}

Team_Result = {
    Team_Result_Success                              = 0, -- 成功
    Team_Result_Failure                              = 1, -- 失败，比赛未开始
    Team_Result_Jioned                               = 2, -- 已经在队列中
    Team_Result_HonorLevel                           = 3, -- 声望等级不满足
    Team_Result_VipLevel                             = 4, -- vip等级不满足
    Team_Result_MatchScore                           = 5, -- 比赛积分不满足
    Team_Result_GameCurrency                         = 6, -- 游戏豆数量不满足
    Team_Result_OverGameCount                        = 7, -- 超过比赛最大局数
    Team_Result_Info_Lose                            = 8, -- 缺少个人信息
    Team_Result_OverWeekCount                        = 9, -- 超过周赛最大局数
    Team_Result_NoWeekQualification                  = 10, -- 没有周赛联赛参赛资格
}

Match_Get_Result = {
    Match_Get_Result_Success                         = 0, -- 成功
    Match_Get_Result_Geted                           = 1, -- 已经领取过了
    Match_Get_Result_NO                              = 2, -- 名次没有奖励
    Match_Get_Result_Lock                            = 3, -- 游戏豆被锁住
    Match_Get_Result_Other                           = 4, -- 未知错误
}

Clear_Match_Score_Result = {
    Clear_Match_Score_Result_Success                 = 0, -- 成功
    Clear_Match_Score_Result_Money                   = 1, -- 游戏豆不足
    Clear_Match_Score_Result_Lock                    = 2, -- 游戏豆被锁住
    Clear_Match_Score_Result_NO                      = 3, -- 不需要重置积分
}

eFunctionType = {
    eFunctionType_Whole_Chat                         = 1, -- 世界聊天(大喇叭)
    eFunctionType_Game_Chat                          = 2, -- 游戏内聊天（小喇叭）
}

eCurrencyType = {
    eCurrencyType_Game                               = 0, -- 游戏豆
    eCurrencyType_Gold                               = 1, -- 风雷币
    eCurrencyType_YuanBao                            = 2, -- 元宝（代币）
}

Phone_Reg_CheckPhoneCode_Result = {
    Phone_Reg_CheckPhoneCode_Result_Ok               = 0, -- 成功
    Phone_Reg_CheckPhoneCode_Result_RePhoneCode      = 1, -- 电话号码重复
    Phone_Reg_CheckPhoneCode_Result_Used             = 2, -- 手机号码已经被使用
    Phone_Reg_CheckPhoneCode_Result_OldPhoneErrror   = 3, -- 老手机号码错误
    Phone_Reg_CheckPhoneCode_Result_Other            = 4, -- 其它原因失败
}

Phone_GetValidateCode_Result = {
    Phone_GetValidateCode_Result_Ok                  = 0, -- 成功
    Phone_GetValidateCode_Result_Fail                = 1, -- 失败
    Phone_GetValidateCode_Result_FullTimes           = 2, -- 获取次数已满
    Phone_GetValidateCode_Result_Busy                = 3, -- 系统繁忙
    Phone_GetValidateCode_Result_TenThreeTime        = 4, -- 十分钟内超过三次
    Phone_GetValidateCode_Result_OutBindLimit        = 5, -- 超过绑定上限
    Phone_GetValidateCode_Result_Binded              = 6, -- 已经被绑定
    Phone_GetValidateCode_Result_DayBinded           = 7, -- 该用户当天已经绑定
    Phone_GetValidateCode_Result_OnlyAccount         = 8, -- 一个手机号只能绑定一个账号
    Phone_GetValidateCode_Result_DayBindOnePhone     = 9, -- 一个用户当天只能绑定一个手机号
    Phone_GetValidateCode_Result_TimeLimit           = 10, -- 没有超过24小时，不能解除绑定
    Phone_GetValidateCode_Result_Other               = 11, -- 其它原因
}

Phone_CheckPhoneValidateCode_Result = {
    Phone_CheckPhoneValidateCode_Result_Ok           = 0, -- 成功
    Phone_CheckPhoneValidateCode_Result_Error        = 1, -- 失败
    Phone_CheckPhoneValidateCode_Result_DisValidate  = 2, -- 已过有效期
    Phone_CheckPhoneValidateCode_Result_Other        = 3, -- 其它原因
}

Sms_Send_Status = {
    Sms_Send_Status_None                             = 0, -- 未操作
    Sms_Send_Status_SendIng                          = 1, -- 正在发送短信
    Sms_Send_Status_SendSucess                       = 2, -- 发送短信成功
    Sms_Send_Status_SendFail                         = 3, -- 发送短信失败
}

Sms_Operator_Type = {
    Sms_Operator_Type_None                           = 0, -- 无操作
    Sms_Operator_Type_GetValidateCode                = 1, -- 注册获取验证码
    Sms_Operator_Type_BindPhoneCode                  = 2, -- 绑定手机号获取验证码
    Sms_Operator_Type_ThirdTranser                   = 3, -- 第三方用户转化成正式用户获取验证码
    Sms_Operator_Type_FindPassWord                   = 4, -- 找回密码获取验证码
}

Phone_Bind_Result = {
    Phone_Bind_Result_Ok                             = 0, -- 成功
    Phone_Bind_Result_Fail                           = 1, -- 失败
    Phone_Bind_Result_OldPhoneError                  = 2, -- 原绑定手机号错误
    Phone_Bind_Result_DayBindOnePhone                = 3, -- 一个用户当天只能绑定一个手机号
    Phone_Bind_Result_DayBinded                      = 4, -- 该手机号当天已经绑定
    Phone_Bind_Result_OnlyAccount                    = 5, -- 一个手机号只能绑定一个账号
    Phone_Bind_Result_Binded                         = 6, -- 用户已经被绑定
    Phone_Bind_Result_UnGetAward                     = 7, -- 绑定成功但是不能获取奖励（非第一次绑定）
    Phone_Bind_Result_Busy                           = 8, -- 系统繁忙
    Phone_Bind_Result_ValiCodeError                  = 9, -- 验证码错误
}

Phone_Operateor_Result = {
    Phone_Operateor_Result_Ok                        = 0, -- 成功
    Phone_Operateor_Result_Fail                      = 1, -- 失败
}

BaseLiving_Condition_Result = {
    BaseLiving_Condition_Result_Ok                   = 0, -- 成功具备领取低保
    BaseLiving_Condition_Result_UnBindPhone          = 1, -- 未绑定手机号
    BaseLiving_Condition_Result_UseEnd               = 2, -- 今日低保已经使用完
    BaseLiving_Condition_Result_CurrencyTooMuch      = 3, -- 游戏豆太多不能领取低保
    BaseLiving_Condition_Result_Other                = 4, -- 其它原因		 
}

DataBase_Control_Type = {
    DataBase_Control_Type_BindPhone                  = 1, -- 绑定手机
}

BindPhone_Control_Type = {
    BindPhone_Control_Type_Sign                      = 1, -- 签到是否需要手机绑定
    BindPhone_Control_Type_BaseLiving                = 2, -- 低保是否需要手机绑定
    BindPhone_Control_Type_WeekSeniority             = 4, -- 周赛预选是否需要手机绑定
    BindPhone_Control_Type_RoundMatch                = 8, -- 循环赛是否需要手机绑定
    BindPhone_Control_Type_WeekMatch                 = 16, -- 周赛是否需要手机绑定
    BindPhone_Control_Type_OnlineGiveScore           = 32, -- 在线送分是否需要手机绑定 
    BindPhone_Control_Type_TaskGetAward              = 64, -- 任务领取奖励是否需要手机绑定
}

ThirdLogin_Result = {
    ThirdLogin_Result_Ok                             = 0, 
    ThirdLogin_Result_Fail                           = 1, -- 失败
    ThirdLogin_Result_ErrorKey                       = 2, -- 登录KEY值错误
    ThirdLogin_Result_TimeLimit                      = 3, -- 时限未到
}

Bmp_Type = {
    Bmp_Type_Log                                     = 0, 
    Bmp_Type_OneSeven                                = 1, 
    Bmp_Type_TwoSeven                                = 2, 
    Bmp_Type_ThreeSeven                              = 3, 
    Bmp_Type_Black                                   = 4, 
    Bmp_Type_Red                                     = 5, 
    Bmp_Type_Ying                                    = 6, 
    Bmp_Type_Square                                  = 7, 
    Bmp_Type_Apple                                   = 8, 
    Bmp_Type_Thank                                   = 9, 
    Bmp_Type_Num                                     = 10, 
}

Award_Type = {
    Award_Type_ThreeLog                              = 0, -- 三个游戏Logo
    Award_Type_ThreeThreeSeven                       = 1, -- 三个三七
    Award_Type_ThreeTwoSeven                         = 2, -- 三个二七
    Award_Type_ThreeOneSeven                         = 3, -- 三个一七
    Award_Type_ThreeBRYS                             = 4, -- 三个黑,三个红,三个樱,三个方
    Award_Type_ThreeApple                            = 5, -- 三个苹果
    Award_Type_ThreeSevenGroup                       = 6, -- 三个一七、二七、三七任意组合
    Award_Type_ThreeBRYGroup                         = 7, -- 三个黑红樱方任意组合
    Award_Type_TwoSameBmp                            = 8, -- 任意2个相同图标且不含“谢谢”图标
    Award_Type_Apple                                 = 9, -- 含有苹果
    Award_Type_NoThank                               = 10, -- 没有出现谢谢
    Award_Type_NULL                                  = 11, 
}

Award_Result = {
    Award_Result_Ok                                  = 0, -- 抽奖成功
    Award_Result_Fail                                = 1, -- 抽奖失败
    Award_Result_FreeUsed                            = 2, -- 免费抽奖已经使用完
    Award_Result_NoVip                               = 3, -- 非会员没有免费抽奖资格
    Award_Result_MoneyLimit                          = 4, -- 抽奖货币不足
}

Sys_Status = {
    Sys_Status_Eat                                   = 0, -- 系统吃分
    Sys_Status_Balance                               = 1, -- 系统平衡
    Sys_Status_Return                                = 2, -- 系统返分
}

SetBet_Result = {
    SetBet_Result_Ok                                 = 0, -- 成功
    SetBet_Result_TypeError                          = 1, -- 押注货币错误
    SetBet_Result_MoneyError                         = 2, -- 押注金额错误
    SetBet_Result_MoneyLimit                         = 3, -- 押注货币不足
}

FindPassWord_Result = {
    FindPassWord_Result_Ok                           = 0, 
    FindPassWord_Result_PhoneCodeAccountNoMatch      = 1, -- 手机号和验证码不匹配
    FindPassWord_Result_ValidateCodeError            = 2, -- 验证码错误
}

Start_Type = {
    StartType_All                                    = 0, -- 全部坐满，
    StartType_Some                                   = 1, 
}

IpLimit_Type = {
    IpLimit_Normal                                   = 0, -- 普通限制，以玩家设置为主
    IpLimit_All                                      = 1, -- 强化限制，全部限制，忽略玩家设置结果
    IpLimit_None                                     = 2, -- 弱化限制，全部不限制，忽略玩家设置结果              
    IpLimit_Num                                      = 3, 
}

EUserStatus = {
    EGAME_STATUS_NULL                                = 0, -- 默认值
    EGAME_STATUS_LOADING                             = 1, 
    EGAME_STATUS_ROOM                                = 2, 
    EGAME_STATUS_TABLE                               = 3, 
    EGAME_STATUS_GAMEING                             = 4, 
    EGAME_STATUS_WATCH                               = 5, 
}

ETableStatus = {
    ETABLE_STATUS_NULL                               = 0, -- 为空桌子状态
    ETABLE_STATUS_WAIT                               = 1, -- 为开始游戏，等待状态
    ETABLE_STATUS_WAITLOCK                           = 2, -- 锁桌子等待状态
    ETABLE_STATUS_GAMING                             = 3, -- 游戏状态
    ETABLE_STATUS_GAMINGLOCK                         = 4, -- 锁桌游戏状态
}

Fossick_Get_Result = {
    Fossick_Get_Result_Success                       = 0, -- 成功
    Fossick_Get_Result_Geted                         = 1, -- 对应淘金值已经领取过了
    Fossick_Get_Result_NO                            = 2, -- 对应索引没有奖励
    Fossick_Get_Result_Lock                          = 3, -- 游戏豆被锁住
    Fossick_Get_Result_Less                          = 4, -- 淘金值不足
    Fossick_Get_Result_Game                          = 5, -- 已经在其他游戏领取过了
    Fossick_Get_Result_Other                         = 6, -- 已经在其他游戏领取过了
}

User_IDENT = {
    UIDENT_NORMAL                                    = 0, -- 普通用户
    UIDENT_JUNIORGM                                  = 1, -- 初级客服         
    UIDENT_MIDDLEGM                                  = 2, -- 中级客服
    UIDENT_SENIORGM                                  = 3, -- 高级客服
    UIDENT_THIRD                                     = 10, -- 第三方用户   
    UIDENT_REFEREE                                   = 11, -- 裁判用户
    UIDENT_NUM                                       = 12, 
}

Log_Object_Type = {
    Log_Object_Money                                 = 1, 
    Log_Object_Gold                                  = 2, 
    Log_Object_Num                                   = 3, 
}

Log_Change_Reason = {
    Log_Change_Game                                  = 1, -- 游戏输赢
    Log_Change_VipGive                               = 2, -- 会员赠送
    Log_Change_GmChange                              = 4, -- 管理员加减
    Log_Change_GoldToMoney                           = 8, -- 钻石兑换游戏币
    Log_Change_Recharge                              = 16, -- 充值
    Log_Change_BindPhone                             = 32, -- 首次绑定手机号码
    Log_Change_RegGive                               = 64, -- 注册
    Log_Change_BaseLiving                            = 128, -- 低保领取福利
    Log_Change_EntryFee                              = 256, -- 锦标赛入场费
    Log_Change_ChampionshipAward                     = 512, -- 锦标赛奖励
    Log_Change_OneArmBandit                          = 1024, -- 老虎机抽奖日志
    Log_Change_WORLDCHAT                             = 2048, -- 世界聊天
    Log_Change_Num                                   = 2049, 
}

Log_Operate_Type = {
    Log_Operate_Type_Buy                             = 0, -- 购买获得
    Log_Operate_Type_Persent                         = 1, -- 用户赠送获得
    Log_Operate_Type_System                          = 2, -- 系统赠送获得
    Log_Operate_Type_Use                             = 3, -- 使用删除
    Log_Operate_Type_Throw                           = 4, -- 丢弃删除
    Log_Operate_Type_Overdue                         = 5, -- 过期删除
    Log_Operate_Type_Rebuy                           = 6, -- 续费获得
}

eTimer_CommonEvent = {
    eTimerEvent_Null                                 = 0, 
    eTimerEvent_AgreeLeave                           = 1, 
}

eItem_Type = {
    eItem_Type_Common                                = 0, -- 功能道具
    eItem_Type_Fashion                               = 1, -- 服装道具
    eItem_Type_Brow                                  = 2, -- 表情道具
    eItem_Type_Motif                                 = 3, -- 主题道具
}

eFashion_Type = {
    eFashion_Type_None                               = 0, -- 无
    eFashion_Type_Head                               = 1, -- 头
    eFashion_Type_Headwear                           = 2, -- 头饰
    eFashion_Type_Hair                               = 3, -- 头发
    eFashion_Type_Face                               = 4, -- 脸
    eFashion_Type_Face_Ornament                      = 5, -- 脸部饰品
    eFashion_Type_Jacket                             = 6, -- 上装
    eFashion_Type_Bottom_Cloth                       = 7, -- 下装
    eFashion_Type_Whole                              = 8, -- 整体
    eFashion_Type_Background                         = 10, -- 背景
    eFashion_Type_Foreground                         = 20, -- 前景
}

eShopGroup_Type = {
    eShopGroup_Type_Recommend                        = 0, -- 推荐道具（在填写道具分组时，策划不能用该值区分是否推荐，用recommend字段）
    eShopGroup_Type_Common                           = 1, -- 功能商品道具
    eShopGroup_Type_Fashion                          = 2, -- 服装商品道具
    eShopGroup_Type_Brow                             = 3, -- 表情商品道具
    eShopGroup_Type_Motif                            = 4, -- 主题商品道具
}

eShopItem_Type = {
    eShopItem_Type_None                              = 0, -- 无
    eShopItem_Type_New                               = 1, -- 新品
    eShopItem_Type_Hot                               = 2, -- 热卖
}

eShopBuy_Result = {
    eShopBuy_Result_Success                          = 0, -- 成功
    eShopBuy_Result_Failure                          = 1, -- 购买失败
    eShopBuy_Result_None                             = 2, -- 无效操作
    eShopBuy_Result_Version                          = 3, -- 版本不匹配
}

eChangeFashion_Result = {
    eChangeFashion_Result_Success                    = 0, -- 成功
    eChangeFashion_Result_Mismatching                = 1, -- 服装道具id和模板id不匹配
    eChangeFashion_Result_Invalid                    = 2, -- 道具不存在
    eChangeFashion_Result_Others                     = 3, -- 未知错误
}

eItemUse_Result = {
    eItemUse_Result_Success                          = 0, -- 成功
    eItemUse_Result_Item                             = 1, -- 道具不存在
    eItemUse_Result_Function                         = 2, -- 功能不存在
    eItemUse_Result_Lack                             = 3, -- 道具数量不够
    eItemUse_Result_Others                           = 4, -- 未知错误
}

ePresent_Result = {
    ePresent_Result_Success                          = 0, -- 赠送成功
    ePresent_Result_LackMoney                        = 1, -- 赠送失败,金币不足
    ePresent_Result_None                             = 2, -- 无效操作
    ePresent_Result_Version                          = 3, -- 版本不匹配
    ePresent_Result_NoUser                           = 4, -- 赠送玩家不存在
    ePresent_Result_MailOver                         = 5, -- 赠送失败，邮件超出上限
    ePresent_Result_Other                            = 6, -- 未知错误
}

signInAwardItem_Result = {
    signIn_Result_Success                            = 0, -- 签到成功
    signIn_Result_HavedSignIn                        = 1, -- 当天已经签到
    signIn_Result_None                               = 2, -- 数据库写入失败
    signIn_Result_Gameing                            = 3, -- 正在游戏
    signIn_Result_GetAward                           = 4, -- 签到获取奖励
    signIn_Result_UnBindPhone                        = 5, -- 签到未绑定手机号
    signIn_Result_Other                              = 6, -- 未知错误
}

eOperatorMailState = {
    eSend_Mail_Success                               = 0, -- 发邮件成功
    eSend_Mail_Fail                                  = 1, -- 发邮件失败
    ePersonMail_MaxNum_Fail                          = 2, -- 超出个人邮件最大数
    eRecv_Mail_User_Exits                            = 3, -- 收件人不存在
    eView_Mail_Success                               = 4, -- 查看邮件成功
    eView_Mail_Fail                                  = 5, -- 查看邮件失败
    eDelete_Mail_Success                             = 6, -- 删除邮件成功
    eDelete_Mail_Fail                                = 7, -- 删除邮件失败
    eQuestion_Mail_Success                           = 8, -- 举报文件成功
    eQuestion_Mail_Fail                              = 9, -- 举报文件失败
    eUnKnow_Result_Others                            = 10, -- 未知错误
    eQuery_Table_NORecord                            = 11, -- 查询表没有记录
    eMail_ID_Exits                                   = 12, -- 不存在此邮件
}

eMailState = {
    eMail_NORead_State                               = 0, -- 未读状态
    eMail_Readed_State                               = 1, -- 已读状态
}

eMailType = {
    eMail_System_Type                                = 0, -- 系统邮件
    eMail_Person_Type                                = 1, -- 个人邮件
}

eSendMode = {
    eMail_SysAutoSend_Mode                           = 0, -- 系统邮件
    eMail_GMAutoSend_Mode                            = 1, -- GM手动发送
    eMail_PersonAutoSend_Mode                        = 2, -- 个人手动发送
}

eMailExits = {
    eDefault_Mail                                    = 0, -- 默认邮件没有删除
    eDelete_Mail                                     = 1, -- 删除邮件
}

eGetMailAnnex_Result = {
    eGetMailAnnex_Result_Success                     = 0, -- 成功
    eGetMailAnnex_Result_NoMail                      = 1, -- 该玩家没有指定邮件
    eGetMailAnnex_Result_NoAnnex                     = 2, -- 找不到指定附件
    eGetMailAnnex_Result_Full                        = 3, -- 包裹已满
    eGetMailAnnex_Result_Others                      = 4, -- 未知错误
}

PRIORITY_TYPE = {
    PRIORITY_TYPE_1                                  = 1, --  优先级1
    PRIORITY_TYPE_2                                  = 2, --  优先级2
    PRIORITY_TYPE_3                                  = 3, --  优先级3
    PRIORITY_TYPE_4                                  = 4, --  优先级4
    PRIORITY_TYPE_5                                  = 5, --  优先级5
}

TRACK_RESULT = {
    TRACK_RESULT_SUCCESS                             = 0, -- 追踪成功
    TRACK_RESULT_NOPLAYER                            = 1, -- 玩家不在线
    TRACK_RESULT_NOROOM                              = 2, -- 玩家不在房间中
    TRACK_RESULT_NOTABLE                             = 3, -- 玩家不在桌子上
    TRACK_RESULT_OTHERS                              = 4, -- 其他错误
}

local _stLobbyUser_MT = {}
function _stLobbyUser_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.ident = BufferReadUInt32(buffer)
    self.gmPur = BufferReadInt32(buffer)
    self.vipType = BufferReadInt32(buffer)
    self.icon = BufferReadInt16(buffer)
    self.gender = BufferReadInt8(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
    self.goldCurrentcy = BufferReadFloat(buffer)
    self.strNickName = BufferReadString(buffer)
    self.assignGameCurrency = BufferReadInt64(buffer)
    self.assignGoldCurrency = BufferReadFloat(buffer)
    self.rechargeMoney = BufferReadInt32(buffer)
    self.bindPhoneCode = BufferReadString(buffer)
end

function _stLobbyUser_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteUInt32(buffer, self.ident)
    BufferWriteInt32(buffer, self.gmPur)
    BufferWriteInt32(buffer, self.vipType)
    BufferWriteInt16(buffer, self.icon)
    BufferWriteInt8(buffer, self.gender)
    BufferWriteInt64(buffer, self.gameCurrency)
    BufferWriteFloat(buffer, self.goldCurrentcy)
    BufferWriteString(buffer, self.strNickName)
    BufferWriteInt64(buffer, self.assignGameCurrency)
    BufferWriteFloat(buffer, self.assignGoldCurrency)
    BufferWriteInt32(buffer, self.rechargeMoney)
    BufferWriteString(buffer, self.bindPhoneCode)
end

function stLobbyUser(buffer)
    local self = {}
    self.userID = 0                                  -- 用户ID
    self.ident = User_IDENT.UIDENT_NORMAL            -- 用户身份
    self.gmPur = 0                                   -- 如果是GM,GM权限
    self.vipType = 0                                 -- 会员类型
    self.icon = 0                                    -- ICON
    self.gender = 0                                  -- 性别 
    self.gameCurrency = 0                            -- 游戏豆
    self.goldCurrentcy = 0                           -- 风雷币
    self.strNickName = ""                            -- 昵称
    self.assignGameCurrency = 0                      -- 划拨给游戏的游戏豆
    self.assignGoldCurrency = 0                      -- 划拨给游戏的钻石
    self.rechargeMoney = 0                           -- 玩家充值金额
    self.bindPhoneCode = ""                          -- 玩家绑定手机号

    setmetatable(self, {__index = _stLobbyUser_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stUserData_MT = {}
function _stUserData_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.ident = BufferReadUInt32(buffer)
    self.gmPur = BufferReadInt32(buffer)
    self.vipType = BufferReadInt32(buffer)
    self.icon = BufferReadInt16(buffer)
    self.gender = BufferReadInt8(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
    self.strNickName = BufferReadString(buffer)
    self.goldCurrency = BufferReadFloat(buffer)
end

function _stUserData_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteUInt32(buffer, self.ident)
    BufferWriteInt32(buffer, self.gmPur)
    BufferWriteInt32(buffer, self.vipType)
    BufferWriteInt16(buffer, self.icon)
    BufferWriteInt8(buffer, self.gender)
    BufferWriteInt64(buffer, self.gameCurrency)
    BufferWriteString(buffer, self.strNickName)
    BufferWriteFloat(buffer, self.goldCurrency)
end

function stUserData(buffer)
    local self = {}
    self.userID = 0                                  -- 用户ID
    self.ident = User_IDENT.UIDENT_NORMAL            -- 用户身份
    self.gmPur = 0                                   -- 如果是GM,GM的权限
    self.vipType = 0                                 -- 会员类型
    self.icon = 0                                    -- ICON
    self.gender = 0                                  -- 性别 
    self.gameCurrency = 0                            -- 游戏豆  
    self.strNickName = ""                            -- 昵称
    self.goldCurrency = 0                            -- 用户风雷币

    setmetatable(self, {__index = _stUserData_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stGameData_MT = {}
function _stGameData_MT:load(buffer) 
    self.userStatus = BufferReadUInt32(buffer)
    self.tableID = BufferReadInt8(buffer)
    self.chairID = BufferReadInt8(buffer)
    self.nScore = BufferReadInt32(buffer)
    self.nWin = BufferReadInt32(buffer)
    self.nLose = BufferReadInt32(buffer)
    self.nDraw = BufferReadInt32(buffer)
    self.nDisc = BufferReadInt32(buffer)
end

function _stGameData_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.userStatus)
    BufferWriteInt8(buffer, self.tableID)
    BufferWriteInt8(buffer, self.chairID)
    BufferWriteInt32(buffer, self.nScore)
    BufferWriteInt32(buffer, self.nWin)
    BufferWriteInt32(buffer, self.nLose)
    BufferWriteInt32(buffer, self.nDraw)
    BufferWriteInt32(buffer, self.nDisc)
end

function stGameData(buffer)
    local self = {}
    self.userStatus = EUserStatus.EGAME_STATUS_NULL  -- 用户状态
    self.tableID = 0
    self.chairID = 0
    self.nScore = 0
    self.nWin = 0
    self.nLose = 0
    self.nDraw = 0
    self.nDisc = 0

    setmetatable(self, {__index = _stGameData_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stGameUser_MT = {}
function _stGameUser_MT:load(buffer) 
    self.userData:load(buffer)
    self.gameData:load(buffer)
end

function _stGameUser_MT:dump(buffer) 
    self.userData:dump(buffer)
    self.gameData:dump(buffer)
end

function stGameUser(buffer)
    local self = {}
    self.userData = stUserData()                     -- stUserData
    self.gameData = stGameData()                     -- stGameData

    setmetatable(self, {__index = _stGameUser_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stBankData_MT = {}
function _stBankData_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.cofferEnd = BufferReadInt32(buffer)
    self.cofferstate = BufferReadInt8(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
    self.cofferCurrency = BufferReadInt64(buffer)
    self.goldCurrentcy = BufferReadFloat(buffer)
    self.isHaveAdvPasswd = BufferReadInt8(buffer)
end

function _stBankData_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteInt32(buffer, self.cofferEnd)
    BufferWriteInt8(buffer, self.cofferstate)
    BufferWriteInt64(buffer, self.gameCurrency)
    BufferWriteInt64(buffer, self.cofferCurrency)
    BufferWriteFloat(buffer, self.goldCurrentcy)
    BufferWriteInt8(buffer, self.isHaveAdvPasswd)
end

function stBankData(buffer)
    local self = {}
    self.userID = 0                                  -- 用户ID
    self.cofferEnd = 0                               -- 保险箱结束时间
    self.cofferstate = 0                             -- 保险箱状态, 0是为开通，1是已开通但过期， 2是开通没过期
    self.gameCurrency = 0                            -- 游戏豆
    self.cofferCurrency = 0                          -- 保险箱里的游戏豆
    self.goldCurrentcy = 0                           -- 风雷币
    self.isHaveAdvPasswd = 0                         -- 是否应有二级密码

    setmetatable(self, {__index = _stBankData_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stVipData_MT = {}
function _stVipData_MT:load(buffer) 
    self.vipExp = BufferReadInt32(buffer)
    self.vipBegin = BufferReadInt32(buffer)
    self.vipEnd = BufferReadInt32(buffer)
    self.vipLevel = BufferReadInt8(buffer)
    self.vipUp = BufferReadInt32(buffer)
end

function _stVipData_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.vipExp)
    BufferWriteInt32(buffer, self.vipBegin)
    BufferWriteInt32(buffer, self.vipEnd)
    BufferWriteInt8(buffer, self.vipLevel)
    BufferWriteInt32(buffer, self.vipUp)
end

function stVipData(buffer)
    local self = {}
    self.vipExp = 0                                  -- vip经验，以天为单位
    self.vipBegin = 0                                -- vip最后一次续费时间
    self.vipEnd = 0                                  -- vip还有多久到期
    self.vipLevel = 0                                -- vip等级, 0为非会员
    self.vipUp = 0                                   -- vip还有多少天升级

    setmetatable(self, {__index = _stVipData_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

Fri_Group = {
    FG_FRIEND                                        = 0, -- 好友
    FG_BLOCK                                         = 1, -- 黑名单
    FG_ENEMY                                         = 2, -- 仇人列表
    FG_NUM                                           = 3, -- 好友分组数量 
    FG_TOUCH                                         = 4, -- 临时好友
}

Fri_State = {
    FS_ONLINE                                        = 0, -- 好友在线
    FS_OFFLINE                                       = 1, -- 好友离线
    FS_BROKEN                                        = 2, -- 好友断线重连
}

FriAddReq_Err = {
    FDR_NONE                                         = 0, -- 没有错误
    FDR_DESNOEXIST                                   = 1, -- 被请求方不存在
    FDR_ALREADY                                      = 2, -- 已经是好友
    FDR_SRCNUMOVER                                   = 3, -- 请求方好友人数到上限
    FDR_DESNUMOVER                                   = 4, -- 被请求方好友人数到上限
}

FriOpResult = {
    FO_SUCCESS                                       = 0, -- 添加成功
    FO_NOEXIST                                       = 1, -- 玩家不存在
    FO_SRCNUMOVER                                    = 2, -- 本人好友人数到上限
    FO_DESNUMOVER                                    = 3, -- 目标方人数到上限
    FO_ALREADY                                       = 4, -- 已经是好友
    FO_NOREQUEST                                     = 5, -- 没有请求加过好友
    FO_OVERDUE                                       = 6, -- 申请已经过期
}

FriDel_Result = {
    FDRS_SUCCESS                                     = 0, -- 删除成功
    FDRS_DESNOEXIST                                  = 1, -- 好友不存在
}

Fri_SendMsg_Err = {
    FSE_NONE                                         = 0, -- 没有错误
    FSE_NOFRIEND                                     = 1, -- 不是好友不能发送消息
    FSE_NOLINE                                       = 2, -- 玩家不在线，非会员不能发送离线消息
    FSE_OVER_SEND_LIMIT                              = 3, -- 超过每天发送离线消息限制
    FSE_OVER_RECIVE_LIMIT                            = 4, -- 接收玩家超过离线消息接收上限
    FSE_DESNOEXIST                                   = 5, -- 接收方不存在
    FSE_TextFilter                                   = 6, -- 聊天内容有非法内容
    FSE_TextLengthOver                               = 7, -- 聊天内容超长
}

local _stFriNote_MT = {}
function _stFriNote_MT:load(buffer) 
    self.friID = BufferReadInt32(buffer)
    self.friGroup = BufferReadUInt32(buffer)
    self.friState = BufferReadUInt32(buffer)
    self.friIcon = BufferReadInt16(buffer)
    self.friNickName = BufferReadString(buffer)
end

function _stFriNote_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.friID)
    BufferWriteUInt32(buffer, self.friGroup)
    BufferWriteUInt32(buffer, self.friState)
    BufferWriteInt16(buffer, self.friIcon)
    BufferWriteString(buffer, self.friNickName)
end

function stFriNote(buffer)
    local self = {}
    self.friID = 0
    self.friGroup = Fri_Group.FG_FRIEND
    self.friState = Fri_State.FS_ONLINE
    self.friIcon = 0
    self.friNickName = ""

    setmetatable(self, {__index = _stFriNote_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stRoomSetting_MT = {}
function _stRoomSetting_MT:load(buffer) 
    self.minWin = BufferReadInt8(buffer)
    self.maxDisc = BufferReadInt8(buffer)
    self.maxDelay = BufferReadInt32(buffer)
    self.minScore = BufferReadInt32(buffer)
    self.isIpForbid = BufferReadInt8(buffer)
    self.isBlockForbid = BufferReadInt8(buffer)
end

function _stRoomSetting_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.minWin)
    BufferWriteInt8(buffer, self.maxDisc)
    BufferWriteInt32(buffer, self.maxDelay)
    BufferWriteInt32(buffer, self.minScore)
    BufferWriteInt8(buffer, self.isIpForbid)
    BufferWriteInt8(buffer, self.isBlockForbid)
end

function stRoomSetting(buffer)
    local self = {}
    self.minWin = 0
    self.maxDisc = 0
    self.maxDelay = 0
    self.minScore = 0
    self.isIpForbid = 0
    self.isBlockForbid = 0

    setmetatable(self, {__index = _stRoomSetting_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _ServerInfo_MT = {}
function _ServerInfo_MT:load(buffer) 
    self.srvIP = BufferReadInt8Array(buffer, 16)
    self.srvPort = BufferReadUInt16(buffer)
    self.srvID = BufferReadInt32(buffer)
    self.gateType = BufferReadInt32(buffer)
end

function _ServerInfo_MT:dump(buffer) 
    BufferWriteInt8Array(buffer, self.srvIP)
    BufferWriteUInt16(buffer, self.srvPort)
    BufferWriteInt32(buffer, self.srvID)
    BufferWriteInt32(buffer, self.gateType)
end

function ServerInfo(buffer)
    local self = {}
    self.srvIP = nil                                 -- char [16]
    self.srvPort = 0                                 -- 服务器端口号
    self.srvID = 0                                   -- 服务器id
    self.gateType = 0                                -- 网管类型

    setmetatable(self, {__index = _ServerInfo_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _TASK_SERVER_INFO_MT = {}
function _TASK_SERVER_INFO_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = ServerInfo()                          -- ServerInfo
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.taskSrvlist = i2
end

function _TASK_SERVER_INFO_MT:dump(buffer) 
    local i2 = self.taskSrvlist
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function TASK_SERVER_INFO(buffer)
    local self = {}
    self.taskSrvlist = {}                            -- vector<ServerInfo>

    setmetatable(self, {__index = _TASK_SERVER_INFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CC_CONNECT_REQ_MT = {}
function _CC_CONNECT_REQ_MT:load(buffer) 
    self.svrID = BufferReadInt32(buffer)
    self.roomID = BufferReadInt8(buffer)
end

function _CC_CONNECT_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.svrID)
    BufferWriteInt8(buffer, self.roomID)
end

function CC_CONNECT_REQ(buffer)
    local self = {}
    self.svrID = 0
    self.roomID = 0

    setmetatable(self, {__index = _CC_CONNECT_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _HEARTBEAT_CHECK_MT = {}
function _HEARTBEAT_CHECK_MT:load(buffer) 
    self.svrTime = BufferReadUInt32(buffer)
end

function _HEARTBEAT_CHECK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.svrTime)
end

function HEARTBEAT_CHECK(buffer)
    local self = {}
    self.svrTime = 0

    setmetatable(self, {__index = _HEARTBEAT_CHECK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SS_FILTER_REQ_MT = {}
function _SS_FILTER_REQ_MT:load(buffer) 
    self.filterType = BufferReadInt32(buffer)
    self.index = BufferReadUInt32(buffer)
end

function _SS_FILTER_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.filterType)
    BufferWriteUInt32(buffer, self.index)
end

function SS_FILTER_REQ(buffer)
    local self = {}
    self.filterType = 0
    self.index = 0

    setmetatable(self, {__index = _SS_FILTER_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SS_FILTER_LIST_MT = {}
function _SS_FILTER_LIST_MT:load(buffer) 
    self.filterType = BufferReadInt32(buffer)
    self.index = BufferReadUInt32(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = ""
        i4 = BufferReadString(buffer)
        table.insert(i2, i4)
    end
    self.vecFilter = i2
end

function _SS_FILTER_LIST_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.filterType)
    BufferWriteUInt32(buffer, self.index)
    local i2 = self.vecFilter
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        BufferWriteString(buffer, i1)
    end
end

function SS_FILTER_LIST(buffer)
    local self = {}
    self.filterType = 0
    self.index = 0
    self.vecFilter = {}                              -- vector<string>

    setmetatable(self, {__index = _SS_FILTER_LIST_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SS_TRUSTIP_LIST_MT = {}
function _SS_TRUSTIP_LIST_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = ""
        i4 = BufferReadString(buffer)
        table.insert(i2, i4)
    end
    self.vecTrustIP = i2
end

function _SS_TRUSTIP_LIST_MT:dump(buffer) 
    local i2 = self.vecTrustIP
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        BufferWriteString(buffer, i1)
    end
end

function SS_TRUSTIP_LIST(buffer)
    local self = {}
    self.vecTrustIP = {}                             -- vector<string>

    setmetatable(self, {__index = _SS_TRUSTIP_LIST_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _ChampionshipsInfo_MT = {}
function _ChampionshipsInfo_MT:load(buffer) 
    self.nEntryFeeType = BufferReadUInt16(buffer)
    self.nEntryFeeValue = BufferReadInt32(buffer)
    self.nBet = BufferReadInt32(buffer)
    self.nBringMoney = BufferReadInt32(buffer)
    self.nRewardType = BufferReadUInt16(buffer)
    self.nRewardValue = BufferReadInt32(buffer)
end

function _ChampionshipsInfo_MT:dump(buffer) 
    BufferWriteUInt16(buffer, self.nEntryFeeType)
    BufferWriteInt32(buffer, self.nEntryFeeValue)
    BufferWriteInt32(buffer, self.nBet)
    BufferWriteInt32(buffer, self.nBringMoney)
    BufferWriteUInt16(buffer, self.nRewardType)
    BufferWriteInt32(buffer, self.nRewardValue)
end

function ChampionshipsInfo(buffer)
    local self = {}
    self.nEntryFeeType = 0                           -- 入场费货币类型(0:钻石;1:游戏豆）
    self.nEntryFeeValue = 0                          -- 入场费数量
    self.nBet = 0                                    -- 小盲注
    self.nBringMoney = 0                             -- 携带游戏豆数量
    self.nRewardType = 0                             -- 奖励货币类型(0:钻石;1:游戏豆）
    self.nRewardValue = 0                            -- 奖励数量

    setmetatable(self, {__index = _ChampionshipsInfo_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GameInfo_MT = {}
function _GameInfo_MT:load(buffer) 
    self.gameID = BufferReadInt16(buffer)
    self.gameType = BufferReadUInt32(buffer)
    self.gameName = BufferReadString(buffer)
    self.appName = BufferReadString(buffer)
    self.roomMaxNum = BufferReadInt16(buffer)
    self.tableNum = BufferReadInt16(buffer)
    self.tablePlyNum = BufferReadInt16(buffer)
    self.reConn = BufferReadInt8(buffer)
    self.moneyLimit = BufferReadInt64(buffer)
    self.startType = BufferReadUInt32(buffer)
    self.hancUpNum = BufferReadInt8(buffer)
    self.sortID = BufferReadInt16(buffer)
    self.tax = BufferReadInt32(buffer)
    self.onlineGive = BufferReadInt32(buffer)
    self.version = BufferReadInt32(buffer)
    self.championshipData:load(buffer)
end

function _GameInfo_MT:dump(buffer) 
    BufferWriteInt16(buffer, self.gameID)
    BufferWriteUInt32(buffer, self.gameType)
    BufferWriteString(buffer, self.gameName)
    BufferWriteString(buffer, self.appName)
    BufferWriteInt16(buffer, self.roomMaxNum)
    BufferWriteInt16(buffer, self.tableNum)
    BufferWriteInt16(buffer, self.tablePlyNum)
    BufferWriteInt8(buffer, self.reConn)
    BufferWriteInt64(buffer, self.moneyLimit)
    BufferWriteUInt32(buffer, self.startType)
    BufferWriteInt8(buffer, self.hancUpNum)
    BufferWriteInt16(buffer, self.sortID)
    BufferWriteInt32(buffer, self.tax)
    BufferWriteInt32(buffer, self.onlineGive)
    BufferWriteInt32(buffer, self.version)
    self.championshipData:dump(buffer)
end

function GameInfo(buffer)
    local self = {}
    self.gameID = 0
    self.gameType = Game_Type.GameType_Common
    self.gameName = ""
    self.appName = ""
    self.roomMaxNum = 0
    self.tableNum = 0
    self.tablePlyNum = 0
    self.reConn = 0
    self.moneyLimit = 0
    self.startType = Start_Type.StartType_All
    self.hancUpNum = 0
    self.sortID = 0
    self.tax = 0
    self.onlineGive = 0
    self.version = 0
    self.championshipData = ChampionshipsInfo()      -- ChampionshipsInfo

    setmetatable(self, {__index = _GameInfo_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _RoomNum_MT = {}
function _RoomNum_MT:load(buffer) 
    self.roomID = BufferReadInt8(buffer)
    self.userNum = BufferReadInt32(buffer)
end

function _RoomNum_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.roomID)
    BufferWriteInt32(buffer, self.userNum)
end

function RoomNum(buffer)
    local self = {}
    self.roomID = 0
    self.userNum = 0

    setmetatable(self, {__index = _RoomNum_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GameTotalInfo_MT = {}
function _GameTotalInfo_MT:load(buffer) 
    self.svrInfo:load(buffer)
    self.gmInfo:load(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = RoomNum()                             -- RoomNum
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.rmInfo = i2
end

function _GameTotalInfo_MT:dump(buffer) 
    self.svrInfo:dump(buffer)
    self.gmInfo:dump(buffer)
    local i2 = self.rmInfo
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function GameTotalInfo(buffer)
    local self = {}
    self.svrInfo = ServerInfo()                      -- ServerInfo
    self.gmInfo = GameInfo()                         -- GameInfo
    self.rmInfo = {}                                 -- vector<RoomNum>

    setmetatable(self, {__index = _GameTotalInfo_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _ServerNum_MT = {}
function _ServerNum_MT:load(buffer) 
    self.srvID = BufferReadInt32(buffer)
    self.userNum = BufferReadInt32(buffer)
end

function _ServerNum_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.srvID)
    BufferWriteInt32(buffer, self.userNum)
end

function ServerNum(buffer)
    local self = {}
    self.srvID = 0
    self.userNum = 0

    setmetatable(self, {__index = _ServerNum_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _ServerStat_MT = {}
function _ServerStat_MT:load(buffer) 
    self.svrID = BufferReadInt32(buffer)
    self.gameID = BufferReadInt16(buffer)
    self.userNum = BufferReadInt32(buffer)
end

function _ServerStat_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.svrID)
    BufferWriteInt16(buffer, self.gameID)
    BufferWriteInt32(buffer, self.userNum)
end

function ServerStat(buffer)
    local self = {}
    self.svrID = 0
    self.gameID = 0
    self.userNum = 0

    setmetatable(self, {__index = _ServerStat_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _OnlineGive_MT = {}
function _OnlineGive_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.amount = BufferReadInt32(buffer)
    self.honor = BufferReadInt32(buffer)
end

function _OnlineGive_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteInt32(buffer, self.amount)
    BufferWriteInt32(buffer, self.honor)
end

function OnlineGive(buffer)
    local self = {}
    self.userID = 0
    self.amount = 0
    self.honor = 0

    setmetatable(self, {__index = _OnlineGive_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_VALIDATE_ACK_MT = {}
function _LC_VALIDATE_ACK_MT:load(buffer) 
    self.len = BufferReadInt32(buffer)
    self.codeBuffer = BufferReadInt8Array(buffer, 4092)
end

function _LC_VALIDATE_ACK_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.len)
    BufferWriteInt8Array(buffer, self.codeBuffer)
end

function LC_VALIDATE_ACK(buffer)
    local self = {}
    self.len = 0
    self.codeBuffer = nil                            -- BYTE [4092]

    setmetatable(self, {__index = _LC_VALIDATE_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CL_LOGIN_REQ_MT = {}
function _CL_LOGIN_REQ_MT:load(buffer) 
    self.strName = BufferReadString(buffer)
    self.strPasswd = BufferReadString(buffer)
    self.strIP = BufferReadString(buffer)
    self.strValidateCode = BufferReadString(buffer)
    self.strMac = BufferReadString(buffer)
    self.gateType = BufferReadInt32(buffer)
end

function _CL_LOGIN_REQ_MT:dump(buffer) 
    BufferWriteString(buffer, self.strName)
    BufferWriteString(buffer, self.strPasswd)
    BufferWriteString(buffer, self.strIP)
    BufferWriteString(buffer, self.strValidateCode)
    BufferWriteString(buffer, self.strMac)
    BufferWriteInt32(buffer, self.gateType)
end

function CL_LOGIN_REQ(buffer)
    local self = {}
    self.strName = ""                                -- 用户名
    self.strPasswd = ""                              -- 密码
    self.strIP = ""                                  -- 登陆IP
    self.strValidateCode = ""                        -- 验证码
    self.strMac = ""                                 -- 客户端物理地址
    self.gateType = 0                                -- 网关类型

    setmetatable(self, {__index = _CL_LOGIN_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

ELoginResult = {
    ELOGIN_RESULT_OK                                 = 0, -- 登陆成功
    ELOGIN_RESULT_WRONGVALID                         = 1, -- 验证码错误
    ELOGIN_RESULT_NONAME                             = 2, -- 用户不存在
    ELOGIN_RESULT_WRONGPASSWD                        = 3, -- 密码错误
    ELOGIN_RESULT_BINDING                            = 4, -- 帐号绑定在其它机器登陆
    ELOGIN_RESULT_FORBID                             = 5, -- 帐号被禁用
    ELOGIN_RESULT_ICE                                = 6, -- 帐号被封冻
    ELOGIN_RESULT_LOST                               = 7, -- 帐号失效
    ELOGIN_RESULT_RELOGIN                            = 8, -- 帐号已经登陆
    ELOGIN_RESULT_BUSY                               = 9, -- 系统繁忙 
    ELOGIN_RESULT_WRONGDYNPWD                        = 10, -- 动态密码错误
    ELOGIN_RESULT_MAC_LIMIT                          = 11, -- /该设备禁止登陆游戏
}

local _LC_LOGIN_ACK_MT = {}
function _LC_LOGIN_ACK_MT:load(buffer) 
    self.loginRet = BufferReadUInt32(buffer)
    self.userID = BufferReadInt32(buffer)
    self.strPassCode = BufferReadString(buffer)
    self.serverID = BufferReadInt32(buffer)
    self.strIP = BufferReadString(buffer)
    self.wPort = BufferReadUInt16(buffer)
    self.lastLoginIP = BufferReadString(buffer)
    self.lastLoginTime = BufferReadInt32(buffer)
    self.curLoginIP = BufferReadString(buffer)
    self.curLoginTime = BufferReadInt32(buffer)
    self.startTime = BufferReadInt8(buffer)
    self.getValiCodeDecGameCurrency = BufferReadInt64(buffer)
end

function _LC_LOGIN_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.loginRet)
    BufferWriteInt32(buffer, self.userID)
    BufferWriteString(buffer, self.strPassCode)
    BufferWriteInt32(buffer, self.serverID)
    BufferWriteString(buffer, self.strIP)
    BufferWriteUInt16(buffer, self.wPort)
    BufferWriteString(buffer, self.lastLoginIP)
    BufferWriteInt32(buffer, self.lastLoginTime)
    BufferWriteString(buffer, self.curLoginIP)
    BufferWriteInt32(buffer, self.curLoginTime)
    BufferWriteInt8(buffer, self.startTime)
    BufferWriteInt64(buffer, self.getValiCodeDecGameCurrency)
end

function LC_LOGIN_ACK(buffer)
    local self = {}
    self.loginRet = ELoginResult.ELOGIN_RESULT_OK    -- 登陆结果
    self.userID = 0                                  -- 用户ID
    self.strPassCode = ""                            -- 通行证
    self.serverID = 0                                -- 选择登陆的lobbyserver id
    self.strIP = ""                                  -- 选择登陆的lobbyserver ip
    self.wPort = 0                                   -- 选择登陆的lobbyserver port
    self.lastLoginIP = ""
    self.lastLoginTime = 0
    self.curLoginIP = ""
    self.curLoginTime = 0
    self.startTime = 0                               -- 获取验证码是否进行次数控制
    self.getValiCodeDecGameCurrency = 0              -- 获取验证码扣取游戏豆数量

    setmetatable(self, {__index = _LC_LOGIN_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _AL_LOGIN_ACK_MT = {}
function _AL_LOGIN_ACK_MT:load(buffer) 
    self.loginRet = BufferReadUInt32(buffer)
    self.userID = BufferReadInt32(buffer)
    self.strPassCode = BufferReadString(buffer)
    self.lastLoginIP = BufferReadString(buffer)
    self.lastLoginTime = BufferReadInt32(buffer)
    self.dynTime = BufferReadInt32(buffer)
    self.dynPwd = BufferReadString(buffer)
end

function _AL_LOGIN_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.loginRet)
    BufferWriteInt32(buffer, self.userID)
    BufferWriteString(buffer, self.strPassCode)
    BufferWriteString(buffer, self.lastLoginIP)
    BufferWriteInt32(buffer, self.lastLoginTime)
    BufferWriteInt32(buffer, self.dynTime)
    BufferWriteString(buffer, self.dynPwd)
end

function AL_LOGIN_ACK(buffer)
    local self = {}
    self.loginRet = ELoginResult.ELOGIN_RESULT_OK    -- 登陆结果
    self.userID = 0                                  -- 用户ID
    self.strPassCode = ""                            -- 通行证
    self.lastLoginIP = ""
    self.lastLoginTime = 0
    self.dynTime = 0
    self.dynPwd = ""

    setmetatable(self, {__index = _AL_LOGIN_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _ML_LOGIN_ACK_MT = {}
function _ML_LOGIN_ACK_MT:load(buffer) 
    self.loginRet = BufferReadUInt32(buffer)
    self.userID = BufferReadInt32(buffer)
    self.strPassCode = BufferReadString(buffer)
    self.serverID = BufferReadInt32(buffer)
    self.strIP = BufferReadString(buffer)
    self.wPort = BufferReadUInt16(buffer)
end

function _ML_LOGIN_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.loginRet)
    BufferWriteInt32(buffer, self.userID)
    BufferWriteString(buffer, self.strPassCode)
    BufferWriteInt32(buffer, self.serverID)
    BufferWriteString(buffer, self.strIP)
    BufferWriteUInt16(buffer, self.wPort)
end

function ML_LOGIN_ACK(buffer)
    local self = {}
    self.loginRet = ELoginResult.ELOGIN_RESULT_OK    -- 登陆结果
    self.userID = 0                                  -- 用户ID
    self.strPassCode = ""                            -- 通行证
    self.serverID = 0                                -- 选择登陆的lobbyserver id
    self.strIP = ""                                  -- 选择登陆的lobbyserver ip
    self.wPort = 0                                   -- 选择登陆的lobbyserver port

    setmetatable(self, {__index = _ML_LOGIN_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LM_USERLOGIN_REQ_MT = {}
function _LM_USERLOGIN_REQ_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.strPassCode = BufferReadString(buffer)
    self.gateType = BufferReadInt32(buffer)
end

function _LM_USERLOGIN_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteString(buffer, self.strPassCode)
    BufferWriteInt32(buffer, self.gateType)
end

function LM_USERLOGIN_REQ(buffer)
    local self = {}
    self.userID = 0
    self.strPassCode = ""
    self.gateType = 0

    setmetatable(self, {__index = _LM_USERLOGIN_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_USERLOGIN_REQ_MT = {}
function _CS_USERLOGIN_REQ_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.strPassCode = BufferReadString(buffer)
    self.strMac = BufferReadString(buffer)
    self.strValidate = BufferReadString(buffer)
    self.loginMachineType = BufferReadInt8(buffer)
end

function _CS_USERLOGIN_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteString(buffer, self.strPassCode)
    BufferWriteString(buffer, self.strMac)
    BufferWriteString(buffer, self.strValidate)
    BufferWriteInt8(buffer, self.loginMachineType)
end

function CS_USERLOGIN_REQ(buffer)
    local self = {}
    self.userID = 0
    self.strPassCode = ""
    self.strMac = ""
    self.strValidate = ""
    self.loginMachineType = 0                        -- 登录机器类型 0 --PC登录 1-- 安卓登录 2 --苹果登录

    setmetatable(self, {__index = _CS_USERLOGIN_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_VALIDATE_ACK_MT = {}
function _SC_VALIDATE_ACK_MT:load(buffer) 
    self.len = BufferReadInt32(buffer)
    self.codeBuffer = BufferReadInt8Array(buffer, 4092)
end

function _SC_VALIDATE_ACK_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.len)
    BufferWriteInt8Array(buffer, self.codeBuffer)
end

function SC_VALIDATE_ACK(buffer)
    local self = {}
    self.len = 0
    self.codeBuffer = nil                            -- BYTE [4092]

    setmetatable(self, {__index = _SC_VALIDATE_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

ELobbyResult = {
    ELOBBY_RESULT_OK                                 = 0, -- 登陆成功
    ELOBBY_RESULT_RELOGIN                            = 1, -- 帐号已经登陆
    ELOBBY_RESULT_PUNISH                             = 2, -- 违反用户条例
    ELOBBY_RESULT_BUSY                               = 3, -- 系统繁忙 
    ELOBBY_RESULT_WRONGVALIDATE                      = 4, -- 错误的验证码
}

local _SC_USERLOGIN_ACK_MT = {}
function _SC_USERLOGIN_ACK_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.lobbyResult = BufferReadUInt32(buffer)
    self.userData:load(buffer)
end

function _SC_USERLOGIN_ACK_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteUInt32(buffer, self.lobbyResult)
    self.userData:dump(buffer)
end

function SC_USERLOGIN_ACK(buffer)
    local self = {}
    self.userID = 0
    self.lobbyResult = ELobbyResult.ELOBBY_RESULT_OK
    self.userData = stLobbyUser()                    -- stLobbyUser

    setmetatable(self, {__index = _SC_USERLOGIN_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _MS_USERLOGIN_ACK_MT = {}
function _MS_USERLOGIN_ACK_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.lobbyResult = BufferReadUInt32(buffer)
end

function _MS_USERLOGIN_ACK_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteUInt32(buffer, self.lobbyResult)
end

function MS_USERLOGIN_ACK(buffer)
    local self = {}
    self.userID = 0
    self.lobbyResult = ELobbyResult.ELOBBY_RESULT_OK

    setmetatable(self, {__index = _MS_USERLOGIN_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _DS_USERLOGIN_ACK_MT = {}
function _DS_USERLOGIN_ACK_MT:load(buffer) 
    self.lobbyResult = BufferReadUInt32(buffer)
    self.userData:load(buffer)
    self.bindPhoneCode = BufferReadString(buffer)
    self.controlBindPhoneValue = BufferReadInt32(buffer)
    self.bTodayfirst = BufferReadInt8(buffer)
    self.bTodayFree = BufferReadInt8(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
    self.totalgamecurrency = BufferReadInt64(buffer)
    self.awardGamecurrency = BufferReadInt32(buffer)
end

function _DS_USERLOGIN_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.lobbyResult)
    self.userData:dump(buffer)
    BufferWriteString(buffer, self.bindPhoneCode)
    BufferWriteInt32(buffer, self.controlBindPhoneValue)
    BufferWriteInt8(buffer, self.bTodayfirst)
    BufferWriteInt8(buffer, self.bTodayFree)
    BufferWriteInt64(buffer, self.gameCurrency)
    BufferWriteInt64(buffer, self.totalgamecurrency)
    BufferWriteInt32(buffer, self.awardGamecurrency)
end

function DS_USERLOGIN_ACK(buffer)
    local self = {}
    self.lobbyResult = ELobbyResult.ELOBBY_RESULT_OK
    self.userData = stLobbyUser()                    -- stLobbyUser
    self.bindPhoneCode = ""
    self.controlBindPhoneValue = 0                   -- 控制手机绑定功能值
    self.bTodayfirst = 0                             -- 是否当天第一次抽奖
    self.bTodayFree = 0                              -- 是否免费抽奖
    self.gameCurrency = 0                            -- 玩家累积输赢游戏豆
    self.totalgamecurrency = 0
    self.awardGamecurrency = 0

    setmetatable(self, {__index = _DS_USERLOGIN_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_LOGIN_REQ_MT = {}
function _CG_LOGIN_REQ_MT:load(buffer) 
    self.gameServerId = BufferReadInt32(buffer)
    self.strMac = BufferReadString(buffer)
end

function _CG_LOGIN_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.gameServerId)
    BufferWriteString(buffer, self.strMac)
end

function CG_LOGIN_REQ(buffer)
    local self = {}
    self.gameServerId = 0                            -- gameserver的服务器id
    self.strMac = ""

    setmetatable(self, {__index = _CG_LOGIN_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

EGameResult = {
    EGAME_RESULT_OK                                  = 0, -- 登陆成功
    EGAME_RESULT_RELOGIN                             = 1, -- 重复登录
    EGAME_RESULT_NUMOVER                             = 2, -- 房间已满
    EGAME_RESULT_ILLEGAL                             = 3, -- 非法登陆
    EGAME_RESULT_PUNISH                              = 4, -- 违反用户条例，暂时不能进入
    EGAME_RESULT_WAIT                                = 5, -- 游戏维护, 稍后进入
    EGAME_RESULT_BUSY                                = 6, -- 系统繁忙 
    EGAME_RESULT_NOTRAIL                             = 7, -- 试玩玩家不能进入
    EGAME_RESULT_NOMATCHSTART                        = 8, -- 比赛没有开始
    EGAME_RESULT_NOVIPENTERROOM                      = 9, -- 非VIP不能进入包房
}

local _GD_USERLOGIN_REQ_MT = {}
function _GD_USERLOGIN_REQ_MT:load(buffer) 
    self.gameID = BufferReadInt16(buffer)
    self.gameType = BufferReadUInt32(buffer)
    self.serverID = BufferReadInt32(buffer)
    self.roomID = BufferReadInt8(buffer)
    self.initScore = BufferReadInt32(buffer)
end

function _GD_USERLOGIN_REQ_MT:dump(buffer) 
    BufferWriteInt16(buffer, self.gameID)
    BufferWriteUInt32(buffer, self.gameType)
    BufferWriteInt32(buffer, self.serverID)
    BufferWriteInt8(buffer, self.roomID)
    BufferWriteInt32(buffer, self.initScore)
end

function GD_USERLOGIN_REQ(buffer)
    local self = {}
    self.gameID = 0
    self.gameType = Game_Type.GameType_Common
    self.serverID = 0
    self.roomID = 0
    self.initScore = 0

    setmetatable(self, {__index = _GD_USERLOGIN_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _DG_USERLOGIN_ACK_MT = {}
function _DG_USERLOGIN_ACK_MT:load(buffer) 
    self.gameResult = BufferReadUInt32(buffer)
    self.roomID = BufferReadInt8(buffer)
    self.gain = BufferReadInt32(buffer)
    self.userData:load(buffer)
    self.bindPhoneCode = BufferReadString(buffer)
    self.controlBindPhoneValue = BufferReadInt32(buffer)
    self.icon = BufferReadInt16(buffer)
    self.nJoinNum = BufferReadInt32(buffer)
    self.nEndNum = BufferReadInt32(buffer)
end

function _DG_USERLOGIN_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.gameResult)
    BufferWriteInt8(buffer, self.roomID)
    BufferWriteInt32(buffer, self.gain)
    self.userData:dump(buffer)
    BufferWriteString(buffer, self.bindPhoneCode)
    BufferWriteInt32(buffer, self.controlBindPhoneValue)
    BufferWriteInt16(buffer, self.icon)
    BufferWriteInt32(buffer, self.nJoinNum)
    BufferWriteInt32(buffer, self.nEndNum)
end

function DG_USERLOGIN_ACK(buffer)
    local self = {}
    self.gameResult = EGameResult.EGAME_RESULT_OK
    self.roomID = 0
    self.gain = 0
    self.userData = stGameUser()                     -- stGameUser
    self.bindPhoneCode = ""
    self.controlBindPhoneValue = 0                   -- 控制手机绑定功能值
    self.icon = 0                                    -- pc和手游头像
    self.nJoinNum = 0                                -- 入局局数
    self.nEndNum = 0                                 -- 摊牌局数

    setmetatable(self, {__index = _DG_USERLOGIN_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GD_MONEY_UNLOCK_REQ_MT = {}
function _GD_MONEY_UNLOCK_REQ_MT:load(buffer) 
    self.svrID = BufferReadInt32(buffer)
    self.roomID = BufferReadInt8(buffer)
end

function _GD_MONEY_UNLOCK_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.svrID)
    BufferWriteInt8(buffer, self.roomID)
end

function GD_MONEY_UNLOCK_REQ(buffer)
    local self = {}
    self.svrID = 0
    self.roomID = 0

    setmetatable(self, {__index = _GD_MONEY_UNLOCK_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GD_MONEY_LOCK_REQ_MT = {}
function _GD_MONEY_LOCK_REQ_MT:load(buffer) 
    self.svrID = BufferReadInt32(buffer)
    self.roomID = BufferReadInt8(buffer)
end

function _GD_MONEY_LOCK_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.svrID)
    BufferWriteInt8(buffer, self.roomID)
end

function GD_MONEY_LOCK_REQ(buffer)
    local self = {}
    self.svrID = 0
    self.roomID = 0

    setmetatable(self, {__index = _GD_MONEY_LOCK_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GM_GAMEINFO_MT = {}
function _GM_GAMEINFO_MT:load(buffer) 
    self.gameInfo:load(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = RoomNum()                             -- RoomNum
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vecRooms = i2
end

function _GM_GAMEINFO_MT:dump(buffer) 
    self.gameInfo:dump(buffer)
    local i2 = self.vecRooms
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function GM_GAMEINFO(buffer)
    local self = {}
    self.gameInfo = GameInfo()                       -- GameInfo
    self.vecRooms = {}                               -- vector<RoomNum>

    setmetatable(self, {__index = _GM_GAMEINFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GM_ROOM_NUM_UP_MT = {}
function _GM_ROOM_NUM_UP_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = RoomNum()                             -- RoomNum
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vecRooms = i2
end

function _GM_ROOM_NUM_UP_MT:dump(buffer) 
    local i2 = self.vecRooms
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function GM_ROOM_NUM_UP(buffer)
    local self = {}
    self.vecRooms = {}                               -- vector<RoomNum>

    setmetatable(self, {__index = _GM_ROOM_NUM_UP_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SF_USERLOGIN_MT = {}
function _SF_USERLOGIN_MT:load(buffer) 
    self.vipLevel = BufferReadInt8(buffer)
    self.icon = BufferReadInt16(buffer)
    self.nickName = BufferReadString(buffer)
end

function _SF_USERLOGIN_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.vipLevel)
    BufferWriteInt16(buffer, self.icon)
    BufferWriteString(buffer, self.nickName)
end

function SF_USERLOGIN(buffer)
    local self = {}
    self.vipLevel = 0
    self.icon = 0
    self.nickName = ""

    setmetatable(self, {__index = _SF_USERLOGIN_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_DYNPWD_REQ_MT = {}
function _LC_DYNPWD_REQ_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = 0
        i4 = BufferReadInt32(buffer)
        table.insert(i2, i4)
    end
    self.vecIndex = i2
    self.day = BufferReadInt32(buffer)
end

function _LC_DYNPWD_REQ_MT:dump(buffer) 
    local i2 = self.vecIndex
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        BufferWriteInt32(buffer, i1)
    end
    BufferWriteInt32(buffer, self.day)
end

function LC_DYNPWD_REQ(buffer)
    local self = {}
    self.vecIndex = {}                               -- vector<int>
    self.day = 0                                     -- 动态密码生效的天数

    setmetatable(self, {__index = _LC_DYNPWD_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CL_DYNPWD_ACK_MT = {}
function _CL_DYNPWD_ACK_MT:load(buffer) 
    self.strPwd = BufferReadString(buffer)
end

function _CL_DYNPWD_ACK_MT:dump(buffer) 
    BufferWriteString(buffer, self.strPwd)
end

function CL_DYNPWD_ACK(buffer)
    local self = {}
    self.strPwd = ""                                 -- 动态密码

    setmetatable(self, {__index = _CL_DYNPWD_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CL_REG_REQ_MT = {}
function _CL_REG_REQ_MT:load(buffer) 
    self.strAccount = BufferReadString(buffer)
    self.strNickName = BufferReadString(buffer)
    self.strPasswd = BufferReadString(buffer)
    self.strRealName = BufferReadString(buffer)
    self.strIDCard = BufferReadString(buffer)
    self.strPhone = BufferReadString(buffer)
    self.strEmail = BufferReadString(buffer)
    self.strValid = BufferReadString(buffer)
    self.gender = BufferReadInt8(buffer)
    self.icon = BufferReadInt16(buffer)
    self.strIP = BufferReadString(buffer)
    self.strMac = BufferReadString(buffer)
    self.phoneReg = BufferReadInt8(buffer)
    self.sessionId = BufferReadString(buffer)
    self.userID = BufferReadInt32(buffer)
    self.dWebConnIndex = BufferReadUInt32(buffer)
    self.validCode = BufferReadUInt32(buffer)
    self.validCodeValiPeriod = BufferReadUInt32(buffer)
    self.smsOperType = BufferReadUInt32(buffer)
end

function _CL_REG_REQ_MT:dump(buffer) 
    BufferWriteString(buffer, self.strAccount)
    BufferWriteString(buffer, self.strNickName)
    BufferWriteString(buffer, self.strPasswd)
    BufferWriteString(buffer, self.strRealName)
    BufferWriteString(buffer, self.strIDCard)
    BufferWriteString(buffer, self.strPhone)
    BufferWriteString(buffer, self.strEmail)
    BufferWriteString(buffer, self.strValid)
    BufferWriteInt8(buffer, self.gender)
    BufferWriteInt16(buffer, self.icon)
    BufferWriteString(buffer, self.strIP)
    BufferWriteString(buffer, self.strMac)
    BufferWriteInt8(buffer, self.phoneReg)
    BufferWriteString(buffer, self.sessionId)
    BufferWriteInt32(buffer, self.userID)
    BufferWriteUInt32(buffer, self.dWebConnIndex)
    BufferWriteUInt32(buffer, self.validCode)
    BufferWriteUInt32(buffer, self.validCodeValiPeriod)
    BufferWriteUInt32(buffer, self.smsOperType)
end

function CL_REG_REQ(buffer)
    local self = {}
    self.strAccount = ""
    self.strNickName = ""
    self.strPasswd = ""
    self.strRealName = ""
    self.strIDCard = ""
    self.strPhone = ""
    self.strEmail = ""
    self.strValid = ""
    self.gender = 0
    self.icon = 0
    self.strIP = ""
    self.strMac = ""
    self.phoneReg = 0                                -- 0--代表pc注册 1--代表手机注册
    self.sessionId = ""                              -- 用户唯一标示
    self.userID = 0                                  -- 推荐人id
    self.dWebConnIndex = 0                           -- web服务器对应的网页的连接Id
    self.validCode = 0                               -- 验证码
    self.validCodeValiPeriod = 0                     -- 验证码有效期 
    self.smsOperType = Sms_Operator_Type.Sms_Operator_Type_None -- 短信操作类型

    setmetatable(self, {__index = _CL_REG_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

ERegResult = {
    EREG_RESULT_OK                                   = 0, -- 登陆成功
    EREG_RESULT_INVALID                              = 1, -- 错误验证码
    EREG_RESULT_REACCOUNT                            = 2, -- 用户名已被注册
    EREG_RESULT_RENICKNAME                           = 3, 
    EREG_RESULT_TIMELIMIT                            = 4, -- 时限未到
    EREG_RESULT_BUSY                                 = 5, 
    EREG_RESULT_PHONEUSED                            = 6, -- 手机号码已经被使用
    EREG_RESULT_VALIDCODEERROR                       = 7, -- 验证码错误
    EREG_RESULT_ACCOUNTERROR                         = 8, -- 账号错误
    EREG_RESULT_PASSWORDERROR                        = 9, -- 密码长度不对
    EREG_RESULT_PHONECODEERROR                       = 10, -- 手机号码长度不对
    EREG_RESULT_PHONE_PROHIBITED                     = 11, -- 手机号被禁止
}

local _LC_REG_ACK_MT = {}
function _LC_REG_ACK_MT:load(buffer) 
    self.regResult = BufferReadUInt32(buffer)
    self.userID = BufferReadInt32(buffer)
    self.leftTime = BufferReadInt8(buffer)
    self.userAccount = BufferReadString(buffer)
    self.userPassword = BufferReadString(buffer)
end

function _LC_REG_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.regResult)
    BufferWriteInt32(buffer, self.userID)
    BufferWriteInt8(buffer, self.leftTime)
    BufferWriteString(buffer, self.userAccount)
    BufferWriteString(buffer, self.userPassword)
end

function LC_REG_ACK(buffer)
    local self = {}
    self.regResult = ERegResult.EREG_RESULT_OK
    self.userID = 0
    self.leftTime = 0
    self.userAccount = ""
    self.userPassword = ""

    setmetatable(self, {__index = _LC_REG_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _DA_CHECK_NICKNAME_MT = {}
function _DA_CHECK_NICKNAME_MT:load(buffer) 
    self.cRet = BufferReadInt8(buffer)
end

function _DA_CHECK_NICKNAME_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.cRet)
end

function DA_CHECK_NICKNAME(buffer)
    local self = {}
    self.cRet = 0                                    -- 0为不重复，1为重复

    setmetatable(self, {__index = _DA_CHECK_NICKNAME_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CL_CHECK_ACCOUNT_MT = {}
function _CL_CHECK_ACCOUNT_MT:load(buffer) 
    self.strAccount = BufferReadString(buffer)
end

function _CL_CHECK_ACCOUNT_MT:dump(buffer) 
    BufferWriteString(buffer, self.strAccount)
end

function CL_CHECK_ACCOUNT(buffer)
    local self = {}
    self.strAccount = ""

    setmetatable(self, {__index = _CL_CHECK_ACCOUNT_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_CHECK_ACCOUNT_MT = {}
function _LC_CHECK_ACCOUNT_MT:load(buffer) 
    self.ret = BufferReadInt8(buffer)
    self.strAccount = BufferReadString(buffer)
end

function _LC_CHECK_ACCOUNT_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.ret)
    BufferWriteString(buffer, self.strAccount)
end

function LC_CHECK_ACCOUNT(buffer)
    local self = {}
    self.ret = 0
    self.strAccount = ""

    setmetatable(self, {__index = _LC_CHECK_ACCOUNT_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GameData_MT = {}
function _GameData_MT:load(buffer) 
    self.srvID = BufferReadInt32(buffer)
    self.gmInfo:load(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = RoomNum()                             -- RoomNum
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.rmInfo = i2
end

function _GameData_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.srvID)
    self.gmInfo:dump(buffer)
    local i2 = self.rmInfo
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function GameData(buffer)
    local self = {}
    self.srvID = 0                                   -- 服务器id
    self.gmInfo = GameInfo()                         -- GameInfo
    self.rmInfo = {}                                 -- vector<RoomNum>

    setmetatable(self, {__index = _GameData_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GS_GAMELIST_ACK_MT = {}
function _GS_GAMELIST_ACK_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = GameData()                            -- GameData
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vecGameInfo = i2
end

function _GS_GAMELIST_ACK_MT:dump(buffer) 
    local i2 = self.vecGameInfo
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function GS_GAMELIST_ACK(buffer)
    local self = {}
    self.vecGameInfo = {}                            -- vector<GameData>

    setmetatable(self, {__index = _GS_GAMELIST_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_GAMELIST_ACK_MT = {}
function _SC_GAMELIST_ACK_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = GameTotalInfo()                       -- GameTotalInfo
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vecGameInfo = i2
end

function _SC_GAMELIST_ACK_MT:dump(buffer) 
    local i2 = self.vecGameInfo
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function SC_GAMELIST_ACK(buffer)
    local self = {}
    self.vecGameInfo = {}                            -- vector<GameTotalInfo>

    setmetatable(self, {__index = _SC_GAMELIST_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_GAME_ADD_MT = {}
function _SC_GAME_ADD_MT:load(buffer) 
    self.gameInfo:load(buffer)
    self.channelType = BufferReadInt32(buffer)
end

function _SC_GAME_ADD_MT:dump(buffer) 
    self.gameInfo:dump(buffer)
    BufferWriteInt32(buffer, self.channelType)
end

function SC_GAME_ADD(buffer)
    local self = {}
    self.gameInfo = GameTotalInfo()                  -- GameTotalInfo
    self.channelType = 0

    setmetatable(self, {__index = _SC_GAME_ADD_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_GAME_DEL_MT = {}
function _SC_GAME_DEL_MT:load(buffer) 
    self.svrID = BufferReadInt32(buffer)
end

function _SC_GAME_DEL_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.svrID)
end

function SC_GAME_DEL(buffer)
    local self = {}
    self.svrID = 0

    setmetatable(self, {__index = _SC_GAME_DEL_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stGameRoomNum_MT = {}
function _stGameRoomNum_MT:load(buffer) 
    self.svrID = BufferReadInt32(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = RoomNum()                             -- RoomNum
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vecRoomNum = i2
end

function _stGameRoomNum_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.svrID)
    local i2 = self.vecRoomNum
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function stGameRoomNum(buffer)
    local self = {}
    self.svrID = 0
    self.vecRoomNum = {}                             -- vector<RoomNum>

    setmetatable(self, {__index = _stGameRoomNum_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_GAME_UP_ROOMNUM_MT = {}
function _SC_GAME_UP_ROOMNUM_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = stGameRoomNum()                       -- stGameRoomNum
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vecGameRoomNum = i2
end

function _SC_GAME_UP_ROOMNUM_MT:dump(buffer) 
    local i2 = self.vecGameRoomNum
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function SC_GAME_UP_ROOMNUM(buffer)
    local self = {}
    self.vecGameRoomNum = {}                         -- vector<stGameRoomNum>

    setmetatable(self, {__index = _SC_GAME_UP_ROOMNUM_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_GAMEUSER_DEL_MT = {}
function _GC_GAMEUSER_DEL_MT:load(buffer) 
    self.roomID = BufferReadInt8(buffer)
    self.userID = BufferReadInt32(buffer)
end

function _GC_GAMEUSER_DEL_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.roomID)
    BufferWriteInt32(buffer, self.userID)
end

function GC_GAMEUSER_DEL(buffer)
    local self = {}
    self.roomID = 0
    self.userID = 0

    setmetatable(self, {__index = _GC_GAMEUSER_DEL_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

Attr_Entry = {
    eAttrEntry_Null                                  = 0, 
    eAttrEntry_Money                                 = 1, -- 更新游戏豆
    eAttrEntry_Score                                 = 2, -- 更新积分
    eAttrEntry_Status                                = 3, -- 更新状态
    eAttrEntry_Win                                   = 4, -- 更新赢局
    eAttrEntry_Lose                                  = 5, -- 更新输局
    eAttrEntry_Draw                                  = 6, -- 更新平局
    eAttrEntry_Disc                                  = 7, -- 更新断线
    eAttrEntry_Train                                 = 8, -- 更新练习币
    eAtrrEntry_GameMoney                             = 9, -- 类似于德州扑克更新小游戏内携带的游戏豆
    eAtrrEntry_Gold                                  = 10, -- 更新钻石
    eAttrEntry_Num                                   = 11, 
}

local _stAttr_MT = {}
function _stAttr_MT:load(buffer) 
    self.attrEntry = BufferReadInt8(buffer)
    self.attrValue = BufferReadInt64(buffer)
end

function _stAttr_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.attrEntry)
    BufferWriteInt64(buffer, self.attrValue)
end

function stAttr(buffer)
    local self = {}
    self.attrEntry = 0
    self.attrValue = 0

    setmetatable(self, {__index = _stAttr_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stTableStaus_MT = {}
function _stTableStaus_MT:load(buffer) 
    self.tableID = BufferReadInt8(buffer)
    self.status = BufferReadInt8(buffer)
end

function _stTableStaus_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.tableID)
    BufferWriteInt8(buffer, self.status)
end

function stTableStaus(buffer)
    local self = {}
    self.tableID = 0
    self.status = 0

    setmetatable(self, {__index = _stTableStaus_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_TABLE_STATSLIST_MT = {}
function _GC_TABLE_STATSLIST_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = stTableStaus()                        -- stTableStaus
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.statusList = i2
end

function _GC_TABLE_STATSLIST_MT:dump(buffer) 
    local i2 = self.statusList
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function GC_TABLE_STATSLIST(buffer)
    local self = {}
    self.statusList = {}                             -- vector<stTableStaus>

    setmetatable(self, {__index = _GC_TABLE_STATSLIST_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_GAMEUSER_UP_MT = {}
function _GC_GAMEUSER_UP_MT:load(buffer) 
    self.changeID = BufferReadInt32(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = stAttr()                              -- stAttr
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.attrList = i2
end

function _GC_GAMEUSER_UP_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.changeID)
    local i2 = self.attrList
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function GC_GAMEUSER_UP(buffer)
    local self = {}
    self.changeID = 0
    self.attrList = {}                               -- vector<stAttr>

    setmetatable(self, {__index = _GC_GAMEUSER_UP_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_TABLE_USERLIST_MT = {}
function _GC_TABLE_USERLIST_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = stGameUser()                          -- stGameUser
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.userList = i2
end

function _GC_TABLE_USERLIST_MT:dump(buffer) 
    local i2 = self.userList
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function GC_TABLE_USERLIST(buffer)
    local self = {}
    self.userList = {}                               -- vector<stGameUser>

    setmetatable(self, {__index = _GC_TABLE_USERLIST_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_ENTERTABLE_REQ_MT = {}
function _CG_ENTERTABLE_REQ_MT:load(buffer) 
    self.tableID = BufferReadInt8(buffer)
    self.chairID = BufferReadInt8(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
    self.goldCurrency = BufferReadFloat(buffer)
end

function _CG_ENTERTABLE_REQ_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.tableID)
    BufferWriteInt8(buffer, self.chairID)
    BufferWriteInt64(buffer, self.gameCurrency)
    BufferWriteFloat(buffer, self.goldCurrency)
end

function CG_ENTERTABLE_REQ(buffer)
    local self = {}
    self.tableID = 0                                 -- 桌子ID
    self.chairID = 0                                 -- 座位ID
    self.gameCurrency = 0                            -- 用户身上的游戏豆
    self.goldCurrency = 0                            -- 用户身上的钻石

    setmetatable(self, {__index = _CG_ENTERTABLE_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_JOIN_TABLE_REQ_MT = {}
function _CG_JOIN_TABLE_REQ_MT:load(buffer) 
    self.nTableID = BufferReadInt8(buffer)
end

function _CG_JOIN_TABLE_REQ_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.nTableID)
end

function CG_JOIN_TABLE_REQ(buffer)
    local self = {}
    self.nTableID = 0                                -- 桌子id

    setmetatable(self, {__index = _CG_JOIN_TABLE_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_LEAVESEAT_BROAD_MT = {}
function _GC_LEAVESEAT_BROAD_MT:load(buffer) 
    self.tableID = BufferReadInt8(buffer)
end

function _GC_LEAVESEAT_BROAD_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.tableID)
end

function GC_LEAVESEAT_BROAD(buffer)
    local self = {}
    self.tableID = 0                                 -- 桌子ID

    setmetatable(self, {__index = _GC_LEAVESEAT_BROAD_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_TABLE_MAXNUM_REQ_MT = {}
function _CG_TABLE_MAXNUM_REQ_MT:load(buffer) 
    self.nMaxNums = BufferReadInt8(buffer)
end

function _CG_TABLE_MAXNUM_REQ_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.nMaxNums)
end

function CG_TABLE_MAXNUM_REQ(buffer)
    local self = {}
    self.nMaxNums = 0                                -- 桌子游戏的最大人数

    setmetatable(self, {__index = _CG_TABLE_MAXNUM_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

EnterTable_Result = {
    EnterTable_OK                                    = 0, -- 加入成功
    EnterTable_OB                                    = 1, -- 旁观加入
    EnterTable_Wait                                  = 2, -- 排队中
    EnterTable_BeOccupyeed                           = 3, -- 已经有人，且游戏未开始，不能旁观
    EnterTable_MoneyLimit                            = 4, -- 游戏豆不足
    EnterTable_WrongPasswd                           = 5, -- 错误的密码
    EnterTable_ForbidMinWin                          = 6, -- 不满足其它玩家的最小胜率要求
    EnterTable_ForbidMaxDisc                         = 7, -- 不满足其它玩家的最大断线率要求         
    EnterTable_ForbidMaxDelay                        = 8, -- 不满足其它玩家的最大延迟要求
    EnterTable_ForbidMinScore                        = 9, -- 不满足其它玩家的最小积分或者游戏豆要求
    EnterTable_ForbidIp                              = 10, -- 不满足其它的玩家的同ip限制要求
    EnterTable_GameFix                               = 11, -- 游戏维护，暂时不能进入（一般是在解散房间后3分钟内无法入座）
    EnterTable_Busy                                  = 12, -- 未知原因
    EnterTable_GainOver                              = 13, -- 输过上限， 当天不能继续游戏
    EnterTable_NoTrail                               = 14, -- 试玩玩家不能加入游戏豆类游戏
    EnterTable_Gaming                                = 15, -- 游戏正在进行，不能加入
    EnterTable_WatchNumLimit                         = 16, -- 旁观人数已到上限
    EnterTable_ScoreLimit                            = 17, -- 积分不足
    EnterTable_UnForbidBlock                         = 18, -- 不满足其它会员玩家的不和不受欢迎的用户玩要求不能加入          
    EnterTable_CanForbidBlock                        = 19, -- 不满足其它会员玩家的不和不受欢迎的用户玩要求可以加入
    EnterTable_VipUnForbidBlock                      = 20, -- 根据会员等级比较不满足其它会员玩家的不和不受欢迎的用户玩要求不能加入
    EnterTable_ReEnterTable                          = 21, -- 重复入桌
    EnterTalbe_ForbidSetCustomMinScore               = 22, -- 不满足其它玩家的设置底注游戏豆要求
    EnterTable_RoomExists                            = 23, -- 房间已经存在
    EnterTable_RoomDissolve                          = 24, -- 房间已经被解散
    EnterTable_Full                                  = 25, -- 座位已满
    EnterTable_Match                                 = 26, -- 比赛中
    EnterTable_MatchPlayer_Full                      = 27, -- 比赛人数已满
    EnterTable_Num                                   = 28, 
}

local _GC_ENTERTABLE_ACK_MT = {}
function _GC_ENTERTABLE_ACK_MT:load(buffer) 
    self.result = BufferReadUInt32(buffer)
    self.tableID = BufferReadInt8(buffer)
    self.chairID = BufferReadInt8(buffer)
end

function _GC_ENTERTABLE_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.result)
    BufferWriteInt8(buffer, self.tableID)
    BufferWriteInt8(buffer, self.chairID)
end

function GC_ENTERTABLE_ACK(buffer)
    local self = {}
    self.result = EnterTable_Result.EnterTable_OK
    self.tableID = 0
    self.chairID = 0

    setmetatable(self, {__index = _GC_ENTERTABLE_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_LEAVETABLE_MT = {}
function _GC_LEAVETABLE_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
end

function _GC_LEAVETABLE_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
end

function GC_LEAVETABLE(buffer)
    local self = {}
    self.userID = 0

    setmetatable(self, {__index = _GC_LEAVETABLE_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_HANDUP_MT = {}
function _GC_HANDUP_MT:load(buffer) 
    self.chair = BufferReadInt8(buffer)
end

function _GC_HANDUP_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.chair)
end

function GC_HANDUP(buffer)
    local self = {}
    self.chair = 0

    setmetatable(self, {__index = _GC_HANDUP_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_AGREELEAVE_REQ_MT = {}
function _CG_AGREELEAVE_REQ_MT:load(buffer) 
    self.strArgu = BufferReadString(buffer)
end

function _CG_AGREELEAVE_REQ_MT:dump(buffer) 
    BufferWriteString(buffer, self.strArgu)
end

function CG_AGREELEAVE_REQ(buffer)
    local self = {}
    self.strArgu = ""

    setmetatable(self, {__index = _CG_AGREELEAVE_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

AgreeLeave_Result = {
    AgreeLeave_OK                                    = 0, 
    AgreeLeave_Reject                                = 1, 
    AgreeLeave_Accept                                = 2, 
    AgreeLeave_Busy                                  = 3, 
}

local _GC_AGREELEAVE_ACK_MT = {}
function _GC_AGREELEAVE_ACK_MT:load(buffer) 
    self.cRet = BufferReadInt8(buffer)
    self.rejectID = BufferReadInt32(buffer)
end

function _GC_AGREELEAVE_ACK_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.cRet)
    BufferWriteInt32(buffer, self.rejectID)
end

function GC_AGREELEAVE_ACK(buffer)
    local self = {}
    self.cRet = 0
    self.rejectID = 0

    setmetatable(self, {__index = _GC_AGREELEAVE_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_AGREELEAVE_ASK_MT = {}
function _GC_AGREELEAVE_ASK_MT:load(buffer) 
    self.reqID = BufferReadInt32(buffer)
    self.strArgu = BufferReadString(buffer)
end

function _GC_AGREELEAVE_ASK_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.reqID)
    BufferWriteString(buffer, self.strArgu)
end

function GC_AGREELEAVE_ASK(buffer)
    local self = {}
    self.reqID = 0
    self.strArgu = ""

    setmetatable(self, {__index = _GC_AGREELEAVE_ASK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_AGREELEAVE_ASW_MT = {}
function _CG_AGREELEAVE_ASW_MT:load(buffer) 
    self.reqID = BufferReadInt32(buffer)
    self.cRet = BufferReadInt8(buffer)
end

function _CG_AGREELEAVE_ASW_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.reqID)
    BufferWriteInt8(buffer, self.cRet)
end

function CG_AGREELEAVE_ASW(buffer)
    local self = {}
    self.reqID = 0
    self.cRet = 0

    setmetatable(self, {__index = _CG_AGREELEAVE_ASW_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_STARTTIMER_MT = {}
function _GC_STARTTIMER_MT:load(buffer) 
    self.timerEvent = BufferReadInt32(buffer)
    self.timerSec = BufferReadInt32(buffer)
    self.chair = BufferReadInt8(buffer)
end

function _GC_STARTTIMER_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.timerEvent)
    BufferWriteInt32(buffer, self.timerSec)
    BufferWriteInt8(buffer, self.chair)
end

function GC_STARTTIMER(buffer)
    local self = {}
    self.timerEvent = 0
    self.timerSec = 0
    self.chair = 0

    setmetatable(self, {__index = _GC_STARTTIMER_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CHAT_MSG_MT = {}
function _CHAT_MSG_MT:load(buffer) 
    self.srcID = BufferReadInt32(buffer)
    self.desID = BufferReadInt32(buffer)
    self.strMsg = BufferReadString(buffer)
    self.textColor = BufferReadUInt32(buffer)
end

function _CHAT_MSG_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.srcID)
    BufferWriteInt32(buffer, self.desID)
    BufferWriteString(buffer, self.strMsg)
    BufferWriteUInt32(buffer, self.textColor)
end

function CHAT_MSG(buffer)
    local self = {}
    self.srcID = 0
    self.desID = 0
    self.strMsg = ""
    self.textColor = 0

    setmetatable(self, {__index = _CHAT_MSG_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

EChatFail_Reason = {
    EChatFail_Success                                = 0, -- 聊天成功，客户端不需要显示
    EChatFail_TimeLimit                              = 1, -- 聊天过快
    EChatFail_TextFilter                             = 2, -- 聊天内容有非法内容
    EChatFail_TextLengthOver                         = 3, -- 聊天内容超长
    EChatFail_HonorLess                              = 4, -- 声望不足
    EChatFail_ForbidChat                             = 5, -- 因违反用户条例，被禁言
    EChatFail_NoWatch                                = 6, -- 旁观不能聊天
    EChatFail_Num                                    = 7, 
}

local _CHAT_FAIL_MT = {}
function _CHAT_FAIL_MT:load(buffer) 
    self.failReason = BufferReadInt32(buffer)
end

function _CHAT_FAIL_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.failReason)
end

function CHAT_FAIL(buffer)
    local self = {}
    self.failReason = 0

    setmetatable(self, {__index = _CHAT_FAIL_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_KICKUSER_REQ_MT = {}
function _CG_KICKUSER_REQ_MT:load(buffer) 
    self.kickID = BufferReadInt32(buffer)
end

function _CG_KICKUSER_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.kickID)
end

function CG_KICKUSER_REQ(buffer)
    local self = {}
    self.kickID = 0

    setmetatable(self, {__index = _CG_KICKUSER_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

KickUser_Result = {
    KickUser_OK                                      = 0, 
    KickUser_LEVELLESS                               = 1, -- 只能踢等级比自己低的玩家
    KickUser_GAMING                                  = 2, -- 不能踢游戏中的玩家
    KickUser_NOGM                                    = 3, -- 不能踢GM
    KickUser_NOWATCH                                 = 4, -- 旁观不能踢人
    KickUser_TIMELIMIT                               = 5, -- 踢人次数到当日上限
    KickUser_Num                                     = 6, 
}

local _GC_KICKUSER_ACK_MT = {}
function _GC_KICKUSER_ACK_MT:load(buffer) 
    self.result = BufferReadUInt32(buffer)
    self.kickID = BufferReadInt32(buffer)
end

function _GC_KICKUSER_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.result)
    BufferWriteInt32(buffer, self.kickID)
end

function GC_KICKUSER_ACK(buffer)
    local self = {}
    self.result = KickUser_Result.KickUser_OK
    self.kickID = 0

    setmetatable(self, {__index = _GC_KICKUSER_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GM_KICKUSER_REQ_MT = {}
function _GM_KICKUSER_REQ_MT:load(buffer) 
    self.kickID = BufferReadInt32(buffer)
    self.maxTimes = BufferReadInt32(buffer)
end

function _GM_KICKUSER_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.kickID)
    BufferWriteInt32(buffer, self.maxTimes)
end

function GM_KICKUSER_REQ(buffer)
    local self = {}
    self.kickID = 0
    self.maxTimes = 0

    setmetatable(self, {__index = _GM_KICKUSER_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_KICKUSER_NOT_MT = {}
function _GC_KICKUSER_NOT_MT:load(buffer) 
    self.kickID = BufferReadInt32(buffer)
    self.userName = BufferReadString(buffer)
end

function _GC_KICKUSER_NOT_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.kickID)
    BufferWriteString(buffer, self.userName)
end

function GC_KICKUSER_NOT(buffer)
    local self = {}
    self.kickID = 0
    self.userName = ""

    setmetatable(self, {__index = _GC_KICKUSER_NOT_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

Sys_KickUser_Reason = {
    SysKickUser_MoneyLimit                           = 0, 
    SysKickUser_NoReady                              = 1, 
    SysKickUser_GainLimit                            = 2, 
    SysKickUser_MatchScore                           = 3, -- 比赛场时，如果比赛积分不够，则提出玩家
}

local _GC_SYS_KICKUSER_NOT_MT = {}
function _GC_SYS_KICKUSER_NOT_MT:load(buffer) 
    self.reason = BufferReadInt8(buffer)
end

function _GC_SYS_KICKUSER_NOT_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.reason)
end

function GC_SYS_KICKUSER_NOT(buffer)
    local self = {}
    self.reason = 0

    setmetatable(self, {__index = _GC_SYS_KICKUSER_NOT_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_INVITE_REQ_MT = {}
function _CG_INVITE_REQ_MT:load(buffer) 
    self.inviteID = BufferReadInt32(buffer)
end

function _CG_INVITE_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.inviteID)
end

function CG_INVITE_REQ(buffer)
    local self = {}
    self.inviteID = 0

    setmetatable(self, {__index = _CG_INVITE_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GD_UP_GAMEINFO_MT = {}
function _GD_UP_GAMEINFO_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.gameID = BufferReadInt16(buffer)
    self.gameType = BufferReadInt8(buffer)
    self.score = BufferReadInt32(buffer)
    self.tax = BufferReadInt32(buffer)
    self.disc = BufferReadInt8(buffer)
    self.initScore = BufferReadInt32(buffer)
    self.changeCurrency = BufferReadInt32(buffer)
end

function _GD_UP_GAMEINFO_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteInt16(buffer, self.gameID)
    BufferWriteInt8(buffer, self.gameType)
    BufferWriteInt32(buffer, self.score)
    BufferWriteInt32(buffer, self.tax)
    BufferWriteInt8(buffer, self.disc)
    BufferWriteInt32(buffer, self.initScore)
    BufferWriteInt32(buffer, self.changeCurrency)
end

function GD_UP_GAMEINFO(buffer)
    local self = {}
    self.userID = 0
    self.gameID = 0
    self.gameType = 0
    self.score = 0
    self.tax = 0
    self.disc = 0
    self.initScore = 0
    self.changeCurrency = 0

    setmetatable(self, {__index = _GD_UP_GAMEINFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_TEST_NETDELAY_MT = {}
function _CG_TEST_NETDELAY_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
end

function _CG_TEST_NETDELAY_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
end

function CG_TEST_NETDELAY(buffer)
    local self = {}
    self.userID = 0

    setmetatable(self, {__index = _CG_TEST_NETDELAY_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_USE_ITEM_MT = {}
function _CG_USE_ITEM_MT:load(buffer) 
    self.itemType = BufferReadInt32(buffer)
    self.itemID = BufferReadInt32(buffer)
end

function _CG_USE_ITEM_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.itemType)
    BufferWriteInt32(buffer, self.itemID)
end

function CG_USE_ITEM(buffer)
    local self = {}
    self.itemType = 0
    self.itemID = 0

    setmetatable(self, {__index = _CG_USE_ITEM_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

UseItem_Result = {
    UseItem_Ok                                       = 0, -- 使用道具成功
    UseItem_LessGold                                 = 1, -- 风雷币不足
}

local _GC_USE_ITEM_MT = {}
function _GC_USE_ITEM_MT:load(buffer) 
    self.ret = BufferReadInt8(buffer)
    self.item:load(buffer)
    self.gold = BufferReadFloat(buffer)
end

function _GC_USE_ITEM_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.ret)
    self.item:dump(buffer)
    BufferWriteFloat(buffer, self.gold)
end

function GC_USE_ITEM(buffer)
    local self = {}
    self.ret = 0
    self.item = CG_USE_ITEM()                        -- CG_USE_ITEM
    self.gold = 0

    setmetatable(self, {__index = _GC_USE_ITEM_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GD_CLEAR_SCORE_MT = {}
function _GD_CLEAR_SCORE_MT:load(buffer) 
    self.gameID = BufferReadInt16(buffer)
    self.roomID = BufferReadInt8(buffer)
    self.userID = BufferReadInt32(buffer)
    self.pay = BufferReadFloat(buffer)
end

function _GD_CLEAR_SCORE_MT:dump(buffer) 
    BufferWriteInt16(buffer, self.gameID)
    BufferWriteInt8(buffer, self.roomID)
    BufferWriteInt32(buffer, self.userID)
    BufferWriteFloat(buffer, self.pay)
end

function GD_CLEAR_SCORE(buffer)
    local self = {}
    self.gameID = 0
    self.roomID = 0
    self.userID = 0
    self.pay = 0

    setmetatable(self, {__index = _GD_CLEAR_SCORE_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _DG_CLEAR_SCORE_MT = {}
function _DG_CLEAR_SCORE_MT:load(buffer) 
    self.ret = BufferReadInt8(buffer)
    self.gameID = BufferReadInt16(buffer)
    self.roomID = BufferReadInt8(buffer)
    self.userID = BufferReadInt32(buffer)
    self.gold = BufferReadFloat(buffer)
end

function _DG_CLEAR_SCORE_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.ret)
    BufferWriteInt16(buffer, self.gameID)
    BufferWriteInt8(buffer, self.roomID)
    BufferWriteInt32(buffer, self.userID)
    BufferWriteFloat(buffer, self.gold)
end

function DG_CLEAR_SCORE(buffer)
    local self = {}
    self.ret = 0
    self.gameID = 0
    self.roomID = 0
    self.userID = 0
    self.gold = 0

    setmetatable(self, {__index = _DG_CLEAR_SCORE_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _FC_FRILIST_ACK_MT = {}
function _FC_FRILIST_ACK_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = stFriNote()                           -- stFriNote
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.friList = i2
end

function _FC_FRILIST_ACK_MT:dump(buffer) 
    local i2 = self.friList
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function FC_FRILIST_ACK(buffer)
    local self = {}
    self.friList = {}                                -- vector<stFriNote>

    setmetatable(self, {__index = _FC_FRILIST_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _FriAddReq_MT = {}
function _FriAddReq_MT:load(buffer) 
    self.srcID = BufferReadInt32(buffer)
    self.desID = BufferReadInt32(buffer)
    self.srcIcon = BufferReadInt16(buffer)
    self.srcName = BufferReadString(buffer)
    self.lSendTime = BufferReadInt32(buffer)
    self.friGroup = BufferReadUInt32(buffer)
end

function _FriAddReq_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.srcID)
    BufferWriteInt32(buffer, self.desID)
    BufferWriteInt16(buffer, self.srcIcon)
    BufferWriteString(buffer, self.srcName)
    BufferWriteInt32(buffer, self.lSendTime)
    BufferWriteUInt32(buffer, self.friGroup)
end

function FriAddReq(buffer)
    local self = {}
    self.srcID = 0                                   -- 请求玩家id
    self.desID = 0                                   -- 被请求玩家id
    self.srcIcon = 0                                 -- 请求玩家头像
    self.srcName = ""                                -- 请求玩家昵称
    self.lSendTime = 0                               -- 请求时间
    self.friGroup = Fri_Group.FG_FRIEND              -- 请求组

    setmetatable(self, {__index = _FriAddReq_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _FriAddErr_MT = {}
function _FriAddErr_MT:load(buffer) 
    self.eRet = BufferReadUInt32(buffer)
end

function _FriAddErr_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.eRet)
end

function FriAddErr(buffer)
    local self = {}
    self.eRet = FriAddReq_Err.FDR_NONE               -- 错误回复

    setmetatable(self, {__index = _FriAddErr_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _OFF_LINE_FRIADDREQ_MT = {}
function _OFF_LINE_FRIADDREQ_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = FriAddReq()                           -- FriAddReq
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vData = i2
end

function _OFF_LINE_FRIADDREQ_MT:dump(buffer) 
    local i2 = self.vData
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function OFF_LINE_FRIADDREQ(buffer)
    local self = {}
    self.vData = {}                                  -- vector<FriAddReq>

    setmetatable(self, {__index = _OFF_LINE_FRIADDREQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CF_FRIADD_ASW_MT = {}
function _CF_FRIADD_ASW_MT:load(buffer) 
    self.srcID = BufferReadInt32(buffer)
end

function _CF_FRIADD_ASW_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.srcID)
end

function CF_FRIADD_ASW(buffer)
    local self = {}
    self.srcID = 0                                   -- 加为好友的id

    setmetatable(self, {__index = _CF_FRIADD_ASW_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _FC_FRIADD_ASW_MT = {}
function _FC_FRIADD_ASW_MT:load(buffer) 
    self.eRet = BufferReadUInt32(buffer)
    self.newFri:load(buffer)
end

function _FC_FRIADD_ASW_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.eRet)
    self.newFri:dump(buffer)
end

function FC_FRIADD_ASW(buffer)
    local self = {}
    self.eRet = FriOpResult.FO_SUCCESS               -- 添加结果			
    self.newFri = stFriNote()                        -- stFriNote

    setmetatable(self, {__index = _FC_FRIADD_ASW_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CF_FRIDEL_REQ_MT = {}
function _CF_FRIDEL_REQ_MT:load(buffer) 
    self.srcID = BufferReadInt32(buffer)
end

function _CF_FRIDEL_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.srcID)
end

function CF_FRIDEL_REQ(buffer)
    local self = {}
    self.srcID = 0                                   -- 将要删除的好友id

    setmetatable(self, {__index = _CF_FRIDEL_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _FC_FRIDEL_ACK_MT = {}
function _FC_FRIDEL_ACK_MT:load(buffer) 
    self.eRet = BufferReadUInt32(buffer)
    self.nFriID = BufferReadInt32(buffer)
end

function _FC_FRIDEL_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.eRet)
    BufferWriteInt32(buffer, self.nFriID)
end

function FC_FRIDEL_ACK(buffer)
    local self = {}
    self.eRet = FriDel_Result.FDRS_SUCCESS
    self.nFriID = 0                                  -- 删除的好友id

    setmetatable(self, {__index = _FC_FRIDEL_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _FC_FRISTATE_UP_MT = {}
function _FC_FRISTATE_UP_MT:load(buffer) 
    self.friID = BufferReadInt32(buffer)
    self.cState = BufferReadInt8(buffer)
end

function _FC_FRISTATE_UP_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.friID)
    BufferWriteInt8(buffer, self.cState)
end

function FC_FRISTATE_UP(buffer)
    local self = {}
    self.friID = 0
    self.cState = 0

    setmetatable(self, {__index = _FC_FRISTATE_UP_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _PRI_CHAT_MSG_MT = {}
function _PRI_CHAT_MSG_MT:load(buffer) 
    self.srcID = BufferReadInt32(buffer)
    self.desID = BufferReadInt32(buffer)
    self.srcIcon = BufferReadInt16(buffer)
    self.srcName = BufferReadString(buffer)
    self.strMsg = BufferReadString(buffer)
    self.lSendTime = BufferReadInt32(buffer)
    self.bMember = BufferReadBool(buffer)
end

function _PRI_CHAT_MSG_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.srcID)
    BufferWriteInt32(buffer, self.desID)
    BufferWriteInt16(buffer, self.srcIcon)
    BufferWriteString(buffer, self.srcName)
    BufferWriteString(buffer, self.strMsg)
    BufferWriteInt32(buffer, self.lSendTime)
    BufferWriteBool(buffer, self.bMember)
end

function PRI_CHAT_MSG(buffer)
    local self = {}
    self.srcID = 0                                   -- 发送人id
    self.desID = 0                                   -- 接收人id
    self.srcIcon = 0                                 -- 发送人头像
    self.srcName = ""                                -- 发送人昵称
    self.strMsg = ""                                 -- 消息
    self.lSendTime = 0                               -- 发送时间
    self.bMember = false                             -- 发送人是否为会员

    setmetatable(self, {__index = _PRI_CHAT_MSG_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _PRI_CHAT_MSG_ACK_MT = {}
function _PRI_CHAT_MSG_ACK_MT:load(buffer) 
    self.eRet = BufferReadUInt32(buffer)
end

function _PRI_CHAT_MSG_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.eRet)
end

function PRI_CHAT_MSG_ACK(buffer)
    local self = {}
    self.eRet = Fri_SendMsg_Err.FSE_NONE             -- 错误回复

    setmetatable(self, {__index = _PRI_CHAT_MSG_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _OFF_LINE_MSG_DATA_MT = {}
function _OFF_LINE_MSG_DATA_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = PRI_CHAT_MSG()                        -- PRI_CHAT_MSG
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vData = i2
end

function _OFF_LINE_MSG_DATA_MT:dump(buffer) 
    local i2 = self.vData
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function OFF_LINE_MSG_DATA(buffer)
    local self = {}
    self.vData = {}                                  -- vector<PRI_CHAT_MSG>

    setmetatable(self, {__index = _OFF_LINE_MSG_DATA_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_COFFER_RENEWALS_REQ_MT = {}
function _CS_COFFER_RENEWALS_REQ_MT:load(buffer) 
    self.cMonth = BufferReadInt8(buffer)
    self.cPayType = BufferReadInt8(buffer)
    self.strSecondPasswd = BufferReadString(buffer)
end

function _CS_COFFER_RENEWALS_REQ_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.cMonth)
    BufferWriteInt8(buffer, self.cPayType)
    BufferWriteString(buffer, self.strSecondPasswd)
end

function CS_COFFER_RENEWALS_REQ(buffer)
    local self = {}
    self.cMonth = 0
    self.cPayType = 0                                -- 0是游戏豆支付，1是风雷币支付
    self.strSecondPasswd = ""

    setmetatable(self, {__index = _CS_COFFER_RENEWALS_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

CofferRenewals_Result = {
    CofferRenewals_OK                                = 0, 
    CofferRenewals_WrongMonth                        = 1, 
    CofferRenewals_WrongPayType                      = 2, 
    CofferRenewals_WrongPasswd                       = 3, 
    CofferRenewals_LessMoney                         = 4, 
    CofferRenewals_LessGold                          = 5, 
    CofferRenewals_MoneyLock                         = 6, 
    CofferRenewals_Busy                              = 7, 
}

local _SC_COFFER_RENEWALS_ACK_MT = {}
function _SC_COFFER_RENEWALS_ACK_MT:load(buffer) 
    self.cRet = BufferReadInt8(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
    self.goldCurrency = BufferReadFloat(buffer)
    self.cofferEnd = BufferReadInt32(buffer)
    self.cMonth = BufferReadInt8(buffer)
    self.cPayType = BufferReadInt8(buffer)
    self.awardCurrency = BufferReadInt32(buffer)
end

function _SC_COFFER_RENEWALS_ACK_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.cRet)
    BufferWriteInt64(buffer, self.gameCurrency)
    BufferWriteFloat(buffer, self.goldCurrency)
    BufferWriteInt32(buffer, self.cofferEnd)
    BufferWriteInt8(buffer, self.cMonth)
    BufferWriteInt8(buffer, self.cPayType)
    BufferWriteInt32(buffer, self.awardCurrency)
end

function SC_COFFER_RENEWALS_ACK(buffer)
    local self = {}
    self.cRet = 0
    self.gameCurrency = 0
    self.goldCurrency = 0
    self.cofferEnd = 0
    self.cMonth = 0
    self.cPayType = 0                                -- 0是游戏豆支付，1是风雷币支付
    self.awardCurrency = 0                           -- 奖励游戏豆

    setmetatable(self, {__index = _SC_COFFER_RENEWALS_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_COFFER_OP_REQ_MT = {}
function _CS_COFFER_OP_REQ_MT:load(buffer) 
    self.opType = BufferReadInt8(buffer)
    self.money = BufferReadInt64(buffer)
    self.strSecondPasswd = BufferReadString(buffer)
end

function _CS_COFFER_OP_REQ_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.opType)
    BufferWriteInt64(buffer, self.money)
    BufferWriteString(buffer, self.strSecondPasswd)
end

function CS_COFFER_OP_REQ(buffer)
    local self = {}
    self.opType = 0                                  -- 0是存，1是取, 2是过期取出
    self.money = 0
    self.strSecondPasswd = ""

    setmetatable(self, {__index = _CS_COFFER_OP_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

CofferOp_Result = {
    CofferOp_OK                                      = 0, 
    CofferOp_WrongPasswd                             = 1, -- 二级密码错误
    CofferOp_LessMoney                               = 2, -- 游戏豆不足
    CofferOp_LessCoffer                              = 3, -- 保险箱游戏豆不足           
    CofferOp_MoneyLock                               = 4, -- 正在游戏中
    CofferOp_NoCoffer                                = 5, -- 没开通保险箱或者保险箱过去
    CofferOp_Busy                                    = 6, -- 未知错误
    CofferOp_Num                                     = 7, 
}

local _SC_COFFER_OP_ACK_MT = {}
function _SC_COFFER_OP_ACK_MT:load(buffer) 
    self.cRet = BufferReadInt8(buffer)
    self.opType = BufferReadInt8(buffer)
    self.money = BufferReadInt64(buffer)
    self.coffer = BufferReadInt64(buffer)
    self.change = BufferReadInt32(buffer)
end

function _SC_COFFER_OP_ACK_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.cRet)
    BufferWriteInt8(buffer, self.opType)
    BufferWriteInt64(buffer, self.money)
    BufferWriteInt64(buffer, self.coffer)
    BufferWriteInt32(buffer, self.change)
end

function SC_COFFER_OP_ACK(buffer)
    local self = {}
    self.cRet = 0
    self.opType = 0                                  -- 0是存，1是取, 2是过期取出
    self.money = 0
    self.coffer = 0
    self.change = 0

    setmetatable(self, {__index = _SC_COFFER_OP_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_MONEYTANSF_REQ_MT = {}
function _CS_MONEYTANSF_REQ_MT:load(buffer) 
    self.exChangeIndex = BufferReadInt32(buffer)
    self.exChangeDiamond = BufferReadFloat(buffer)
    self.exChangeGameCurrency = BufferReadInt64(buffer)
end

function _CS_MONEYTANSF_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.exChangeIndex)
    BufferWriteFloat(buffer, self.exChangeDiamond)
    BufferWriteInt64(buffer, self.exChangeGameCurrency)
end

function CS_MONEYTANSF_REQ(buffer)
    local self = {}
    self.exChangeIndex = 0                           -- 兑换索引
    self.exChangeDiamond = 0                         -- 兑换钻石
    self.exChangeGameCurrency = 0                    -- 兑换游戏豆

    setmetatable(self, {__index = _CS_MONEYTANSF_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

MoneyTansf_Result = {
    MoneyTansf_OK                                    = 0, 
    MoneyTansf_LessGold                              = 1, 
    MoneyTansf_MoneyLock                             = 2, 
    MoneyTansf_IndexError                            = 3, 
    MoneyTansf_Busy                                  = 4, 
}

local _SC_MONEYTANSF_ACK_MT = {}
function _SC_MONEYTANSF_ACK_MT:load(buffer) 
    self.cRet = BufferReadInt8(buffer)
    self.tranfDiamond = BufferReadFloat(buffer)
    self.tranfGameCurrency = BufferReadInt64(buffer)
    self.money = BufferReadInt64(buffer)
    self.gold = BufferReadFloat(buffer)
end

function _SC_MONEYTANSF_ACK_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.cRet)
    BufferWriteFloat(buffer, self.tranfDiamond)
    BufferWriteInt64(buffer, self.tranfGameCurrency)
    BufferWriteInt64(buffer, self.money)
    BufferWriteFloat(buffer, self.gold)
end

function SC_MONEYTANSF_ACK(buffer)
    local self = {}
    self.cRet = 0
    self.tranfDiamond = 0
    self.tranfGameCurrency = 0
    self.money = 0
    self.gold = 0

    setmetatable(self, {__index = _SC_MONEYTANSF_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GM_DISSOLVE_TABLE_MT = {}
function _GM_DISSOLVE_TABLE_MT:load(buffer) 
    self.tableID = BufferReadInt8(buffer)
end

function _GM_DISSOLVE_TABLE_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.tableID)
end

function GM_DISSOLVE_TABLE(buffer)
    local self = {}
    self.tableID = 0                                 -- -1为结算房间内所有桌子

    setmetatable(self, {__index = _GM_DISSOLVE_TABLE_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GM_DISSOLVE_TABLE_CLIENT_MT = {}
function _GM_DISSOLVE_TABLE_CLIENT_MT:load(buffer) 
    self.strGmName = BufferReadString(buffer)
end

function _GM_DISSOLVE_TABLE_CLIENT_MT:dump(buffer) 
    BufferWriteString(buffer, self.strGmName)
end

function GM_DISSOLVE_TABLE_CLIENT(buffer)
    local self = {}
    self.strGmName = ""

    setmetatable(self, {__index = _GM_DISSOLVE_TABLE_CLIENT_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

Gm_Msg_Type = {
    Gm_Msg_User                                      = 0, 
    Gm_Bulletin_All                                  = 1, 
    Gm_Bulletin_Game                                 = 2, 
    Gm_Bulletin_Room                                 = 3, 
    Gm_Msg_Room                                      = 4, 
    Gm_Filter_Words                                  = 5, 
    Gm_Msg_Num                                       = 6, 
}

local _GM_BULLETIN_MT = {}
function _GM_BULLETIN_MT:load(buffer) 
    self.type = BufferReadInt8(buffer)
    self.gameID = BufferReadInt16(buffer)
    self.svrID = BufferReadInt32(buffer)
    self.roomID = BufferReadInt8(buffer)
    self.strMsg = BufferReadString(buffer)
end

function _GM_BULLETIN_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.type)
    BufferWriteInt16(buffer, self.gameID)
    BufferWriteInt32(buffer, self.svrID)
    BufferWriteInt8(buffer, self.roomID)
    BufferWriteString(buffer, self.strMsg)
end

function GM_BULLETIN(buffer)
    local self = {}
    self.type = 0
    self.gameID = 0
    self.svrID = 0
    self.roomID = 0
    self.strMsg = ""

    setmetatable(self, {__index = _GM_BULLETIN_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GM_FORBIDCHAT_MT = {}
function _GM_FORBIDCHAT_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.endTime = BufferReadInt32(buffer)
end

function _GM_FORBIDCHAT_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteInt32(buffer, self.endTime)
end

function GM_FORBIDCHAT(buffer)
    local self = {}
    self.userID = 0
    self.endTime = 0

    setmetatable(self, {__index = _GM_FORBIDCHAT_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GM_FORBIDCHAT_CLIENT_MT = {}
function _GM_FORBIDCHAT_CLIENT_MT:load(buffer) 
    self.endTime = BufferReadInt32(buffer)
end

function _GM_FORBIDCHAT_CLIENT_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.endTime)
end

function GM_FORBIDCHAT_CLIENT(buffer)
    local self = {}
    self.endTime = 0

    setmetatable(self, {__index = _GM_FORBIDCHAT_CLIENT_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GM_KICKUSER_MT = {}
function _GM_KICKUSER_MT:load(buffer) 
    self.kickID = BufferReadInt32(buffer)
    self.endTime = BufferReadInt32(buffer)
    self.strMac = BufferReadString(buffer)
end

function _GM_KICKUSER_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.kickID)
    BufferWriteInt32(buffer, self.endTime)
    BufferWriteString(buffer, self.strMac)
end

function GM_KICKUSER(buffer)
    local self = {}
    self.kickID = 0
    self.endTime = 0
    self.strMac = ""

    setmetatable(self, {__index = _GM_KICKUSER_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GM_KICKUSER_CLINET_MT = {}
function _GM_KICKUSER_CLINET_MT:load(buffer) 
    self.endTime = BufferReadInt32(buffer)
end

function _GM_KICKUSER_CLINET_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.endTime)
end

function GM_KICKUSER_CLINET(buffer)
    local self = {}
    self.endTime = 0

    setmetatable(self, {__index = _GM_KICKUSER_CLINET_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GM_FILTER_MT = {}
function _GM_FILTER_MT:load(buffer) 
    self.filterType = BufferReadInt32(buffer)
    self.strFilter = BufferReadString(buffer)
end

function _GM_FILTER_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.filterType)
    BufferWriteString(buffer, self.strFilter)
end

function GM_FILTER(buffer)
    local self = {}
    self.filterType = 0                              -- 屏蔽字类型，0为聊天，1为昵称和用户名注册
    self.strFilter = ""

    setmetatable(self, {__index = _GM_FILTER_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GM_FILTER_CLIENT_MT = {}
function _GM_FILTER_CLIENT_MT:load(buffer) 
    self.ret = BufferReadInt32(buffer)
    self.filterType = BufferReadInt32(buffer)
    self.strFilter = BufferReadString(buffer)
end

function _GM_FILTER_CLIENT_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.ret)
    BufferWriteInt32(buffer, self.filterType)
    BufferWriteString(buffer, self.strFilter)
end

function GM_FILTER_CLIENT(buffer)
    local self = {}
    self.ret = 0                                     -- 添加结果，0为成功，非零为失败
    self.filterType = 0                              -- 屏蔽字类型，0为聊天，1为昵称和用户名注册
    self.strFilter = ""

    setmetatable(self, {__index = _GM_FILTER_CLIENT_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_CHANGE_PASSWD_MT = {}
function _CS_CHANGE_PASSWD_MT:load(buffer) 
    self.old = BufferReadString(buffer)
    self.newPass = BufferReadString(buffer)
end

function _CS_CHANGE_PASSWD_MT:dump(buffer) 
    BufferWriteString(buffer, self.old)
    BufferWriteString(buffer, self.newPass)
end

function CS_CHANGE_PASSWD(buffer)
    local self = {}
    self.old = ""
    self.newPass = ""

    setmetatable(self, {__index = _CS_CHANGE_PASSWD_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_CHANGE_PASSWD_MT = {}
function _SC_CHANGE_PASSWD_MT:load(buffer) 
    self.ret = BufferReadInt8(buffer)
end

function _SC_CHANGE_PASSWD_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.ret)
end

function SC_CHANGE_PASSWD(buffer)
    local self = {}
    self.ret = 0                                     -- 0为成功， 1为原密码不正确

    setmetatable(self, {__index = _SC_CHANGE_PASSWD_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_BINDMAC_MT = {}
function _CS_BINDMAC_MT:load(buffer) 
    self.strMac = BufferReadString(buffer)
end

function _CS_BINDMAC_MT:dump(buffer) 
    BufferWriteString(buffer, self.strMac)
end

function CS_BINDMAC(buffer)
    local self = {}
    self.strMac = ""

    setmetatable(self, {__index = _CS_BINDMAC_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_CHANGE_NICKNAME_MT = {}
function _CS_CHANGE_NICKNAME_MT:load(buffer) 
    self.gender = BufferReadInt8(buffer)
    self.nickName = BufferReadString(buffer)
    self.icon = BufferReadInt16(buffer)
end

function _CS_CHANGE_NICKNAME_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.gender)
    BufferWriteString(buffer, self.nickName)
    BufferWriteInt16(buffer, self.icon)
end

function CS_CHANGE_NICKNAME(buffer)
    local self = {}
    self.gender = 0
    self.nickName = ""
    self.icon = 0

    setmetatable(self, {__index = _CS_CHANGE_NICKNAME_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

eChangeNickName_Result = {
    eChangeNickName_Ok                               = 0, -- 修改昵称成功
    eChangeNickName_Exists                           = 1, -- 昵称已经存在
    eChangeNickName_Forbid                           = 2, -- 名字非法
    eChangeNickName_Num                              = 3, 
}

local _SC_CHANGE_NICKNAME_MT = {}
function _SC_CHANGE_NICKNAME_MT:load(buffer) 
    self.ret = BufferReadInt8(buffer)
    self.gender = BufferReadInt8(buffer)
    self.nickName = BufferReadString(buffer)
    self.icon = BufferReadInt16(buffer)
end

function _SC_CHANGE_NICKNAME_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.ret)
    BufferWriteInt8(buffer, self.gender)
    BufferWriteString(buffer, self.nickName)
    BufferWriteInt16(buffer, self.icon)
end

function SC_CHANGE_NICKNAME(buffer)
    local self = {}
    self.ret = 0
    self.gender = 0
    self.nickName = ""
    self.icon = 0

    setmetatable(self, {__index = _SC_CHANGE_NICKNAME_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CHANGE_NICKNAME_BRO_MT = {}
function _CHANGE_NICKNAME_BRO_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.gender = BufferReadInt8(buffer)
    self.nickName = BufferReadString(buffer)
    self.icon = BufferReadInt16(buffer)
end

function _CHANGE_NICKNAME_BRO_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt8(buffer, self.gender)
    BufferWriteString(buffer, self.nickName)
    BufferWriteInt16(buffer, self.icon)
end

function CHANGE_NICKNAME_BRO(buffer)
    local self = {}
    self.userId = 0
    self.gender = 0
    self.nickName = ""
    self.icon = 0

    setmetatable(self, {__index = _CHANGE_NICKNAME_BRO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_UNBINDMAC_MT = {}
function _CS_UNBINDMAC_MT:load(buffer) 
    self.sePwd = BufferReadString(buffer)
end

function _CS_UNBINDMAC_MT:dump(buffer) 
    BufferWriteString(buffer, self.sePwd)
end

function CS_UNBINDMAC(buffer)
    local self = {}
    self.sePwd = ""

    setmetatable(self, {__index = _CS_UNBINDMAC_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_UNBINDMAC_MT = {}
function _SC_UNBINDMAC_MT:load(buffer) 
    self.ret = BufferReadInt32(buffer)
end

function _SC_UNBINDMAC_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.ret)
end

function SC_UNBINDMAC(buffer)
    local self = {}
    self.ret = 0

    setmetatable(self, {__index = _SC_UNBINDMAC_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CL_UNBINDMAC_MT = {}
function _CL_UNBINDMAC_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.connIndex = BufferReadUInt32(buffer)
    self.strAccount = BufferReadString(buffer)
    self.strPass = BufferReadString(buffer)
    self.strSePass = BufferReadString(buffer)
    self.strValid = BufferReadString(buffer)
end

function _CL_UNBINDMAC_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteUInt32(buffer, self.connIndex)
    BufferWriteString(buffer, self.strAccount)
    BufferWriteString(buffer, self.strPass)
    BufferWriteString(buffer, self.strSePass)
    BufferWriteString(buffer, self.strValid)
end

function CL_UNBINDMAC(buffer)
    local self = {}
    self.userID = 0                                  -- 服务器填充
    self.connIndex = 0                               -- 服务器填充
    self.strAccount = ""                             -- 帐号
    self.strPass = ""                                -- 密码
    self.strSePass = ""                              -- 二级密码
    self.strValid = ""                               -- 验证码

    setmetatable(self, {__index = _CL_UNBINDMAC_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

eUnBind_Result = {
    eUnBind_Ok                                       = 0, 
    eUnBind_WrongPass                                = 1, -- 用户名或者密码错误
    eUnBind_WrongSePass                              = 2, -- 二级密码错误
    eUnBind_WrondValid                               = 3, -- 验证码错误
    eUnBind_Num                                      = 4, 
}

local _LC_UNBINDMAC_MT = {}
function _LC_UNBINDMAC_MT:load(buffer) 
    self.ret = BufferReadInt32(buffer)
    self.index = BufferReadInt32(buffer)
end

function _LC_UNBINDMAC_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.ret)
    BufferWriteInt32(buffer, self.index)
end

function LC_UNBINDMAC(buffer)
    local self = {}
    self.ret = 0
    self.index = 0

    setmetatable(self, {__index = _LC_UNBINDMAC_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stPhoneBindInfo_MT = {}
function _stPhoneBindInfo_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.strPhone = BufferReadString(buffer)
    self.status = BufferReadInt32(buffer)
end

function _stPhoneBindInfo_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteString(buffer, self.strPhone)
    BufferWriteInt32(buffer, self.status)
end

function stPhoneBindInfo(buffer)
    local self = {}
    self.userID = 0
    self.strPhone = ""
    self.status = 0                                  -- 0为未绑定， 1为已经绑定，2为已经绑定并且开通登录

    setmetatable(self, {__index = _stPhoneBindInfo_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_PHONE_VALID_MT = {}
function _CS_PHONE_VALID_MT:load(buffer) 
    self.strPhone = BufferReadString(buffer)
end

function _CS_PHONE_VALID_MT:dump(buffer) 
    BufferWriteString(buffer, self.strPhone)
end

function CS_PHONE_VALID(buffer)
    local self = {}
    self.strPhone = ""                               -- 手机号, 绑定和解除绑定通用，  解除绑定不需要填写手机号，可以为空

    setmetatable(self, {__index = _CS_PHONE_VALID_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

ePhoneValid_Result = {
    ePhoneValid_Ok                                   = 0, -- 成功
    ePhoneValid_WrongPhone                           = 1, -- 错误的手机号
    ePhoneValid_Num                                  = 2, 
}

local _SC_PHONE_VALID_MT = {}
function _SC_PHONE_VALID_MT:load(buffer) 
    self.ret = BufferReadInt32(buffer)
end

function _SC_PHONE_VALID_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.ret)
end

function SC_PHONE_VALID(buffer)
    local self = {}
    self.ret = 0                                     -- 0未成功，1为手机号错误 

    setmetatable(self, {__index = _SC_PHONE_VALID_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_PHONE_BIND_MT = {}
function _CS_PHONE_BIND_MT:load(buffer) 
    self.strPhone = BufferReadString(buffer)
    self.strValid = BufferReadString(buffer)
end

function _CS_PHONE_BIND_MT:dump(buffer) 
    BufferWriteString(buffer, self.strPhone)
    BufferWriteString(buffer, self.strValid)
end

function CS_PHONE_BIND(buffer)
    local self = {}
    self.strPhone = ""                               -- 手机号
    self.strValid = ""                               -- 短信验证码

    setmetatable(self, {__index = _CS_PHONE_BIND_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

ePhoneBind_Result = {
    ePhoneBind_Ok                                    = 0, 
    ePhoneBind_WrongValid                            = 1, 
    ePhoneBind_Num                                   = 2, 
}

local _SC_PHONE_BIND_MT = {}
function _SC_PHONE_BIND_MT:load(buffer) 
    self.ret = BufferReadInt32(buffer)
end

function _SC_PHONE_BIND_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.ret)
end

function SC_PHONE_BIND(buffer)
    local self = {}
    self.ret = 0

    setmetatable(self, {__index = _SC_PHONE_BIND_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_PHONE_UNBIND_MT = {}
function _CS_PHONE_UNBIND_MT:load(buffer) 
    self.strValid = BufferReadString(buffer)
end

function _CS_PHONE_UNBIND_MT:dump(buffer) 
    BufferWriteString(buffer, self.strValid)
end

function CS_PHONE_UNBIND(buffer)
    local self = {}
    self.strValid = ""                               -- 短信验证码

    setmetatable(self, {__index = _CS_PHONE_UNBIND_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

ePhoneUnBind_Result = {
    ePhoneUnBind_Ok                                  = 0, 
    ePhoneUnBind_WrongValid                          = 1, 
    ePhoneUnBind_Num                                 = 2, 
}

local _SC_PHONE_UNBIND_MT = {}
function _SC_PHONE_UNBIND_MT:load(buffer) 
    self.ret = BufferReadInt32(buffer)
end

function _SC_PHONE_UNBIND_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.ret)
end

function SC_PHONE_UNBIND(buffer)
    local self = {}
    self.ret = 0

    setmetatable(self, {__index = _SC_PHONE_UNBIND_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _WebHead_MT = {}
function _WebHead_MT:load(buffer) 
    self.sessionId = BufferReadString(buffer)
end

function _WebHead_MT:dump(buffer) 
    BufferWriteString(buffer, self.sessionId)
end

function WebHead(buffer)
    local self = {}
    self.sessionId = ""                              -- 用户唯一标示

    setmetatable(self, {__index = _WebHead_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_RECHARGE_RECORD_ACK_MT = {}
function _LC_RECHARGE_RECORD_ACK_MT:load(buffer) 
    self.webHead:load(buffer)
    self.nResult = BufferReadInt32(buffer)
    self.orderNumber = BufferReadString(buffer)
    self.chargeAccountId = BufferReadInt32(buffer)
    self.chargeGold = BufferReadInt32(buffer)
    self.goldCurrency = BufferReadFloat(buffer)
    self.chargeAmount = BufferReadFloat(buffer)
end

function _LC_RECHARGE_RECORD_ACK_MT:dump(buffer) 
    self.webHead:dump(buffer)
    BufferWriteInt32(buffer, self.nResult)
    BufferWriteString(buffer, self.orderNumber)
    BufferWriteInt32(buffer, self.chargeAccountId)
    BufferWriteInt32(buffer, self.chargeGold)
    BufferWriteFloat(buffer, self.goldCurrency)
    BufferWriteFloat(buffer, self.chargeAmount)
end

function LC_RECHARGE_RECORD_ACK(buffer)
    local self = {}
    self.webHead = WebHead()                         -- WebHead
    self.nResult = 0
    self.orderNumber = ""                            -- 充值订单
    self.chargeAccountId = 0                         -- 充值账号id
    self.chargeGold = 0                              -- 充值钻石
    self.goldCurrency = 0                            -- 玩家身上的钻石
    self.chargeAmount = 0                            -- 充值金额

    setmetatable(self, {__index = _LC_RECHARGE_RECORD_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SS_LOGIN_LOG_MT = {}
function _SS_LOGIN_LOG_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.loginTime = BufferReadInt32(buffer)
    self.logoutTime = BufferReadInt32(buffer)
    self.serverID = BufferReadInt32(buffer)
    self.gameID = BufferReadInt16(buffer)
    self.loginIP = BufferReadString(buffer)
    self.phoneUser = BufferReadInt8(buffer)
end

function _SS_LOGIN_LOG_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteInt32(buffer, self.loginTime)
    BufferWriteInt32(buffer, self.logoutTime)
    BufferWriteInt32(buffer, self.serverID)
    BufferWriteInt16(buffer, self.gameID)
    BufferWriteString(buffer, self.loginIP)
    BufferWriteInt8(buffer, self.phoneUser)
end

function SS_LOGIN_LOG(buffer)
    local self = {}
    self.userID = 0
    self.loginTime = 0
    self.logoutTime = 0
    self.serverID = 0
    self.gameID = 0
    self.loginIP = ""
    self.phoneUser = 0

    setmetatable(self, {__index = _SS_LOGIN_LOG_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SS_USER_LOG_MT = {}
function _SS_USER_LOG_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.object1 = BufferReadInt32(buffer)
    self.reason = BufferReadInt64(buffer)
    self.amount = BufferReadFloat(buffer)
    self.change = BufferReadFloat(buffer)
    self.gameID = BufferReadInt16(buffer)
    self.gameType = BufferReadUInt32(buffer)
    self.logTime = BufferReadInt32(buffer)
    self.note = BufferReadString(buffer)
    self.expend = BufferReadInt32(buffer)
    self.phoneUser = BufferReadInt8(buffer)
end

function _SS_USER_LOG_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteInt32(buffer, self.object1)
    BufferWriteInt64(buffer, self.reason)
    BufferWriteFloat(buffer, self.amount)
    BufferWriteFloat(buffer, self.change)
    BufferWriteInt16(buffer, self.gameID)
    BufferWriteUInt32(buffer, self.gameType)
    BufferWriteInt32(buffer, self.logTime)
    BufferWriteString(buffer, self.note)
    BufferWriteInt32(buffer, self.expend)
    BufferWriteInt8(buffer, self.phoneUser)
end

function SS_USER_LOG(buffer)
    local self = {}
    self.userID = 0
    self.object1 = 0
    self.reason = 0
    self.amount = 0
    self.change = 0
    self.gameID = 0
    self.gameType = Game_Type.GameType_Common
    self.logTime = 0
    self.note = ""
    self.expend = 0
    self.phoneUser = 0

    setmetatable(self, {__index = _SS_USER_LOG_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SS_SERVER_STAT_MT = {}
function _SS_SERVER_STAT_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = ServerStat()                          -- ServerStat
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vecServerStats = i2
end

function _SS_SERVER_STAT_MT:dump(buffer) 
    local i2 = self.vecServerStats
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function SS_SERVER_STAT(buffer)
    local self = {}
    self.vecServerStats = {}                         -- vector<ServerStat>

    setmetatable(self, {__index = _SS_SERVER_STAT_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SS_SHOP_BUY_LOG_MT = {}
function _SS_SHOP_BUY_LOG_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.shopId = BufferReadInt32(buffer)
    self.itemNum = BufferReadInt32(buffer)
    self.price = BufferReadFloat(buffer)
    self.amount = BufferReadFloat(buffer)
    self.period = BufferReadInt32(buffer)
    self.presentUserId = BufferReadInt32(buffer)
    self.itemId = BufferReadInt32(buffer)
    self.buyTime = BufferReadInt32(buffer)
end

function _SS_SHOP_BUY_LOG_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteInt32(buffer, self.shopId)
    BufferWriteInt32(buffer, self.itemNum)
    BufferWriteFloat(buffer, self.price)
    BufferWriteFloat(buffer, self.amount)
    BufferWriteInt32(buffer, self.period)
    BufferWriteInt32(buffer, self.presentUserId)
    BufferWriteInt32(buffer, self.itemId)
    BufferWriteInt32(buffer, self.buyTime)
end

function SS_SHOP_BUY_LOG(buffer)
    local self = {}
    self.userID = 0
    self.shopId = 0
    self.itemNum = 0
    self.price = 0
    self.amount = 0
    self.period = 0
    self.presentUserId = 0
    self.itemId = 0
    self.buyTime = 0

    setmetatable(self, {__index = _SS_SHOP_BUY_LOG_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SS_USER_ITEM_LOG_MT = {}
function _SS_USER_ITEM_LOG_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.itemId = BufferReadInt32(buffer)
    self.shopId = BufferReadInt32(buffer)
    self.templateId = BufferReadInt32(buffer)
    self.itemNum = BufferReadInt32(buffer)
    self.price = BufferReadFloat(buffer)
    self.buyTime = BufferReadInt32(buffer)
    self.lastTime = BufferReadInt32(buffer)
    self.type = BufferReadUInt32(buffer)
end

function _SS_USER_ITEM_LOG_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteInt32(buffer, self.itemId)
    BufferWriteInt32(buffer, self.shopId)
    BufferWriteInt32(buffer, self.templateId)
    BufferWriteInt32(buffer, self.itemNum)
    BufferWriteFloat(buffer, self.price)
    BufferWriteInt32(buffer, self.buyTime)
    BufferWriteInt32(buffer, self.lastTime)
    BufferWriteUInt32(buffer, self.type)
end

function SS_USER_ITEM_LOG(buffer)
    local self = {}
    self.userID = 0
    self.itemId = 0
    self.shopId = 0
    self.templateId = 0
    self.itemNum = 0
    self.price = 0
    self.buyTime = 0
    self.lastTime = 0
    self.type = Log_Operate_Type.Log_Operate_Type_Buy -- 操作类型

    setmetatable(self, {__index = _SS_USER_ITEM_LOG_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SS_GAME_LOG_MT = {}
function _SS_GAME_LOG_MT:load(buffer) 
    self.reason = BufferReadInt64(buffer)
    self.addGameCurrency = BufferReadInt64(buffer)
    self.addGold = BufferReadFloat(buffer)
    self.addToken = BufferReadInt64(buffer)
    self.expendGameCurrency = BufferReadInt64(buffer)
    self.expendGold = BufferReadFloat(buffer)
    self.expendToken = BufferReadInt64(buffer)
    self.note = BufferReadString(buffer)
    self.expend1 = BufferReadInt32(buffer)
    self.expend2 = BufferReadInt32(buffer)
end

function _SS_GAME_LOG_MT:dump(buffer) 
    BufferWriteInt64(buffer, self.reason)
    BufferWriteInt64(buffer, self.addGameCurrency)
    BufferWriteFloat(buffer, self.addGold)
    BufferWriteInt64(buffer, self.addToken)
    BufferWriteInt64(buffer, self.expendGameCurrency)
    BufferWriteFloat(buffer, self.expendGold)
    BufferWriteInt64(buffer, self.expendToken)
    BufferWriteString(buffer, self.note)
    BufferWriteInt32(buffer, self.expend1)
    BufferWriteInt32(buffer, self.expend2)
end

function SS_GAME_LOG(buffer)
    local self = {}
    self.reason = 0
    self.addGameCurrency = 0
    self.addGold = 0
    self.addToken = 0
    self.expendGameCurrency = 0
    self.expendGold = 0
    self.expendToken = 0
    self.note = ""
    self.expend1 = 0
    self.expend2 = 0

    setmetatable(self, {__index = _SS_GAME_LOG_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _TASK_UPDATE_GAMECURRENCY_MT = {}
function _TASK_UPDATE_GAMECURRENCY_MT:load(buffer) 
    self.srvID = BufferReadInt32(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
end

function _TASK_UPDATE_GAMECURRENCY_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.srvID)
    BufferWriteInt64(buffer, self.gameCurrency)
end

function TASK_UPDATE_GAMECURRENCY(buffer)
    local self = {}
    self.srvID = 0                                   -- 服务器id
    self.gameCurrency = 0                            -- 当前游戏豆

    setmetatable(self, {__index = _TASK_UPDATE_GAMECURRENCY_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stGiveGoods_MT = {}
function _stGiveGoods_MT:load(buffer) 
    self.goodsid = BufferReadInt64(buffer)
    self.id = BufferReadInt64(buffer)
    self.TemplateId = BufferReadInt32(buffer)
    self.ShopId = BufferReadInt32(buffer)
    self.Quantity = BufferReadInt16(buffer)
    self.Period = BufferReadInt32(buffer)
    self.Price = BufferReadFloat(buffer)
    self.bRecv = BufferReadInt16(buffer)
end

function _stGiveGoods_MT:dump(buffer) 
    BufferWriteInt64(buffer, self.goodsid)
    BufferWriteInt64(buffer, self.id)
    BufferWriteInt32(buffer, self.TemplateId)
    BufferWriteInt32(buffer, self.ShopId)
    BufferWriteInt16(buffer, self.Quantity)
    BufferWriteInt32(buffer, self.Period)
    BufferWriteFloat(buffer, self.Price)
    BufferWriteInt16(buffer, self.bRecv)
end

function stGiveGoods(buffer)
    local self = {}
    self.goodsid = 0                                 -- 邮件附件ID
    self.id = 0                                      -- 邮件Id
    self.TemplateId = 0                              -- 模板ID
    self.ShopId = 0                                  -- 商品ID
    self.Quantity = 0                                -- 数量（最少为1，为1时客户端不显示）
    self.Period = 0                                  -- 时间（天）（相对时间，最少为0，为0时客户端不显示时间）
    self.Price = 0                                   -- 单价（元）
    self.bRecv = 0                                   -- 是否接收

    setmetatable(self, {__index = _stGiveGoods_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stMailHeader_MT = {}
function _stMailHeader_MT:load(buffer) 
    self.id = BufferReadInt64(buffer)
    self.nSendUserID = BufferReadInt32(buffer)
    self.nRecvUserID = BufferReadInt32(buffer)
    self.nMailState = BufferReadInt16(buffer)
    self.strMailSubiect = BufferReadString(buffer)
    self.lSendTime = BufferReadInt32(buffer)
end

function _stMailHeader_MT:dump(buffer) 
    BufferWriteInt64(buffer, self.id)
    BufferWriteInt32(buffer, self.nSendUserID)
    BufferWriteInt32(buffer, self.nRecvUserID)
    BufferWriteInt16(buffer, self.nMailState)
    BufferWriteString(buffer, self.strMailSubiect)
    BufferWriteInt32(buffer, self.lSendTime)
end

function stMailHeader(buffer)
    local self = {}
    self.id = 0                                      -- 邮件ID
    self.nSendUserID = 0                             -- 发送人ID
    self.nRecvUserID = 0                             -- 接收人ID
    self.nMailState = 0                              -- 邮件状态
    self.strMailSubiect = ""                         -- 邮件主题
    self.lSendTime = 0                               -- 发送邮件时间 --发邮件时：客户端不用初始值

    setmetatable(self, {__index = _stMailHeader_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stMailHeaderAck_MT = {}
function _stMailHeaderAck_MT:load(buffer) 
    self.nRecvUserID = BufferReadInt32(buffer)
    self.conIndex = BufferReadUInt32(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = stMailHeader()                        -- stMailHeader
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vMail = i2
end

function _stMailHeaderAck_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nRecvUserID)
    BufferWriteUInt32(buffer, self.conIndex)
    local i2 = self.vMail
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function stMailHeaderAck(buffer)
    local self = {}
    self.nRecvUserID = 0                             -- 用户id
    self.conIndex = 0                                -- lobby连接id
    self.vMail = {}                                  -- vector<stMailHeader>

    setmetatable(self, {__index = _stMailHeaderAck_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stMail_MT = {}
function _stMail_MT:load(buffer) 
    self.id = BufferReadInt64(buffer)
    self.nSendUserID = BufferReadInt32(buffer)
    self.nRecvUserID = BufferReadInt32(buffer)
    self.lSendTime = BufferReadInt32(buffer)
    self.strMailSubject = BufferReadString(buffer)
    self.strMailContext = BufferReadString(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = stGiveGoods()                         -- stGiveGoods
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vGiveGoods = i2
end

function _stMail_MT:dump(buffer) 
    BufferWriteInt64(buffer, self.id)
    BufferWriteInt32(buffer, self.nSendUserID)
    BufferWriteInt32(buffer, self.nRecvUserID)
    BufferWriteInt32(buffer, self.lSendTime)
    BufferWriteString(buffer, self.strMailSubject)
    BufferWriteString(buffer, self.strMailContext)
    local i2 = self.vGiveGoods
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function stMail(buffer)
    local self = {}
    self.id = 0                                      -- 自动系统 编号 触发接口 可如完成全部淘金任务 将触发 收到系统邮件
    self.nSendUserID = 0                             -- 邮件发送人ID
    self.nRecvUserID = 0                             -- 收件人ID
    self.lSendTime = 0                               -- 发送邮件时间 --发邮件时：客户端不用初始值
    self.strMailSubject = ""                         -- 邮件主题
    self.strMailContext = ""                         -- 邮件内容  如果是自动系统 配置的固定文字内容,程序调用内容
    self.vGiveGoods = {}                             -- vector<stGiveGoods>

    setmetatable(self, {__index = _stMail_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stMailDB_MT = {}
function _stMailDB_MT:load(buffer) 
    self.nSendUserID = BufferReadInt32(buffer)
    self.conIndex = BufferReadUInt32(buffer)
    self.nMailType = BufferReadInt32(buffer)
    self.mail:load(buffer)
    self.protocol = BufferReadUInt32(buffer)
end

function _stMailDB_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nSendUserID)
    BufferWriteUInt32(buffer, self.conIndex)
    BufferWriteInt32(buffer, self.nMailType)
    self.mail:dump(buffer)
    BufferWriteUInt32(buffer, self.protocol)
end

function stMailDB(buffer)
    local self = {}
    self.nSendUserID = 0                             -- 用户id
    self.conIndex = 0                                -- lobby连接id
    self.nMailType = 0                               -- 邮件类型（0:表示系统邮件 1：表求请求个人邮件）
    self.mail = stMail()                             -- stMail
    self.protocol = 0                                -- 协议号

    setmetatable(self, {__index = _stMailDB_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stMailAckState_MT = {}
function _stMailAckState_MT:load(buffer) 
    self.nOperatorID = BufferReadInt32(buffer)
    self.eState = BufferReadUInt32(buffer)
end

function _stMailAckState_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nOperatorID)
    BufferWriteUInt32(buffer, self.eState)
end

function stMailAckState(buffer)
    local self = {}
    self.nOperatorID = 0                             -- 当前玩家ID
    self.eState = eOperatorMailState.eSend_Mail_Success -- 回复状态

    setmetatable(self, {__index = _stMailAckState_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stNewMailNotify_MT = {}
function _stNewMailNotify_MT:load(buffer) 
    self.RecvUserID = BufferReadInt32(buffer)
    self.NewNum = BufferReadInt32(buffer)
end

function _stNewMailNotify_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.RecvUserID)
    BufferWriteInt32(buffer, self.NewNum)
end

function stNewMailNotify(buffer)
    local self = {}
    self.RecvUserID = 0                              -- 接收邮件玩家ID
    self.NewNum = 0                                  -- 新邮件总数

    setmetatable(self, {__index = _stNewMailNotify_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stMailAckState_DB_MT = {}
function _stMailAckState_DB_MT:load(buffer) 
    self.eState = BufferReadUInt32(buffer)
    self.nOperatorID = BufferReadInt32(buffer)
    self.conIndex = BufferReadUInt32(buffer)
    self.protocol = BufferReadUInt32(buffer)
    self.RecvUserID = BufferReadInt32(buffer)
    self.NewMailNum = BufferReadInt32(buffer)
end

function _stMailAckState_DB_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.eState)
    BufferWriteInt32(buffer, self.nOperatorID)
    BufferWriteUInt32(buffer, self.conIndex)
    BufferWriteUInt32(buffer, self.protocol)
    BufferWriteInt32(buffer, self.RecvUserID)
    BufferWriteInt32(buffer, self.NewMailNum)
end

function stMailAckState_DB(buffer)
    local self = {}
    self.eState = eOperatorMailState.eSend_Mail_Success -- 回应的状态
    self.nOperatorID = 0                             -- 当前操作用户ID
    self.conIndex = 0                                -- lobby连接id	
    self.protocol = 0                                -- 协议号
    self.RecvUserID = 0                              -- 接收邮件玩家ID
    self.NewMailNum = 0                              -- 新邮件未读个数

    setmetatable(self, {__index = _stMailAckState_DB_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stRecvAllMailReq_MT = {}
function _stRecvAllMailReq_MT:load(buffer) 
    self.nMailType = BufferReadInt32(buffer)
    self.nStartNumber = BufferReadInt32(buffer)
    self.nEndNumber = BufferReadInt32(buffer)
end

function _stRecvAllMailReq_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nMailType)
    BufferWriteInt32(buffer, self.nStartNumber)
    BufferWriteInt32(buffer, self.nEndNumber)
end

function stRecvAllMailReq(buffer)
    local self = {}
    self.nMailType = 0                               -- 客户端请求邮件类型 0:表示系统邮件 1：表求请求个人邮件
    self.nStartNumber = 0                            -- 开始记录号
    self.nEndNumber = 0                              -- 结束记录号

    setmetatable(self, {__index = _stRecvAllMailReq_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stRecvAllMailReqDB_MT = {}
function _stRecvAllMailReqDB_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.conIndex = BufferReadUInt32(buffer)
    self.nMailType = BufferReadInt32(buffer)
    self.nStartNumber = BufferReadInt32(buffer)
    self.nEndNumber = BufferReadInt32(buffer)
end

function _stRecvAllMailReqDB_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteUInt32(buffer, self.conIndex)
    BufferWriteInt32(buffer, self.nMailType)
    BufferWriteInt32(buffer, self.nStartNumber)
    BufferWriteInt32(buffer, self.nEndNumber)
end

function stRecvAllMailReqDB(buffer)
    local self = {}
    self.userID = 0                                  -- 用户id
    self.conIndex = 0                                -- lobby连接id
    self.nMailType = 0                               -- 客户端请求系统邮件还是个人邮件 0：为系统邮件 1：个人邮件
    self.nStartNumber = 0                            -- 开始记录号
    self.nEndNumber = 0                              -- 结束记录号

    setmetatable(self, {__index = _stRecvAllMailReqDB_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stRecvAllMailAck_MT = {}
function _stRecvAllMailAck_MT:load(buffer) 
    self.eState = BufferReadUInt32(buffer)
    self.MailID = BufferReadInt64(buffer)
    self.TotalRecordNum = BufferReadInt32(buffer)
    self.userID = BufferReadInt32(buffer)
    self.conIndex = BufferReadUInt32(buffer)
    self.nMailType = BufferReadInt32(buffer)
    self.nStartNumber = BufferReadInt32(buffer)
    self.nEndNumber = BufferReadInt32(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = stMailHeader()                        -- stMailHeader
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vAllMail = i2
end

function _stRecvAllMailAck_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.eState)
    BufferWriteInt64(buffer, self.MailID)
    BufferWriteInt32(buffer, self.TotalRecordNum)
    BufferWriteInt32(buffer, self.userID)
    BufferWriteUInt32(buffer, self.conIndex)
    BufferWriteInt32(buffer, self.nMailType)
    BufferWriteInt32(buffer, self.nStartNumber)
    BufferWriteInt32(buffer, self.nEndNumber)
    local i2 = self.vAllMail
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function stRecvAllMailAck(buffer)
    local self = {}
    self.eState = eOperatorMailState.eSend_Mail_Success -- 查询状态结果
    self.MailID = 0                                  -- 当前请求的邮件ID
    self.TotalRecordNum = 0                          -- 总记录数
    self.userID = 0                                  -- 用户id
    self.conIndex = 0                                -- lobby连接id
    self.nMailType = 0                               -- 客户端请求系统邮件还是个人邮件 0：为系统邮件 1：个人邮件
    self.nStartNumber = 0                            -- 开始记录号
    self.nEndNumber = 0                              -- 结束记录号
    self.vAllMail = {}                               -- vector<stMailHeader>

    setmetatable(self, {__index = _stRecvAllMailAck_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stViewMail_MT = {}
function _stViewMail_MT:load(buffer) 
    self.nRecvUserID = BufferReadInt32(buffer)
    self.nID = BufferReadInt64(buffer)
end

function _stViewMail_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nRecvUserID)
    BufferWriteInt64(buffer, self.nID)
end

function stViewMail(buffer)
    local self = {}
    self.nRecvUserID = 0                             -- 接收方玩家ID
    self.nID = 0                                     -- 查看邮件ID

    setmetatable(self, {__index = _stViewMail_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stViewMailReq_MT = {}
function _stViewMailReq_MT:load(buffer) 
    self.nRecvUserID = BufferReadInt32(buffer)
    self.nID = BufferReadInt64(buffer)
    self.conIndex = BufferReadUInt32(buffer)
end

function _stViewMailReq_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nRecvUserID)
    BufferWriteInt64(buffer, self.nID)
    BufferWriteUInt32(buffer, self.conIndex)
end

function stViewMailReq(buffer)
    local self = {}
    self.nRecvUserID = 0                             -- 接收方玩家ID
    self.nID = 0                                     -- 查看邮件ID
    self.conIndex = 0                                -- lobby连接id

    setmetatable(self, {__index = _stViewMailReq_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stViewMailAck_MT = {}
function _stViewMailAck_MT:load(buffer) 
    self.state = BufferReadUInt32(buffer)
    self.conIndex = BufferReadUInt32(buffer)
    self.nID = BufferReadInt64(buffer)
    self.nRecvUserID = BufferReadInt32(buffer)
    self.SendUserID = BufferReadInt32(buffer)
    self.strMailSubject = BufferReadString(buffer)
    self.strMailContext = BufferReadString(buffer)
    self.strNickName = BufferReadString(buffer)
    self.lSendTime = BufferReadInt32(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = stGiveGoods()                         -- stGiveGoods
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vGiveGoods = i2
end

function _stViewMailAck_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.state)
    BufferWriteUInt32(buffer, self.conIndex)
    BufferWriteInt64(buffer, self.nID)
    BufferWriteInt32(buffer, self.nRecvUserID)
    BufferWriteInt32(buffer, self.SendUserID)
    BufferWriteString(buffer, self.strMailSubject)
    BufferWriteString(buffer, self.strMailContext)
    BufferWriteString(buffer, self.strNickName)
    BufferWriteInt32(buffer, self.lSendTime)
    local i2 = self.vGiveGoods
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function stViewMailAck(buffer)
    local self = {}
    self.state = eOperatorMailState.eSend_Mail_Success
    self.conIndex = 0                                -- lobby连接id
    self.nID = 0                                     -- 查看邮件ID
    self.nRecvUserID = 0                             -- 接收方玩家ID
    self.SendUserID = 0                              -- 发送玩家ID
    self.strMailSubject = ""                         -- 邮件主题
    self.strMailContext = ""                         -- 邮件内容
    self.strNickName = ""                            -- 发件人昵称
    self.lSendTime = 0                               -- 发送时间
    self.vGiveGoods = {}                             -- vector<stGiveGoods>

    setmetatable(self, {__index = _stViewMailAck_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stDeleteMail_MT = {}
function _stDeleteMail_MT:load(buffer) 
    self.nRecvUserID = BufferReadInt32(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = 0
        i4 = BufferReadInt64(buffer)
        table.insert(i2, i4)
    end
    self.vID = i2
end

function _stDeleteMail_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nRecvUserID)
    local i2 = self.vID
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        BufferWriteInt64(buffer, i1)
    end
end

function stDeleteMail(buffer)
    local self = {}
    self.nRecvUserID = 0                             -- 接收方玩家ID
    self.vID = {}                                    -- vector<Mail_ID>

    setmetatable(self, {__index = _stDeleteMail_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stDeleteMailReq_MT = {}
function _stDeleteMailReq_MT:load(buffer) 
    self.UserID = BufferReadInt32(buffer)
    self.conIndex = BufferReadUInt32(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = 0
        i4 = BufferReadInt64(buffer)
        table.insert(i2, i4)
    end
    self.delMail = i2
end

function _stDeleteMailReq_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.UserID)
    BufferWriteUInt32(buffer, self.conIndex)
    local i2 = self.delMail
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        BufferWriteInt64(buffer, i1)
    end
end

function stDeleteMailReq(buffer)
    local self = {}
    self.UserID = 0                                  -- 接收方玩家ID
    self.conIndex = 0                                -- lobby连接id
    self.delMail = {}                                -- vector<Mail_ID>

    setmetatable(self, {__index = _stDeleteMailReq_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stDeleteItemMailAck_MT = {}
function _stDeleteItemMailAck_MT:load(buffer) 
    self.nID = BufferReadInt64(buffer)
    self.state = BufferReadUInt32(buffer)
end

function _stDeleteItemMailAck_MT:dump(buffer) 
    BufferWriteInt64(buffer, self.nID)
    BufferWriteUInt32(buffer, self.state)
end

function stDeleteItemMailAck(buffer)
    local self = {}
    self.nID = 0                                     -- 删除邮件ID
    self.state = eOperatorMailState.eSend_Mail_Success -- 操作邮件状态

    setmetatable(self, {__index = _stDeleteItemMailAck_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stDeleteMailAck_MT = {}
function _stDeleteMailAck_MT:load(buffer) 
    self.state = BufferReadUInt32(buffer)
    self.nRecvUserID = BufferReadInt32(buffer)
    self.conIndex = BufferReadUInt32(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = stDeleteItemMailAck()                 -- stDeleteItemMailAck
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.vDeleteAck = i2
end

function _stDeleteMailAck_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.state)
    BufferWriteInt32(buffer, self.nRecvUserID)
    BufferWriteUInt32(buffer, self.conIndex)
    local i2 = self.vDeleteAck
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function stDeleteMailAck(buffer)
    local self = {}
    self.state = eOperatorMailState.eSend_Mail_Success -- 操作邮件状态
    self.nRecvUserID = 0                             -- 接收方玩家ID
    self.conIndex = 0                                -- lobby连接id
    self.vDeleteAck = {}                             -- vector<stDeleteItemMailAck>

    setmetatable(self, {__index = _stDeleteMailAck_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _stUserDeleteMailLog_MT = {}
function _stUserDeleteMailLog_MT:load(buffer) 
    self.RecvUserID = BufferReadInt32(buffer)
    self.DeleteMailID = BufferReadInt64(buffer)
    self.state = BufferReadInt32(buffer)
end

function _stUserDeleteMailLog_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.RecvUserID)
    BufferWriteInt64(buffer, self.DeleteMailID)
    BufferWriteInt32(buffer, self.state)
end

function stUserDeleteMailLog(buffer)
    local self = {}
    self.RecvUserID = 0                              -- 接收用户ID
    self.DeleteMailID = 0                            -- 删除邮件ID
    self.state = 0

    setmetatable(self, {__index = _stUserDeleteMailLog_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GetMailAnnexReq_MT = {}
function _GetMailAnnexReq_MT:load(buffer) 
    self.mailId = BufferReadInt64(buffer)
    self.goodsid = BufferReadInt64(buffer)
end

function _GetMailAnnexReq_MT:dump(buffer) 
    BufferWriteInt64(buffer, self.mailId)
    BufferWriteInt64(buffer, self.goodsid)
end

function GetMailAnnexReq(buffer)
    local self = {}
    self.mailId = 0                                  -- 邮件Id
    self.goodsid = 0                                 -- 邮件附件ID

    setmetatable(self, {__index = _GetMailAnnexReq_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GetMailAnnexReq_DB_MT = {}
function _GetMailAnnexReq_DB_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.conIndex = BufferReadUInt32(buffer)
    self.req:load(buffer)
end

function _GetMailAnnexReq_DB_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteUInt32(buffer, self.conIndex)
    self.req:dump(buffer)
end

function GetMailAnnexReq_DB(buffer)
    local self = {}
    self.userID = 0                                  -- 用户id
    self.conIndex = 0                                -- lobby连接id
    self.req = GetMailAnnexReq()                     -- GetMailAnnexReq

    setmetatable(self, {__index = _GetMailAnnexReq_DB_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _UserItemInfo_MT = {}
function _UserItemInfo_MT:load(buffer) 
    self.itemId = BufferReadInt32(buffer)
    self.shopId = BufferReadInt32(buffer)
    self.templateId = BufferReadInt32(buffer)
    self.quantity = BufferReadInt32(buffer)
    self.price = BufferReadFloat(buffer)
    self.buyTime = BufferReadInt32(buffer)
    self.lastTime = BufferReadInt32(buffer)
    self.bRebuy = BufferReadInt8(buffer)
end

function _UserItemInfo_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.itemId)
    BufferWriteInt32(buffer, self.shopId)
    BufferWriteInt32(buffer, self.templateId)
    BufferWriteInt32(buffer, self.quantity)
    BufferWriteFloat(buffer, self.price)
    BufferWriteInt32(buffer, self.buyTime)
    BufferWriteInt32(buffer, self.lastTime)
    BufferWriteInt8(buffer, self.bRebuy)
end

function UserItemInfo(buffer)
    local self = {}
    self.itemId = 0                                  -- 道具id
    self.shopId = 0                                  -- 商品id
    self.templateId = 0                              -- 道具模板id
    self.quantity = 0                                -- 数量
    self.price = 0                                   -- 购买单价（元）
    self.buyTime = 0                                 -- 购买时间
    self.lastTime = 0                                -- 到期时间
    self.bRebuy = 0                                  -- 是否能续费（0---不能续费；1---可以续费)

    setmetatable(self, {__index = _UserItemInfo_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GetMailAnnexAck_DB_MT = {}
function _GetMailAnnexAck_DB_MT:load(buffer) 
    self.req:load(buffer)
    self.result = BufferReadUInt32(buffer)
    self.itemInfo:load(buffer)
    self.mailType = BufferReadUInt32(buffer)
end

function _GetMailAnnexAck_DB_MT:dump(buffer) 
    self.req:dump(buffer)
    BufferWriteUInt32(buffer, self.result)
    self.itemInfo:dump(buffer)
    BufferWriteUInt32(buffer, self.mailType)
end

function GetMailAnnexAck_DB(buffer)
    local self = {}
    self.req = GetMailAnnexReq_DB()                  -- GetMailAnnexReq_DB
    self.result = eGetMailAnnex_Result.eGetMailAnnex_Result_Success -- 获取结果
    self.itemInfo = UserItemInfo()                   -- UserItemInfo
    self.mailType = eMailType.eMail_System_Type      -- 邮件类型

    setmetatable(self, {__index = _GetMailAnnexAck_DB_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GetMailAnnexAck_MT = {}
function _GetMailAnnexAck_MT:load(buffer) 
    self.req:load(buffer)
    self.result = BufferReadUInt32(buffer)
    self.itemInfo:load(buffer)
end

function _GetMailAnnexAck_MT:dump(buffer) 
    self.req:dump(buffer)
    BufferWriteUInt32(buffer, self.result)
    self.itemInfo:dump(buffer)
end

function GetMailAnnexAck(buffer)
    local self = {}
    self.req = GetMailAnnexReq()                     -- GetMailAnnexReq
    self.result = eGetMailAnnex_Result.eGetMailAnnex_Result_Success -- 获取结果
    self.itemInfo = UserItemInfo()                   -- UserItemInfo

    setmetatable(self, {__index = _GetMailAnnexAck_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_CHANGE_EMAIL_MT = {}
function _CS_CHANGE_EMAIL_MT:load(buffer) 
    self.strEmail = BufferReadString(buffer)
end

function _CS_CHANGE_EMAIL_MT:dump(buffer) 
    BufferWriteString(buffer, self.strEmail)
end

function CS_CHANGE_EMAIL(buffer)
    local self = {}
    self.strEmail = ""                               -- 邮箱

    setmetatable(self, {__index = _CS_CHANGE_EMAIL_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_LOGIN_TOKEN_MT = {}
function _SC_LOGIN_TOKEN_MT:load(buffer) 
    self.yuanbao = BufferReadInt64(buffer)
end

function _SC_LOGIN_TOKEN_MT:dump(buffer) 
    BufferWriteInt64(buffer, self.yuanbao)
end

function SC_LOGIN_TOKEN(buffer)
    local self = {}
    self.yuanbao = 0                                 -- 元宝

    setmetatable(self, {__index = _SC_LOGIN_TOKEN_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_PHONEBIND_CHECK_PHONECODE_MT = {}
function _CS_PHONEBIND_CHECK_PHONECODE_MT:load(buffer) 
    self.oldPhoneCode = BufferReadString(buffer)
    self.newPhoneCode = BufferReadString(buffer)
end

function _CS_PHONEBIND_CHECK_PHONECODE_MT:dump(buffer) 
    BufferWriteString(buffer, self.oldPhoneCode)
    BufferWriteString(buffer, self.newPhoneCode)
end

function CS_PHONEBIND_CHECK_PHONECODE(buffer)
    local self = {}
    self.oldPhoneCode = ""
    self.newPhoneCode = ""

    setmetatable(self, {__index = _CS_PHONEBIND_CHECK_PHONECODE_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_PHONECODEBIND_REQ_MT = {}
function _CS_PHONECODEBIND_REQ_MT:load(buffer) 
    self.oldBindPhoneCode = BufferReadString(buffer)
    self.newBindPhoneCode = BufferReadString(buffer)
    self.awardCurrency = BufferReadInt32(buffer)
    self.validCode = BufferReadUInt32(buffer)
    self.validCodeValiPeriod = BufferReadUInt32(buffer)
    self.smsOperType = BufferReadUInt32(buffer)
end

function _CS_PHONECODEBIND_REQ_MT:dump(buffer) 
    BufferWriteString(buffer, self.oldBindPhoneCode)
    BufferWriteString(buffer, self.newBindPhoneCode)
    BufferWriteInt32(buffer, self.awardCurrency)
    BufferWriteUInt32(buffer, self.validCode)
    BufferWriteUInt32(buffer, self.validCodeValiPeriod)
    BufferWriteUInt32(buffer, self.smsOperType)
end

function CS_PHONECODEBIND_REQ(buffer)
    local self = {}
    self.oldBindPhoneCode = ""                       -- 旧绑定的手机号
    self.newBindPhoneCode = ""                       -- 新绑定的手机号
    self.awardCurrency = 0                           -- 奖励的游戏豆
    self.validCode = 0                               -- 验证码
    self.validCodeValiPeriod = 0                     -- 验证码有效期 
    self.smsOperType = Sms_Operator_Type.Sms_Operator_Type_None -- 短信操作类型

    setmetatable(self, {__index = _CS_PHONECODEBIND_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CL_CHECK_PHONECODE_MT = {}
function _CL_CHECK_PHONECODE_MT:load(buffer) 
    self.strCode = BufferReadString(buffer)
    self.awardCurrency = BufferReadInt32(buffer)
    self.validCode = BufferReadUInt32(buffer)
end

function _CL_CHECK_PHONECODE_MT:dump(buffer) 
    BufferWriteString(buffer, self.strCode)
    BufferWriteInt32(buffer, self.awardCurrency)
    BufferWriteUInt32(buffer, self.validCode)
end

function CL_CHECK_PHONECODE(buffer)
    local self = {}
    self.strCode = ""                                -- 手机号码
    self.awardCurrency = 0                           -- 奖励游戏豆
    self.validCode = 0                               -- 验证码

    setmetatable(self, {__index = _CL_CHECK_PHONECODE_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_CHECK_PHONECODE_MT = {}
function _LC_CHECK_PHONECODE_MT:load(buffer) 
    self.strCode = BufferReadString(buffer)
    self.nResult = BufferReadUInt32(buffer)
end

function _LC_CHECK_PHONECODE_MT:dump(buffer) 
    BufferWriteString(buffer, self.strCode)
    BufferWriteUInt32(buffer, self.nResult)
end

function LC_CHECK_PHONECODE(buffer)
    local self = {}
    self.strCode = ""
    self.nResult = Phone_Reg_CheckPhoneCode_Result.Phone_Reg_CheckPhoneCode_Result_Ok

    setmetatable(self, {__index = _LC_CHECK_PHONECODE_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_PHONECODE_GET_VALIDATECODE_REQ_MT = {}
function _LC_PHONECODE_GET_VALIDATECODE_REQ_MT:load(buffer) 
    self.strCode = BufferReadString(buffer)
    self.smsOperType = BufferReadUInt32(buffer)
    self.startTimes = BufferReadInt8(buffer)
end

function _LC_PHONECODE_GET_VALIDATECODE_REQ_MT:dump(buffer) 
    BufferWriteString(buffer, self.strCode)
    BufferWriteUInt32(buffer, self.smsOperType)
    BufferWriteInt8(buffer, self.startTimes)
end

function LC_PHONECODE_GET_VALIDATECODE_REQ(buffer)
    local self = {}
    self.strCode = ""                                -- 手机号码
    self.smsOperType = Sms_Operator_Type.Sms_Operator_Type_None -- 短信操作类型
    self.startTimes = 0                              -- 是否启动次数控制 0为不启动 1 为启动

    setmetatable(self, {__index = _LC_PHONECODE_GET_VALIDATECODE_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_PHONECODE_GET_VALIDATECODE_ACK_MT = {}
function _LC_PHONECODE_GET_VALIDATECODE_ACK_MT:load(buffer) 
    self.strCode = BufferReadString(buffer)
    self.validCode = BufferReadUInt32(buffer)
    self.nResult = BufferReadUInt32(buffer)
    self.smsOperType = BufferReadUInt32(buffer)
    self.endTime = BufferReadUInt32(buffer)
end

function _LC_PHONECODE_GET_VALIDATECODE_ACK_MT:dump(buffer) 
    BufferWriteString(buffer, self.strCode)
    BufferWriteUInt32(buffer, self.validCode)
    BufferWriteUInt32(buffer, self.nResult)
    BufferWriteUInt32(buffer, self.smsOperType)
    BufferWriteUInt32(buffer, self.endTime)
end

function LC_PHONECODE_GET_VALIDATECODE_ACK(buffer)
    local self = {}
    self.strCode = ""
    self.validCode = 0
    self.nResult = Phone_GetValidateCode_Result.Phone_GetValidateCode_Result_Ok
    self.smsOperType = Sms_Operator_Type.Sms_Operator_Type_None -- 短信操作类型
    self.endTime = 0                                 -- 结束十分钟剩余时间

    setmetatable(self, {__index = _LC_PHONECODE_GET_VALIDATECODE_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CL_CHECK_PHONEVALIDATECODE_REQ_MT = {}
function _CL_CHECK_PHONEVALIDATECODE_REQ_MT:load(buffer) 
    self.strCode = BufferReadString(buffer)
    self.validCode = BufferReadUInt32(buffer)
    self.smsOperType = BufferReadUInt32(buffer)
end

function _CL_CHECK_PHONEVALIDATECODE_REQ_MT:dump(buffer) 
    BufferWriteString(buffer, self.strCode)
    BufferWriteUInt32(buffer, self.validCode)
    BufferWriteUInt32(buffer, self.smsOperType)
end

function CL_CHECK_PHONEVALIDATECODE_REQ(buffer)
    local self = {}
    self.strCode = ""
    self.validCode = 0
    self.smsOperType = Sms_Operator_Type.Sms_Operator_Type_None -- 短信操作类型

    setmetatable(self, {__index = _CL_CHECK_PHONEVALIDATECODE_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_CHECK_PHONEVALIDATECODE_ACK_MT = {}
function _LC_CHECK_PHONEVALIDATECODE_ACK_MT:load(buffer) 
    self.strCode = BufferReadString(buffer)
    self.validCode = BufferReadString(buffer)
    self.nResult = BufferReadUInt32(buffer)
    self.autoAccount = BufferReadString(buffer)
    self.phoneReg = BufferReadInt8(buffer)
    self.smsOperType = BufferReadUInt32(buffer)
end

function _LC_CHECK_PHONEVALIDATECODE_ACK_MT:dump(buffer) 
    BufferWriteString(buffer, self.strCode)
    BufferWriteString(buffer, self.validCode)
    BufferWriteUInt32(buffer, self.nResult)
    BufferWriteString(buffer, self.autoAccount)
    BufferWriteInt8(buffer, self.phoneReg)
    BufferWriteUInt32(buffer, self.smsOperType)
end

function LC_CHECK_PHONEVALIDATECODE_ACK(buffer)
    local self = {}
    self.strCode = ""
    self.validCode = ""
    self.nResult = Phone_CheckPhoneValidateCode_Result.Phone_CheckPhoneValidateCode_Result_Ok
    self.autoAccount = ""                            -- 自动生成的账号
    self.phoneReg = 0                                -- 手机PC端注册 0 为PC端注册 1 为手机注册
    self.smsOperType = Sms_Operator_Type.Sms_Operator_Type_None -- 短信操作类型

    setmetatable(self, {__index = _LC_CHECK_PHONEVALIDATECODE_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LA_PHONECODE_GET_VALIDATECODE_REQ_MT = {}
function _LA_PHONECODE_GET_VALIDATECODE_REQ_MT:load(buffer) 
    self.strCode = BufferReadString(buffer)
    self.maxGetTimes = BufferReadInt32(buffer)
    self.listMaxNum = BufferReadInt32(buffer)
    self.validCode = BufferReadUInt32(buffer)
    self.timeSpan = BufferReadInt32(buffer)
    self.timeSpanNum = BufferReadInt32(buffer)
    self.smsOperType = BufferReadUInt32(buffer)
    self.startTimes = BufferReadInt8(buffer)
    self.valiTimes = BufferReadInt32(buffer)
end

function _LA_PHONECODE_GET_VALIDATECODE_REQ_MT:dump(buffer) 
    BufferWriteString(buffer, self.strCode)
    BufferWriteInt32(buffer, self.maxGetTimes)
    BufferWriteInt32(buffer, self.listMaxNum)
    BufferWriteUInt32(buffer, self.validCode)
    BufferWriteInt32(buffer, self.timeSpan)
    BufferWriteInt32(buffer, self.timeSpanNum)
    BufferWriteUInt32(buffer, self.smsOperType)
    BufferWriteInt8(buffer, self.startTimes)
    BufferWriteInt32(buffer, self.valiTimes)
end

function LA_PHONECODE_GET_VALIDATECODE_REQ(buffer)
    local self = {}
    self.strCode = ""                                -- 手机号码
    self.maxGetTimes = 0                             -- 控制的最大获取次数
    self.listMaxNum = 0                              -- 排队最大数量控制
    self.validCode = 0                               -- 验证码
    self.timeSpan = 0                                -- 发送短信时间间隔
    self.timeSpanNum = 0                             -- 在设置时间间隔中对应发送的最大次数
    self.smsOperType = Sms_Operator_Type.Sms_Operator_Type_None -- 短信操作类型
    self.startTimes = 0                              -- 是否启动次数控制
    self.valiTimes = 0                               -- 输入验证码的有效次数    

    setmetatable(self, {__index = _LA_PHONECODE_GET_VALIDATECODE_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LA_PHONECODE_UPDATE_STATUS_MT = {}
function _LA_PHONECODE_UPDATE_STATUS_MT:load(buffer) 
    self.strCode = BufferReadString(buffer)
    self.sendStatus = BufferReadUInt32(buffer)
    self.smsOperType = BufferReadUInt32(buffer)
    self.timeSpan = BufferReadInt32(buffer)
end

function _LA_PHONECODE_UPDATE_STATUS_MT:dump(buffer) 
    BufferWriteString(buffer, self.strCode)
    BufferWriteUInt32(buffer, self.sendStatus)
    BufferWriteUInt32(buffer, self.smsOperType)
    BufferWriteInt32(buffer, self.timeSpan)
end

function LA_PHONECODE_UPDATE_STATUS(buffer)
    local self = {}
    self.strCode = ""
    self.sendStatus = Sms_Send_Status.Sms_Send_Status_None
    self.smsOperType = Sms_Operator_Type.Sms_Operator_Type_None -- 短信操作类型
    self.timeSpan = 0                                -- 时间间隔

    setmetatable(self, {__index = _LA_PHONECODE_UPDATE_STATUS_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LA_CHECK_PHONEVALIDATECODE_REQ_MT = {}
function _LA_CHECK_PHONEVALIDATECODE_REQ_MT:load(buffer) 
    self.strCode = BufferReadString(buffer)
    self.validCode = BufferReadUInt32(buffer)
    self.validCodeValiPeriod = BufferReadUInt32(buffer)
    self.strAccountHead = BufferReadString(buffer)
    self.phoneReg = BufferReadInt8(buffer)
    self.smsOperType = BufferReadUInt32(buffer)
end

function _LA_CHECK_PHONEVALIDATECODE_REQ_MT:dump(buffer) 
    BufferWriteString(buffer, self.strCode)
    BufferWriteUInt32(buffer, self.validCode)
    BufferWriteUInt32(buffer, self.validCodeValiPeriod)
    BufferWriteString(buffer, self.strAccountHead)
    BufferWriteInt8(buffer, self.phoneReg)
    BufferWriteUInt32(buffer, self.smsOperType)
end

function LA_CHECK_PHONEVALIDATECODE_REQ(buffer)
    local self = {}
    self.strCode = ""
    self.validCode = 0
    self.validCodeValiPeriod = 0                     -- 验证码有效期 
    self.strAccountHead = ""                         -- 账号头字符
    self.phoneReg = 0                                -- 手机PC端注册 0 为PC端注册 1 为手机注册
    self.smsOperType = Sms_Operator_Type.Sms_Operator_Type_None -- 短信操作类型

    setmetatable(self, {__index = _LA_CHECK_PHONEVALIDATECODE_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _DA_CHECK_PHONECODE_USERD_MT = {}
function _DA_CHECK_PHONECODE_USERD_MT:load(buffer) 
    self.strCode = BufferReadString(buffer)
    self.nret = BufferReadInt8(buffer)
end

function _DA_CHECK_PHONECODE_USERD_MT:dump(buffer) 
    BufferWriteString(buffer, self.strCode)
    BufferWriteInt8(buffer, self.nret)
end

function DA_CHECK_PHONECODE_USERD(buffer)
    local self = {}
    self.strCode = ""
    self.nret = 0

    setmetatable(self, {__index = _DA_CHECK_PHONECODE_USERD_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _AD_PHONE_CHECK_NICKNAME_MT = {}
function _AD_PHONE_CHECK_NICKNAME_MT:load(buffer) 
    self.strCode = BufferReadString(buffer)
end

function _AD_PHONE_CHECK_NICKNAME_MT:dump(buffer) 
    BufferWriteString(buffer, self.strCode)
end

function AD_PHONE_CHECK_NICKNAME(buffer)
    local self = {}
    self.strCode = ""

    setmetatable(self, {__index = _AD_PHONE_CHECK_NICKNAME_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_GETPHONECODEBIND_RESULT_MT = {}
function _SC_GETPHONECODEBIND_RESULT_MT:load(buffer) 
    self.nResult = BufferReadInt32(buffer)
    self.strCode = BufferReadString(buffer)
end

function _SC_GETPHONECODEBIND_RESULT_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nResult)
    BufferWriteString(buffer, self.strCode)
end

function SC_GETPHONECODEBIND_RESULT(buffer)
    local self = {}
    self.nResult = 0                                 -- 绑定结果
    self.strCode = ""                                -- 绑定手机号

    setmetatable(self, {__index = _SC_GETPHONECODEBIND_RESULT_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LA_CHANGEPHONELOGININFO_MT = {}
function _LA_CHANGEPHONELOGININFO_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.phoneCode = BufferReadString(buffer)
end

function _LA_CHANGEPHONELOGININFO_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteString(buffer, self.phoneCode)
end

function LA_CHANGEPHONELOGININFO(buffer)
    local self = {}
    self.userId = 0
    self.phoneCode = ""

    setmetatable(self, {__index = _LA_CHANGEPHONELOGININFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_PHONECODEBIND_ACK_MT = {}
function _SC_PHONECODEBIND_ACK_MT:load(buffer) 
    self.nResult = BufferReadUInt32(buffer)
    self.bindPhoneCode = BufferReadString(buffer)
end

function _SC_PHONECODEBIND_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.nResult)
    BufferWriteString(buffer, self.bindPhoneCode)
end

function SC_PHONECODEBIND_ACK(buffer)
    local self = {}
    self.nResult = Phone_Bind_Result.Phone_Bind_Result_Ok
    self.bindPhoneCode = ""

    setmetatable(self, {__index = _SC_PHONECODEBIND_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SD_BIND_GETAWARD_MT = {}
function _SD_BIND_GETAWARD_MT:load(buffer) 
    self.awardGameCurrency = BufferReadInt64(buffer)
end

function _SD_BIND_GETAWARD_MT:dump(buffer) 
    BufferWriteInt64(buffer, self.awardGameCurrency)
end

function SD_BIND_GETAWARD(buffer)
    local self = {}
    self.awardGameCurrency = 0                       -- 奖励游戏豆数量

    setmetatable(self, {__index = _SD_BIND_GETAWARD_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_BIND_GETAWARD_ACK_MT = {}
function _SC_BIND_GETAWARD_ACK_MT:load(buffer) 
    self.nResult = BufferReadUInt32(buffer)
    self.awardGameCurrency = BufferReadInt64(buffer)
    self.totalGameCurrency = BufferReadInt64(buffer)
end

function _SC_BIND_GETAWARD_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.nResult)
    BufferWriteInt64(buffer, self.awardGameCurrency)
    BufferWriteInt64(buffer, self.totalGameCurrency)
end

function SC_BIND_GETAWARD_ACK(buffer)
    local self = {}
    self.nResult = Phone_Operateor_Result.Phone_Operateor_Result_Ok
    self.awardGameCurrency = 0
    self.totalGameCurrency = 0

    setmetatable(self, {__index = _SC_BIND_GETAWARD_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_SETUSEPHONELOGIN_MT = {}
function _CS_SETUSEPHONELOGIN_MT:load(buffer) 
    self.strCode = BufferReadString(buffer)
    self.sureSet = BufferReadInt8(buffer)
end

function _CS_SETUSEPHONELOGIN_MT:dump(buffer) 
    BufferWriteString(buffer, self.strCode)
    BufferWriteInt8(buffer, self.sureSet)
end

function CS_SETUSEPHONELOGIN(buffer)
    local self = {}
    self.strCode = ""
    self.sureSet = 0

    setmetatable(self, {__index = _CS_SETUSEPHONELOGIN_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_PHONEOPER_ACK_MT = {}
function _SC_PHONEOPER_ACK_MT:load(buffer) 
    self.nResult = BufferReadUInt32(buffer)
end

function _SC_PHONEOPER_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.nResult)
end

function SC_PHONEOPER_ACK(buffer)
    local self = {}
    self.nResult = Phone_Operateor_Result.Phone_Operateor_Result_Ok

    setmetatable(self, {__index = _SC_PHONEOPER_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_USEPHONEVALICODELOGIN_ACK_MT = {}
function _LC_USEPHONEVALICODELOGIN_ACK_MT:load(buffer) 
    self.nResult = BufferReadUInt32(buffer)
    self.strCode = BufferReadString(buffer)
    self.strPassCode = BufferReadString(buffer)
end

function _LC_USEPHONEVALICODELOGIN_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.nResult)
    BufferWriteString(buffer, self.strCode)
    BufferWriteString(buffer, self.strPassCode)
end

function LC_USEPHONEVALICODELOGIN_ACK(buffer)
    local self = {}
    self.nResult = Phone_Operateor_Result.Phone_Operateor_Result_Ok
    self.strCode = ""
    self.strPassCode = ""

    setmetatable(self, {__index = _LC_USEPHONEVALICODELOGIN_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LD_USEPHONEVALICODELOGIN_REQ_MT = {}
function _LD_USEPHONEVALICODELOGIN_REQ_MT:load(buffer) 
    self.strPassCode = BufferReadString(buffer)
end

function _LD_USEPHONEVALICODELOGIN_REQ_MT:dump(buffer) 
    BufferWriteString(buffer, self.strPassCode)
end

function LD_USEPHONEVALICODELOGIN_REQ(buffer)
    local self = {}
    self.strPassCode = ""                            -- 通行证

    setmetatable(self, {__index = _LD_USEPHONEVALICODELOGIN_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CL_LOGINGETSET_ACK_MT = {}
function _CL_LOGINGETSET_ACK_MT:load(buffer) 
    self.loginGetValiCodeDecGameCurrency = BufferReadInt64(buffer)
end

function _CL_LOGINGETSET_ACK_MT:dump(buffer) 
    BufferWriteInt64(buffer, self.loginGetValiCodeDecGameCurrency)
end

function CL_LOGINGETSET_ACK(buffer)
    local self = {}
    self.loginGetValiCodeDecGameCurrency = 0         -- 登录获取验证码扣去游戏豆数量

    setmetatable(self, {__index = _CL_LOGINGETSET_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_LOGINGETSET_ACK_MT = {}
function _CS_LOGINGETSET_ACK_MT:load(buffer) 
    self.bindPhoneAwardGameCurrency = BufferReadInt64(buffer)
end

function _CS_LOGINGETSET_ACK_MT:dump(buffer) 
    BufferWriteInt64(buffer, self.bindPhoneAwardGameCurrency)
end

function CS_LOGINGETSET_ACK(buffer)
    local self = {}
    self.bindPhoneAwardGameCurrency = 0              -- 绑定手机奖励游戏豆数量

    setmetatable(self, {__index = _CS_LOGINGETSET_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _DL_PHONE_CHECK_PHONEBINDACCOUNTLIMIT_MT = {}
function _DL_PHONE_CHECK_PHONEBINDACCOUNTLIMIT_MT:load(buffer) 
    self.phoneCodeGetVal:load(buffer)
    self.nResult = BufferReadUInt32(buffer)
end

function _DL_PHONE_CHECK_PHONEBINDACCOUNTLIMIT_MT:dump(buffer) 
    self.phoneCodeGetVal:dump(buffer)
    BufferWriteUInt32(buffer, self.nResult)
end

function DL_PHONE_CHECK_PHONEBINDACCOUNTLIMIT(buffer)
    local self = {}
    self.phoneCodeGetVal = LC_PHONECODE_GET_VALIDATECODE_REQ() -- LC_PHONECODE_GET_VALIDATECODE_REQ
    self.nResult = Phone_GetValidateCode_Result.Phone_GetValidateCode_Result_Ok

    setmetatable(self, {__index = _DL_PHONE_CHECK_PHONEBINDACCOUNTLIMIT_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GET_USER_IDENT_MT = {}
function _GET_USER_IDENT_MT:load(buffer) 
    self.ident = BufferReadInt32(buffer)
end

function _GET_USER_IDENT_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.ident)
end

function GET_USER_IDENT(buffer)
    local self = {}
    self.ident = 0                                   -- 身份

    setmetatable(self, {__index = _GET_USER_IDENT_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _PL_PHONE_CL_VISITOR_LOGIN_REQ_MT = {}
function _PL_PHONE_CL_VISITOR_LOGIN_REQ_MT:load(buffer) 
    self.phoneOnlyCode = BufferReadString(buffer)
    self.strIP = BufferReadString(buffer)
end

function _PL_PHONE_CL_VISITOR_LOGIN_REQ_MT:dump(buffer) 
    BufferWriteString(buffer, self.phoneOnlyCode)
    BufferWriteString(buffer, self.strIP)
end

function PL_PHONE_CL_VISITOR_LOGIN_REQ(buffer)
    local self = {}
    self.phoneOnlyCode = ""
    self.strIP = ""                                  -- 登陆IP

    setmetatable(self, {__index = _PL_PHONE_CL_VISITOR_LOGIN_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _PL_PHONE_LC_VISITOR_LOGIN_ACK_MT = {}
function _PL_PHONE_LC_VISITOR_LOGIN_ACK_MT:load(buffer) 
    self.loginRet = BufferReadUInt32(buffer)
    self.userID = BufferReadInt32(buffer)
    self.serverID = BufferReadInt32(buffer)
    self.strIP = BufferReadString(buffer)
    self.wPort = BufferReadUInt16(buffer)
end

function _PL_PHONE_LC_VISITOR_LOGIN_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.loginRet)
    BufferWriteInt32(buffer, self.userID)
    BufferWriteInt32(buffer, self.serverID)
    BufferWriteString(buffer, self.strIP)
    BufferWriteUInt16(buffer, self.wPort)
end

function PL_PHONE_LC_VISITOR_LOGIN_ACK(buffer)
    local self = {}
    self.loginRet = ELoginResult.ELOGIN_RESULT_OK    -- 游客登录登陆结果
    self.userID = 0                                  -- 用户ID
    self.serverID = 0                                -- 选择登陆的lobbyserver id
    self.strIP = ""                                  -- 选择登陆的lobbyserver ip
    self.wPort = 0                                   -- 选择登陆的lobbyserver port

    setmetatable(self, {__index = _PL_PHONE_LC_VISITOR_LOGIN_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _PL_PHONE_GC_LOGIN_ACK_MT = {}
function _PL_PHONE_GC_LOGIN_ACK_MT:load(buffer) 
    self.bRet = BufferReadUInt32(buffer)
    self.userId = BufferReadInt32(buffer)
    self.gameData:load(buffer)
    self.svrID = BufferReadInt32(buffer)
    self.roomID = BufferReadInt8(buffer)
end

function _PL_PHONE_GC_LOGIN_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.bRet)
    BufferWriteInt32(buffer, self.userId)
    self.gameData:dump(buffer)
    BufferWriteInt32(buffer, self.svrID)
    BufferWriteInt8(buffer, self.roomID)
end

function PL_PHONE_GC_LOGIN_ACK(buffer)
    local self = {}
    self.bRet = EGameResult.EGAME_RESULT_OK
    self.userId = 0
    self.gameData = stGameData()                     -- stGameData
    self.svrID = 0
    self.roomID = 0

    setmetatable(self, {__index = _PL_PHONE_GC_LOGIN_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _PL_PHONE_CG_ROOM_USERLIST_MT = {}
function _PL_PHONE_CG_ROOM_USERLIST_MT:load(buffer) 
    self.tableStartId = BufferReadInt32(buffer)
    self.tableNum = BufferReadInt32(buffer)
end

function _PL_PHONE_CG_ROOM_USERLIST_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.tableStartId)
    BufferWriteInt32(buffer, self.tableNum)
end

function PL_PHONE_CG_ROOM_USERLIST(buffer)
    local self = {}
    self.tableStartId = 0
    self.tableNum = 0                                -- 不包含起始桌子

    setmetatable(self, {__index = _PL_PHONE_CG_ROOM_USERLIST_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _PL_PHONE_GC_ENTERTABLE_MT = {}
function _PL_PHONE_GC_ENTERTABLE_MT:load(buffer) 
    self.gameUser:load(buffer)
    self.bringGameCurrency = BufferReadInt64(buffer)
    self.bHandUp = BufferReadBool(buffer)
end

function _PL_PHONE_GC_ENTERTABLE_MT:dump(buffer) 
    self.gameUser:dump(buffer)
    BufferWriteInt64(buffer, self.bringGameCurrency)
    BufferWriteBool(buffer, self.bHandUp)
end

function PL_PHONE_GC_ENTERTABLE(buffer)
    local self = {}
    self.gameUser = stGameUser()                     -- stGameUser
    self.bringGameCurrency = 0                       -- 携带筹码
    self.bHandUp = false                             -- 是否举手

    setmetatable(self, {__index = _PL_PHONE_GC_ENTERTABLE_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

EnterGameRoom_Result = {
    EnterGameRoom_Result_Ok                          = 0, -- 进入成功
    EnterGameRoom_Result_Fulled                      = 1, -- 房间已满
}

local _PL_PHONE_CG_FAST_JOIN_GAME_ACK_MT = {}
function _PL_PHONE_CG_FAST_JOIN_GAME_ACK_MT:load(buffer) 
    self.roomId = BufferReadInt8(buffer)
    self.nResult = BufferReadUInt32(buffer)
end

function _PL_PHONE_CG_FAST_JOIN_GAME_ACK_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.roomId)
    BufferWriteUInt32(buffer, self.nResult)
end

function PL_PHONE_CG_FAST_JOIN_GAME_ACK(buffer)
    local self = {}
    self.roomId = 0
    self.nResult = EnterGameRoom_Result.EnterGameRoom_Result_Ok

    setmetatable(self, {__index = _PL_PHONE_CG_FAST_JOIN_GAME_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _PL_PHONE_IOS_RECHARGE_MT = {}
function _PL_PHONE_IOS_RECHARGE_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.transActionId = BufferReadString(buffer)
    self.recevieData = BufferReadString(buffer)
end

function _PL_PHONE_IOS_RECHARGE_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteString(buffer, self.transActionId)
    BufferWriteString(buffer, self.recevieData)
end

function PL_PHONE_IOS_RECHARGE(buffer)
    local self = {}
    self.userId = 0
    self.transActionId = ""
    self.recevieData = ""

    setmetatable(self, {__index = _PL_PHONE_IOS_RECHARGE_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _PL_PHONE_GD_IOS_RECHARGE_MT = {}
function _PL_PHONE_GD_IOS_RECHARGE_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.transActionId = BufferReadString(buffer)
    self.productId = BufferReadString(buffer)
    self.quality = BufferReadInt32(buffer)
    self.rechargeTime = BufferReadInt32(buffer)
    self.uniqueidentifier = BufferReadString(buffer)
    self.payType = BufferReadInt32(buffer)
    self.payMoney = BufferReadFloat(buffer)
end

function _PL_PHONE_GD_IOS_RECHARGE_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteString(buffer, self.transActionId)
    BufferWriteString(buffer, self.productId)
    BufferWriteInt32(buffer, self.quality)
    BufferWriteInt32(buffer, self.rechargeTime)
    BufferWriteString(buffer, self.uniqueidentifier)
    BufferWriteInt32(buffer, self.payType)
    BufferWriteFloat(buffer, self.payMoney)
end

function PL_PHONE_GD_IOS_RECHARGE(buffer)
    local self = {}
    self.userId = 0
    self.transActionId = ""
    self.productId = ""
    self.quality = 0
    self.rechargeTime = 0
    self.uniqueidentifier = ""
    self.payType = 0                                 --  1 为游戏豆，2为风雷币
    self.payMoney = 0                                -- 支付金额

    setmetatable(self, {__index = _PL_PHONE_GD_IOS_RECHARGE_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _PL_PHONE_IOS_RECHARGE_ACK_MT = {}
function _PL_PHONE_IOS_RECHARGE_ACK_MT:load(buffer) 
    self.nRet = BufferReadInt32(buffer)
    self.transactionId = BufferReadString(buffer)
    self.payType = BufferReadInt32(buffer)
    self.rechargeNum = BufferReadInt32(buffer)
    self.totalGameCurrency = BufferReadInt64(buffer)
    self.totalGoldCurrency = BufferReadFloat(buffer)
    self.payMoney = BufferReadFloat(buffer)
end

function _PL_PHONE_IOS_RECHARGE_ACK_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nRet)
    BufferWriteString(buffer, self.transactionId)
    BufferWriteInt32(buffer, self.payType)
    BufferWriteInt32(buffer, self.rechargeNum)
    BufferWriteInt64(buffer, self.totalGameCurrency)
    BufferWriteFloat(buffer, self.totalGoldCurrency)
    BufferWriteFloat(buffer, self.payMoney)
end

function PL_PHONE_IOS_RECHARGE_ACK(buffer)
    local self = {}
    self.nRet = 0                                    -- 充值返回值
    self.transactionId = ""                          -- 充值唯一id
    self.payType = 0                                 -- 充值方式 1-游戏豆 2 -风雷币
    self.rechargeNum = 0                             -- 充值数量
    self.totalGameCurrency = 0                       -- 总的游戏币数量
    self.totalGoldCurrency = 0                       -- 总的风雷币数量
    self.payMoney = 0                                -- 支付金额

    setmetatable(self, {__index = _PL_PHONE_IOS_RECHARGE_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _PL_PHONE_IOS_SINGLE_RECHARGEINFO_MT = {}
function _PL_PHONE_IOS_SINGLE_RECHARGEINFO_MT:load(buffer) 
    self.productId = BufferReadString(buffer)
    self.productType = BufferReadInt32(buffer)
    self.productPrice = BufferReadFloat(buffer)
    self.productNum = BufferReadInt32(buffer)
    self.productIcon = BufferReadString(buffer)
end

function _PL_PHONE_IOS_SINGLE_RECHARGEINFO_MT:dump(buffer) 
    BufferWriteString(buffer, self.productId)
    BufferWriteInt32(buffer, self.productType)
    BufferWriteFloat(buffer, self.productPrice)
    BufferWriteInt32(buffer, self.productNum)
    BufferWriteString(buffer, self.productIcon)
end

function PL_PHONE_IOS_SINGLE_RECHARGEINFO(buffer)
    local self = {}
    self.productId = ""
    self.productType = 0
    self.productPrice = 0
    self.productNum = 0
    self.productIcon = ""

    setmetatable(self, {__index = _PL_PHONE_IOS_SINGLE_RECHARGEINFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _PL_PHONE_IOS_RECHARGEINFO_MT = {}
function _PL_PHONE_IOS_RECHARGEINFO_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = PL_PHONE_IOS_SINGLE_RECHARGEINFO()    -- PL_PHONE_IOS_SINGLE_RECHARGEINFO
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.iosRechargeInfo = i2
end

function _PL_PHONE_IOS_RECHARGEINFO_MT:dump(buffer) 
    local i2 = self.iosRechargeInfo
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function PL_PHONE_IOS_RECHARGEINFO(buffer)
    local self = {}
    self.iosRechargeInfo = {}                        -- vector<PL_PHONE_IOS_SINGLE_RECHARGEINFO>

    setmetatable(self, {__index = _PL_PHONE_IOS_RECHARGEINFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _BASELIVINGINFO_MT = {}
function _BASELIVINGINFO_MT:load(buffer) 
    self.startBasicLiving = BufferReadBool(buffer)
    self.basicLiveingGiveCurrency = BufferReadInt32(buffer)
    self.silverVipGiveCurrency = BufferReadInt32(buffer)
    self.goldVipGiveCurrency = BufferReadInt32(buffer)
    self.diamondVipGiveCurrency = BufferReadInt32(buffer)
    self.giveBasicLiveingNum = BufferReadInt32(buffer)
    self.lowCurrencyNum = BufferReadInt32(buffer)
    self.thirdGiveCurrency = BufferReadInt32(buffer)
end

function _BASELIVINGINFO_MT:dump(buffer) 
    BufferWriteBool(buffer, self.startBasicLiving)
    BufferWriteInt32(buffer, self.basicLiveingGiveCurrency)
    BufferWriteInt32(buffer, self.silverVipGiveCurrency)
    BufferWriteInt32(buffer, self.goldVipGiveCurrency)
    BufferWriteInt32(buffer, self.diamondVipGiveCurrency)
    BufferWriteInt32(buffer, self.giveBasicLiveingNum)
    BufferWriteInt32(buffer, self.lowCurrencyNum)
    BufferWriteInt32(buffer, self.thirdGiveCurrency)
end

function BASELIVINGINFO(buffer)
    local self = {}
    self.startBasicLiving = false                    -- 是否启用低保
    self.basicLiveingGiveCurrency = 0                -- 低保赠送游戏豆值
    self.silverVipGiveCurrency = 0                   -- 白银会员每日赠送游戏豆值
    self.goldVipGiveCurrency = 0                     -- 黄金会员每日赠送游戏豆值
    self.diamondVipGiveCurrency = 0                  -- 钻石会员每日赠送游戏豆值
    self.giveBasicLiveingNum = 0                     -- 当天奖励低保次数
    self.lowCurrencyNum = 0                          -- 低于多少游戏豆领取低保
    self.thirdGiveCurrency = 0                       -- 来宾每日赠送游戏豆值

    setmetatable(self, {__index = _BASELIVINGINFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_BASELIVINGINFO_MT = {}
function _LC_BASELIVINGINFO_MT:load(buffer) 
    self.startBasicLiving = BufferReadBool(buffer)
    self.giveBasicLiveingNum = BufferReadInt32(buffer)
    self.lowCurrencyNum = BufferReadInt32(buffer)
    self.basicLiveingGiveCurrency = BufferReadInt32(buffer)
    self.silverVipGiveCurrency = BufferReadInt32(buffer)
    self.goldVipGiveCurrency = BufferReadInt32(buffer)
    self.diamondVipGiveCurrency = BufferReadInt32(buffer)
    self.thirdGiveCurrency = BufferReadInt32(buffer)
end

function _LC_BASELIVINGINFO_MT:dump(buffer) 
    BufferWriteBool(buffer, self.startBasicLiving)
    BufferWriteInt32(buffer, self.giveBasicLiveingNum)
    BufferWriteInt32(buffer, self.lowCurrencyNum)
    BufferWriteInt32(buffer, self.basicLiveingGiveCurrency)
    BufferWriteInt32(buffer, self.silverVipGiveCurrency)
    BufferWriteInt32(buffer, self.goldVipGiveCurrency)
    BufferWriteInt32(buffer, self.diamondVipGiveCurrency)
    BufferWriteInt32(buffer, self.thirdGiveCurrency)
end

function LC_BASELIVINGINFO(buffer)
    local self = {}
    self.startBasicLiving = false                    -- 是否启用低保
    self.giveBasicLiveingNum = 0                     -- 当天奖励低保次数
    self.lowCurrencyNum = 0                          -- 低于多少游戏豆领取低保
    self.basicLiveingGiveCurrency = 0                -- 低保赠送游戏豆值
    self.silverVipGiveCurrency = 0                   -- 白银会员每日赠送游戏豆值
    self.goldVipGiveCurrency = 0                     -- 黄金会员每日赠送游戏豆值
    self.diamondVipGiveCurrency = 0                  -- 钻石会员每日赠送游戏豆值
    self.thirdGiveCurrency = 0                       -- 来宾每日赠送游戏豆值

    setmetatable(self, {__index = _LC_BASELIVINGINFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GF_GETBASELIVEING_REQ_MT = {}
function _GF_GETBASELIVEING_REQ_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.dayGetCurrency = BufferReadInt32(buffer)
    self.dayGetTimes = BufferReadInt32(buffer)
    self.lowCurrencyNum = BufferReadInt32(buffer)
    self.connIndex = BufferReadUInt32(buffer)
end

function _GF_GETBASELIVEING_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt32(buffer, self.dayGetCurrency)
    BufferWriteInt32(buffer, self.dayGetTimes)
    BufferWriteInt32(buffer, self.lowCurrencyNum)
    BufferWriteUInt32(buffer, self.connIndex)
end

function GF_GETBASELIVEING_REQ(buffer)
    local self = {}
    self.userId = 0
    self.dayGetCurrency = 0                          -- 当天领取游戏豆数量
    self.dayGetTimes = 0                             -- 当天领取次数
    self.lowCurrencyNum = 0                          -- 领取低保的最低游戏豆数量
    self.connIndex = 0                               -- 连接索引

    setmetatable(self, {__index = _GF_GETBASELIVEING_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_GETBASELIVEING_ACK_MT = {}
function _GC_GETBASELIVEING_ACK_MT:load(buffer) 
    self.srvId = BufferReadInt32(buffer)
    self.userId = BufferReadInt32(buffer)
    self.nResult = BufferReadUInt32(buffer)
    self.dayGetCurrency = BufferReadInt32(buffer)
    self.dayGetTimes = BufferReadInt32(buffer)
    self.getTimes = BufferReadInt32(buffer)
    self.connIndex = BufferReadUInt32(buffer)
end

function _GC_GETBASELIVEING_ACK_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.srvId)
    BufferWriteInt32(buffer, self.userId)
    BufferWriteUInt32(buffer, self.nResult)
    BufferWriteInt32(buffer, self.dayGetCurrency)
    BufferWriteInt32(buffer, self.dayGetTimes)
    BufferWriteInt32(buffer, self.getTimes)
    BufferWriteUInt32(buffer, self.connIndex)
end

function GC_GETBASELIVEING_ACK(buffer)
    local self = {}
    self.srvId = 0
    self.userId = 0
    self.nResult = BaseLiving_Condition_Result.BaseLiving_Condition_Result_Ok
    self.dayGetCurrency = 0                          -- 当天领取游戏豆数量
    self.dayGetTimes = 0                             -- 当天领取次数
    self.getTimes = 0                                -- 已经领取的次数 
    self.connIndex = 0                               -- 连接索引

    setmetatable(self, {__index = _GC_GETBASELIVEING_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_GETBASELIVINGCURRENCY_ACK_MT = {}
function _GC_GETBASELIVINGCURRENCY_ACK_MT:load(buffer) 
    self.srvId = BufferReadInt32(buffer)
    self.userId = BufferReadInt32(buffer)
    self.nResult = BufferReadInt32(buffer)
    self.totalCurrency = BufferReadInt64(buffer)
    self.addCurrency = BufferReadInt32(buffer)
    self.connIndex = BufferReadUInt32(buffer)
end

function _GC_GETBASELIVINGCURRENCY_ACK_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.srvId)
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt32(buffer, self.nResult)
    BufferWriteInt64(buffer, self.totalCurrency)
    BufferWriteInt32(buffer, self.addCurrency)
    BufferWriteUInt32(buffer, self.connIndex)
end

function GC_GETBASELIVINGCURRENCY_ACK(buffer)
    local self = {}
    self.srvId = 0
    self.userId = 0
    self.nResult = 0
    self.totalCurrency = 0
    self.addCurrency = 0
    self.connIndex = 0                               -- 连接索引

    setmetatable(self, {__index = _GC_GETBASELIVINGCURRENCY_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_GETBASELIVINGCURRENCY_REQ_MT = {}
function _CG_GETBASELIVINGCURRENCY_REQ_MT:load(buffer) 
    self.connIndex = BufferReadUInt32(buffer)
end

function _CG_GETBASELIVINGCURRENCY_REQ_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.connIndex)
end

function CG_GETBASELIVINGCURRENCY_REQ(buffer)
    local self = {}
    self.connIndex = 0                               -- 连接索引

    setmetatable(self, {__index = _CG_GETBASELIVINGCURRENCY_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _AD_TRAIL_LOGIN_MT = {}
function _AD_TRAIL_LOGIN_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
end

function _AD_TRAIL_LOGIN_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
end

function AD_TRAIL_LOGIN(buffer)
    local self = {}
    self.userId = 0

    setmetatable(self, {__index = _AD_TRAIL_LOGIN_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_BETSETUPLIMIT_INFO_MT = {}
function _GC_BETSETUPLIMIT_INFO_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = 0
        i4 = BufferReadInt32(buffer)
        local i5 = 0
        i5 = BufferReadInt32(buffer)
        i2[i4] = i5
    end
    self.betUpLimitSetInfo = i2
end

function _GC_BETSETUPLIMIT_INFO_MT:dump(buffer) 
    i1 = self.betUpLimitSetInfo
    i2 = HashTableLen(i1)
    BufferWriteUInt16(buffer, i2)
    for k,v in pairs(i1) do
        i4 = k
        i5 = v
        BufferWriteInt32(buffer, i4)
        BufferWriteInt32(buffer, i5)
    end
end

function GC_BETSETUPLIMIT_INFO(buffer)
    local self = {}
    self.betUpLimitSetInfo = {}                      -- map<int, int>

    setmetatable(self, {__index = _GC_BETSETUPLIMIT_INFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_BRINGGAMECURRENCY_INFO_MT = {}
function _GC_BRINGGAMECURRENCY_INFO_MT:load(buffer) 
    self.bStart = BufferReadBool(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = 0
        i4 = BufferReadInt32(buffer)
        local i5 = 0
        i5 = BufferReadInt32(buffer)
        i2[i4] = i5
    end
    self.betInfo = i2
    self.bringLeastTimes = BufferReadInt32(buffer)
    self.bringMostTimes = BufferReadInt32(buffer)
    self.tenThousandBringMostTimes = BufferReadInt32(buffer)
end

function _GC_BRINGGAMECURRENCY_INFO_MT:dump(buffer) 
    BufferWriteBool(buffer, self.bStart)
    i1 = self.betInfo
    i2 = HashTableLen(i1)
    BufferWriteUInt16(buffer, i2)
    for k,v in pairs(i1) do
        i4 = k
        i5 = v
        BufferWriteInt32(buffer, i4)
        BufferWriteInt32(buffer, i5)
    end
    BufferWriteInt32(buffer, self.bringLeastTimes)
    BufferWriteInt32(buffer, self.bringMostTimes)
    BufferWriteInt32(buffer, self.tenThousandBringMostTimes)
end

function GC_BRINGGAMECURRENCY_INFO(buffer)
    local self = {}
    self.bStart = false
    self.betInfo = {}                                -- map<int, int>
    self.bringLeastTimes = 0                         -- 最少携带游戏豆倍数（相对于底注）
    self.bringMostTimes = 0                          -- 最多携带游戏豆倍数（相对于底注）
    self.tenThousandBringMostTimes = 0               -- 10万底注最多携带游戏豆倍数

    setmetatable(self, {__index = _GC_BRINGGAMECURRENCY_INFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_CHECKBET_MT = {}
function _CG_CHECKBET_MT:load(buffer) 
    self.nBet = BufferReadInt32(buffer)
end

function _CG_CHECKBET_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nBet)
end

function CG_CHECKBET(buffer)
    local self = {}
    self.nBet = 0

    setmetatable(self, {__index = _CG_CHECKBET_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_CHECKBET_ACK_MT = {}
function _GC_CHECKBET_ACK_MT:load(buffer) 
    self.nResult = BufferReadInt8(buffer)
end

function _GC_CHECKBET_ACK_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.nResult)
end

function GC_CHECKBET_ACK(buffer)
    local self = {}
    self.nResult = 0                                 --  0 成功 1 失败

    setmetatable(self, {__index = _GC_CHECKBET_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_SETCURRENTTABLE_USERINFO_MT = {}
function _CG_SETCURRENTTABLE_USERINFO_MT:load(buffer) 
    self.bringGameCurrency = BufferReadInt64(buffer)
    self.bAutoBuy = BufferReadBool(buffer)
end

function _CG_SETCURRENTTABLE_USERINFO_MT:dump(buffer) 
    BufferWriteInt64(buffer, self.bringGameCurrency)
    BufferWriteBool(buffer, self.bAutoBuy)
end

function CG_SETCURRENTTABLE_USERINFO(buffer)
    local self = {}
    self.bringGameCurrency = 0
    self.bAutoBuy = false

    setmetatable(self, {__index = _CG_SETCURRENTTABLE_USERINFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_SUPPLYGAMECURRENCY_MT = {}
function _CG_SUPPLYGAMECURRENCY_MT:load(buffer) 
    self.supplyGameCurrency = BufferReadInt32(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
    self.goldCurrency = BufferReadFloat(buffer)
end

function _CG_SUPPLYGAMECURRENCY_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.supplyGameCurrency)
    BufferWriteInt64(buffer, self.gameCurrency)
    BufferWriteFloat(buffer, self.goldCurrency)
end

function CG_SUPPLYGAMECURRENCY(buffer)
    local self = {}
    self.supplyGameCurrency = 0
    self.gameCurrency = 0
    self.goldCurrency = 0

    setmetatable(self, {__index = _CG_SUPPLYGAMECURRENCY_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_DZ_STARTTIMER_MT = {}
function _GC_DZ_STARTTIMER_MT:load(buffer) 
    self.timerSec = BufferReadInt32(buffer)
end

function _GC_DZ_STARTTIMER_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.timerSec)
end

function GC_DZ_STARTTIMER(buffer)
    local self = {}
    self.timerSec = 0

    setmetatable(self, {__index = _GC_DZ_STARTTIMER_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_GETSHOWSETBETINFO_MT = {}
function _CG_GETSHOWSETBETINFO_MT:load(buffer) 
    self.tableId = BufferReadInt8(buffer)
end

function _CG_GETSHOWSETBETINFO_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.tableId)
end

function CG_GETSHOWSETBETINFO(buffer)
    local self = {}
    self.tableId = 0

    setmetatable(self, {__index = _CG_GETSHOWSETBETINFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_GETSHOWSETBETINFO_MT = {}
function _GC_GETSHOWSETBETINFO_MT:load(buffer) 
    self.nResult = BufferReadInt8(buffer)
    self.tableId = BufferReadInt8(buffer)
    self.chairId = BufferReadInt8(buffer)
end

function _GC_GETSHOWSETBETINFO_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.nResult)
    BufferWriteInt8(buffer, self.tableId)
    BufferWriteInt8(buffer, self.chairId)
end

function GC_GETSHOWSETBETINFO(buffer)
    local self = {}
    self.nResult = 0                                 --  0 显示 1 不显示
    self.tableId = 0                                 -- 桌子ID
    self.chairId = 0                                 -- 椅子ID

    setmetatable(self, {__index = _GC_GETSHOWSETBETINFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _USERBRINGGAMECURRENCY_MT = {}
function _USERBRINGGAMECURRENCY_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.bringGameCurrecny = BufferReadInt64(buffer)
    self.bHandUp = BufferReadBool(buffer)
    self.bIsReConn = BufferReadBool(buffer)
end

function _USERBRINGGAMECURRENCY_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt64(buffer, self.bringGameCurrecny)
    BufferWriteBool(buffer, self.bHandUp)
    BufferWriteBool(buffer, self.bIsReConn)
end

function USERBRINGGAMECURRENCY(buffer)
    local self = {}
    self.userId = 0
    self.bringGameCurrecny = 0
    self.bHandUp = false                             -- 玩家举手状态
    self.bIsReConn = false                           -- 是否处于断线重连状态

    setmetatable(self, {__index = _USERBRINGGAMECURRENCY_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_TABLEUSERBRINGGAMECURRENCY_MT = {}
function _GC_TABLEUSERBRINGGAMECURRENCY_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = USERBRINGGAMECURRENCY()               -- USERBRINGGAMECURRENCY
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.tableUserBringGameCurrency = i2
end

function _GC_TABLEUSERBRINGGAMECURRENCY_MT:dump(buffer) 
    local i2 = self.tableUserBringGameCurrency
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function GC_TABLEUSERBRINGGAMECURRENCY(buffer)
    local self = {}
    self.tableUserBringGameCurrency = {}             -- vector<USERBRINGGAMECURRENCY>

    setmetatable(self, {__index = _GC_TABLEUSERBRINGGAMECURRENCY_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_SUPPLYINFO_MT = {}
function _GC_SUPPLYINFO_MT:load(buffer) 
    self.supplyResultInfo = BufferReadString(buffer)
end

function _GC_SUPPLYINFO_MT:dump(buffer) 
    BufferWriteString(buffer, self.supplyResultInfo)
end

function GC_SUPPLYINFO(buffer)
    local self = {}
    self.supplyResultInfo = ""

    setmetatable(self, {__index = _GC_SUPPLYINFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SIGNIN_UPDATE_GAMECURRENCY_MT = {}
function _SIGNIN_UPDATE_GAMECURRENCY_MT:load(buffer) 
    self.srvID = BufferReadInt32(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
end

function _SIGNIN_UPDATE_GAMECURRENCY_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.srvID)
    BufferWriteInt64(buffer, self.gameCurrency)
end

function SIGNIN_UPDATE_GAMECURRENCY(buffer)
    local self = {}
    self.srvID = 0                                   -- 服务器id
    self.gameCurrency = 0                            -- 当前游戏豆

    setmetatable(self, {__index = _SIGNIN_UPDATE_GAMECURRENCY_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _VIPINFO_MT = {}
function _VIPINFO_MT:load(buffer) 
    self.vipType = BufferReadInt32(buffer)
    self.reCharge = BufferReadInt32(buffer)
    self.awardCurrency = BufferReadInt32(buffer)
end

function _VIPINFO_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.vipType)
    BufferWriteInt32(buffer, self.reCharge)
    BufferWriteInt32(buffer, self.awardCurrency)
end

function VIPINFO(buffer)
    local self = {}
    self.vipType = 0                                 --  0  无 1白银会员 2 黄金会员 3钻石会员
    self.reCharge = 0                                -- 充值金额累计
    self.awardCurrency = 0                           -- 奖励游戏豆

    setmetatable(self, {__index = _VIPINFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _ML_NEWVIPCONFIGINFO_MT = {}
function _ML_NEWVIPCONFIGINFO_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = VIPINFO()                             -- VIPINFO
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.newVipConfigInfo = i2
end

function _ML_NEWVIPCONFIGINFO_MT:dump(buffer) 
    local i2 = self.newVipConfigInfo
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function ML_NEWVIPCONFIGINFO(buffer)
    local self = {}
    self.newVipConfigInfo = {}                       -- vector<VIPINFO>

    setmetatable(self, {__index = _ML_NEWVIPCONFIGINFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LD_UPDATEVIP_REQ_MT = {}
function _LD_UPDATEVIP_REQ_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.vipType = BufferReadInt32(buffer)
    self.awardCurrency = BufferReadInt32(buffer)
end

function _LD_UPDATEVIP_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt32(buffer, self.vipType)
    BufferWriteInt32(buffer, self.awardCurrency)
end

function LD_UPDATEVIP_REQ(buffer)
    local self = {}
    self.userId = 0
    self.vipType = 0
    self.awardCurrency = 0

    setmetatable(self, {__index = _LD_UPDATEVIP_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_UPDATEVIP_ACK_MT = {}
function _LC_UPDATEVIP_ACK_MT:load(buffer) 
    self.nResult = BufferReadInt32(buffer)
    self.vipType = BufferReadInt32(buffer)
    self.awardCurrency = BufferReadInt32(buffer)
end

function _LC_UPDATEVIP_ACK_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nResult)
    BufferWriteInt32(buffer, self.vipType)
    BufferWriteInt32(buffer, self.awardCurrency)
end

function LC_UPDATEVIP_ACK(buffer)
    local self = {}
    self.nResult = 0
    self.vipType = 0
    self.awardCurrency = 0

    setmetatable(self, {__index = _LC_UPDATEVIP_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CL_THIRD_LOGIN_MT = {}
function _CL_THIRD_LOGIN_MT:load(buffer) 
    self.loginKey = BufferReadString(buffer)
    self.loginType = BufferReadInt8(buffer)
    self.gateType = BufferReadInt32(buffer)
    self.strIP = BufferReadString(buffer)
    self.gender = BufferReadInt8(buffer)
    self.icon = BufferReadInt16(buffer)
    self.phoneReg = BufferReadInt8(buffer)
    self.userId = BufferReadInt32(buffer)
    self.userName = BufferReadString(buffer)
end

function _CL_THIRD_LOGIN_MT:dump(buffer) 
    BufferWriteString(buffer, self.loginKey)
    BufferWriteInt8(buffer, self.loginType)
    BufferWriteInt32(buffer, self.gateType)
    BufferWriteString(buffer, self.strIP)
    BufferWriteInt8(buffer, self.gender)
    BufferWriteInt16(buffer, self.icon)
    BufferWriteInt8(buffer, self.phoneReg)
    BufferWriteInt32(buffer, self.userId)
    BufferWriteString(buffer, self.userName)
end

function CL_THIRD_LOGIN(buffer)
    local self = {}
    self.loginKey = ""                               -- 登录唯一标识
    self.loginType = 0                               --  0 --来宾登录 
    self.gateType = 0
    self.strIP = ""                                  -- 登陆IP
    self.gender = 0
    self.icon = 0
    self.phoneReg = 0                                -- 0--代表pc注册 1--代表手机注册
    self.userId = 0
    self.userName = ""

    setmetatable(self, {__index = _CL_THIRD_LOGIN_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_THIRD_LOGIN_MT = {}
function _LC_THIRD_LOGIN_MT:load(buffer) 
    self.nResult = BufferReadUInt32(buffer)
    self.userID = BufferReadInt32(buffer)
    self.lastLoginIP = BufferReadString(buffer)
    self.lastLoginTime = BufferReadInt32(buffer)
    self.phoneLogin = BufferReadInt8(buffer)
    self.strPassCode = BufferReadString(buffer)
end

function _LC_THIRD_LOGIN_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.nResult)
    BufferWriteInt32(buffer, self.userID)
    BufferWriteString(buffer, self.lastLoginIP)
    BufferWriteInt32(buffer, self.lastLoginTime)
    BufferWriteInt8(buffer, self.phoneLogin)
    BufferWriteString(buffer, self.strPassCode)
end

function LC_THIRD_LOGIN(buffer)
    local self = {}
    self.nResult = ThirdLogin_Result.ThirdLogin_Result_Ok -- 登录结果
    self.userID = 0                                  -- 用户ID
    self.lastLoginIP = ""
    self.lastLoginTime = 0
    self.phoneLogin = 0                              -- 是否手机登录
    self.strPassCode = ""                            -- 通行证

    setmetatable(self, {__index = _LC_THIRD_LOGIN_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _AC_CHECKTHIRDLOGIN_MT = {}
function _AC_CHECKTHIRDLOGIN_MT:load(buffer) 
    self.nResult = BufferReadInt32(buffer)
    self.userId = BufferReadInt32(buffer)
    self.userName = BufferReadString(buffer)
end

function _AC_CHECKTHIRDLOGIN_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nResult)
    BufferWriteInt32(buffer, self.userId)
    BufferWriteString(buffer, self.userName)
end

function AC_CHECKTHIRDLOGIN(buffer)
    local self = {}
    self.nResult = 0
    self.userId = 0
    self.userName = ""

    setmetatable(self, {__index = _AC_CHECKTHIRDLOGIN_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_THIRD_TRANSFER_MT = {}
function _CS_THIRD_TRANSFER_MT:load(buffer) 
    self.userid = BufferReadInt32(buffer)
    self.userAccount = BufferReadString(buffer)
    self.passWord = BufferReadString(buffer)
    self.phoneCode = BufferReadString(buffer)
    self.strIP = BufferReadString(buffer)
    self.validCode = BufferReadUInt32(buffer)
    self.validCodeValiPeriod = BufferReadUInt32(buffer)
    self.smsOperType = BufferReadUInt32(buffer)
end

function _CS_THIRD_TRANSFER_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userid)
    BufferWriteString(buffer, self.userAccount)
    BufferWriteString(buffer, self.passWord)
    BufferWriteString(buffer, self.phoneCode)
    BufferWriteString(buffer, self.strIP)
    BufferWriteUInt32(buffer, self.validCode)
    BufferWriteUInt32(buffer, self.validCodeValiPeriod)
    BufferWriteUInt32(buffer, self.smsOperType)
end

function CS_THIRD_TRANSFER(buffer)
    local self = {}
    self.userid = 0                                  -- 用户ID
    self.userAccount = ""                            -- 用户账号
    self.passWord = ""                               -- 用户密码
    self.phoneCode = ""                              -- 手机号
    self.strIP = ""
    self.validCode = 0                               -- 验证码
    self.validCodeValiPeriod = 0                     -- 验证码有效期 
    self.smsOperType = Sms_Operator_Type.Sms_Operator_Type_None -- 短信操作类型

    setmetatable(self, {__index = _CS_THIRD_TRANSFER_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

EThirdTransferResult = {
    ETHIRDTRANSFER_RESULT_OK                         = 0, -- 完善成功
    ETHIRDTRANSFER_RESULT_FAIL                       = 1, -- 完善失败
    ETHIRDTRANSFER_RESULT_TIMELIMIT                  = 2, -- 时限未到
    ETHIRDTRANSFER_REACCOUNT                         = 3, -- 用户名已被注册
    ETHIRDTRANSFER_PHONEREBIND                       = 4, -- 手机号重复绑定
    ETHIRDTRANSFER_PHONECODETODAYBINDED              = 5, -- 该手机号当天已经绑定
    ETHIRDTRANSFER_VALIDCODEERROR                    = 6, -- 验证码错误
    ETHIRDTRANSFER_RESULT_NUM                        = 7, 
}

local _SC_THIRD_TRANSFER_MT = {}
function _SC_THIRD_TRANSFER_MT:load(buffer) 
    self.transferResult = BufferReadUInt32(buffer)
    self.leftTime = BufferReadInt8(buffer)
    self.bindPhoneCode = BufferReadString(buffer)
end

function _SC_THIRD_TRANSFER_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.transferResult)
    BufferWriteInt8(buffer, self.leftTime)
    BufferWriteString(buffer, self.bindPhoneCode)
end

function SC_THIRD_TRANSFER(buffer)
    local self = {}
    self.transferResult = EThirdTransferResult.ETHIRDTRANSFER_RESULT_OK
    self.leftTime = 0
    self.bindPhoneCode = ""

    setmetatable(self, {__index = _SC_THIRD_TRANSFER_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _TABLE_USER_COUNT_MT = {}
function _TABLE_USER_COUNT_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = 0
        i4 = BufferReadInt8(buffer)
        local i5 = 0
        i5 = BufferReadInt32(buffer)
        i2[i4] = i5
    end
    self.tableUserList = i2
end

function _TABLE_USER_COUNT_MT:dump(buffer) 
    i1 = self.tableUserList
    i2 = HashTableLen(i1)
    BufferWriteUInt16(buffer, i2)
    for k,v in pairs(i1) do
        i4 = k
        i5 = v
        BufferWriteInt8(buffer, i4)
        BufferWriteInt32(buffer, i5)
    end
end

function TABLE_USER_COUNT(buffer)
    local self = {}
    self.tableUserList = {}                          -- map<Table_ID, int>

    setmetatable(self, {__index = _TABLE_USER_COUNT_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GL_UPDATE_LOBBYUSERGAMECURRENCY_MT = {}
function _GL_UPDATE_LOBBYUSERGAMECURRENCY_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
    self.goldCurrency = BufferReadFloat(buffer)
end

function _GL_UPDATE_LOBBYUSERGAMECURRENCY_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt64(buffer, self.gameCurrency)
    BufferWriteFloat(buffer, self.goldCurrency)
end

function GL_UPDATE_LOBBYUSERGAMECURRENCY(buffer)
    local self = {}
    self.userId = 0
    self.gameCurrency = 0
    self.goldCurrency = 0

    setmetatable(self, {__index = _GL_UPDATE_LOBBYUSERGAMECURRENCY_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _UPDATE_MONEY_GOLD_MT = {}
function _UPDATE_MONEY_GOLD_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.moneyType = BufferReadUInt16(buffer)
    self.nValue = BufferReadInt32(buffer)
end

function _UPDATE_MONEY_GOLD_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteUInt16(buffer, self.moneyType)
    BufferWriteInt32(buffer, self.nValue)
end

function UPDATE_MONEY_GOLD(buffer)
    local self = {}
    self.userID = 0                                  -- 用户id
    self.moneyType = 0                               -- 货币类型(0:钻石;1:游戏豆）
    self.nValue = 0                                  -- 货币数量

    setmetatable(self, {__index = _UPDATE_MONEY_GOLD_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CHAMPIONSHIP_AWARD_BOARD_MT = {}
function _CHAMPIONSHIP_AWARD_BOARD_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.moneyType = BufferReadUInt32(buffer)
    self.nValue = BufferReadInt32(buffer)
end

function _CHAMPIONSHIP_AWARD_BOARD_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteUInt32(buffer, self.moneyType)
    BufferWriteInt32(buffer, self.nValue)
end

function CHAMPIONSHIP_AWARD_BOARD(buffer)
    local self = {}
    self.userID = 0                                  -- 用户id
    self.moneyType = Log_Object_Type.Log_Object_Money -- 奖励货币类型(0:钻石;1:游戏豆）
    self.nValue = 0                                  -- 奖励货币数量

    setmetatable(self, {__index = _CHAMPIONSHIP_AWARD_BOARD_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _TableGameInfo_MT = {}
function _TableGameInfo_MT:load(buffer) 
    self.nTax = BufferReadInt32(buffer)
    self.nCount = BufferReadInt32(buffer)
end

function _TableGameInfo_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nTax)
    BufferWriteInt32(buffer, self.nCount)
end

function TableGameInfo(buffer)
    local self = {}
    self.nTax = 0                                    -- 税收
    self.nCount = 0                                  -- 游戏局数

    setmetatable(self, {__index = _TableGameInfo_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_SETBET_REQ_MT = {}
function _CS_SETBET_REQ_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.nBet = BufferReadInt64(buffer)
    self.betTimes = BufferReadInt32(buffer)
    self.betType = BufferReadInt8(buffer)
    self.bFreeBet = BufferReadInt8(buffer)
    self.vipType = BufferReadInt32(buffer)
end

function _CS_SETBET_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt64(buffer, self.nBet)
    BufferWriteInt32(buffer, self.betTimes)
    BufferWriteInt8(buffer, self.betType)
    BufferWriteInt8(buffer, self.bFreeBet)
    BufferWriteInt32(buffer, self.vipType)
end

function CS_SETBET_REQ(buffer)
    local self = {}
    self.userId = 0                                  -- 用户ID
    self.nBet = 0                                    -- 押注底注
    self.betTimes = 0                                -- 押注倍数
    self.betType = 0                                 -- 押注货币类型  0--为游戏豆 1--为钻石
    self.bFreeBet = 0                                -- 是否免费押注
    self.vipType = 0                                 -- 会员类型

    setmetatable(self, {__index = _CS_SETBET_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_SETBET_ACK_MT = {}
function _SC_SETBET_ACK_MT:load(buffer) 
    self.nResult = BufferReadUInt32(buffer)
end

function _SC_SETBET_ACK_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.nResult)
end

function SC_SETBET_ACK(buffer)
    local self = {}
    self.nResult = SetBet_Result.SetBet_Result_Ok

    setmetatable(self, {__index = _SC_SETBET_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _DF_GETSYSGAMECURRENCY_ACK_MT = {}
function _DF_GETSYSGAMECURRENCY_ACK_MT:load(buffer) 
    self.gameCurrency = BufferReadInt64(buffer)
end

function _DF_GETSYSGAMECURRENCY_ACK_MT:dump(buffer) 
    BufferWriteInt64(buffer, self.gameCurrency)
end

function DF_GETSYSGAMECURRENCY_ACK(buffer)
    local self = {}
    self.gameCurrency = 0

    setmetatable(self, {__index = _DF_GETSYSGAMECURRENCY_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_LOTTERDRAWRESULT_ACK_MT = {}
function _SC_LOTTERDRAWRESULT_ACK_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.nResult = BufferReadUInt32(buffer)
    self.totalGoldCurrency = BufferReadFloat(buffer)
    self.totalGameCurrency = BufferReadInt64(buffer)
    self.bFree = BufferReadInt8(buffer)
    self.goldCurrency = BufferReadFloat(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = Bmp_Type.Bmp_Type_Log
        i4 = BufferReadUInt32(buffer)
        table.insert(i2, i4)
    end
    self.bmpType = i2
    self.dwConnIndex = BufferReadUInt32(buffer)
    self.betGameCurrency = BufferReadInt64(buffer)
end

function _SC_LOTTERDRAWRESULT_ACK_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteUInt32(buffer, self.nResult)
    BufferWriteFloat(buffer, self.totalGoldCurrency)
    BufferWriteInt64(buffer, self.totalGameCurrency)
    BufferWriteInt8(buffer, self.bFree)
    BufferWriteFloat(buffer, self.goldCurrency)
    BufferWriteInt64(buffer, self.gameCurrency)
    local i2 = self.bmpType
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        BufferWriteUInt32(buffer, i1)
    end
    BufferWriteUInt32(buffer, self.dwConnIndex)
    BufferWriteInt64(buffer, self.betGameCurrency)
end

function SC_LOTTERDRAWRESULT_ACK(buffer)
    local self = {}
    self.userId = 0
    self.nResult = Award_Result.Award_Result_Ok
    self.totalGoldCurrency = 0
    self.totalGameCurrency = 0
    self.bFree = 0                                   -- 是否免费抽奖 0 --不是免费 1-免费
    self.goldCurrency = 0                            -- 钻石
    self.gameCurrency = 0                            -- 游戏豆
    self.bmpType = {}                                -- vector<Bmp_Type>
    self.dwConnIndex = 0
    self.betGameCurrency = 0                         -- 下注游戏豆

    setmetatable(self, {__index = _SC_LOTTERDRAWRESULT_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LF_LOGIN_SAVEUSERDATA_MT = {}
function _LF_LOGIN_SAVEUSERDATA_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.bTodayfirst = BufferReadInt8(buffer)
    self.bTodayFree = BufferReadInt8(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
end

function _LF_LOGIN_SAVEUSERDATA_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt8(buffer, self.bTodayfirst)
    BufferWriteInt8(buffer, self.bTodayFree)
    BufferWriteInt64(buffer, self.gameCurrency)
end

function LF_LOGIN_SAVEUSERDATA(buffer)
    local self = {}
    self.userId = 0
    self.bTodayfirst = 0
    self.bTodayFree = 0
    self.gameCurrency = 0

    setmetatable(self, {__index = _LF_LOGIN_SAVEUSERDATA_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_FREESETBET_ACK_MT = {}
function _SC_FREESETBET_ACK_MT:load(buffer) 
    self.bTodayFree = BufferReadInt8(buffer)
end

function _SC_FREESETBET_ACK_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.bTodayFree)
end

function SC_FREESETBET_ACK(buffer)
    local self = {}
    self.bTodayFree = 0                              --  是否可以免费抽奖 0 --否  1 --是

    setmetatable(self, {__index = _SC_FREESETBET_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LD_SAVELOTTERDRAWDATA_REQ_MT = {}
function _LD_SAVELOTTERDRAWDATA_REQ_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.vipType = BufferReadInt32(buffer)
    self.bFree = BufferReadInt8(buffer)
    self.awardType = BufferReadUInt32(buffer)
    self.goldCurrency = BufferReadFloat(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = Bmp_Type.Bmp_Type_Log
        i4 = BufferReadUInt32(buffer)
        table.insert(i2, i4)
    end
    self.bmpType = i2
    self.dwConnIndex = BufferReadUInt32(buffer)
    self.betGameCurrency = BufferReadInt64(buffer)
end

function _LD_SAVELOTTERDRAWDATA_REQ_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt32(buffer, self.vipType)
    BufferWriteInt8(buffer, self.bFree)
    BufferWriteUInt32(buffer, self.awardType)
    BufferWriteFloat(buffer, self.goldCurrency)
    BufferWriteInt64(buffer, self.gameCurrency)
    local i2 = self.bmpType
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        BufferWriteUInt32(buffer, i1)
    end
    BufferWriteUInt32(buffer, self.dwConnIndex)
    BufferWriteInt64(buffer, self.betGameCurrency)
end

function LD_SAVELOTTERDRAWDATA_REQ(buffer)
    local self = {}
    self.userId = 0
    self.vipType = 0
    self.bFree = 0                                   -- 是否免费抽奖 0 --不是免费 1-免费
    self.awardType = Award_Type.Award_Type_ThreeLog  -- 奖励类型
    self.goldCurrency = 0                            -- 钻石
    self.gameCurrency = 0                            -- 游戏豆
    self.bmpType = {}                                -- vector<Bmp_Type>
    self.dwConnIndex = 0
    self.betGameCurrency = 0                         -- 下注游戏豆

    setmetatable(self, {__index = _LD_SAVELOTTERDRAWDATA_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _UserDiamondInfo_MT = {}
function _UserDiamondInfo_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.userNickName = BufferReadString(buffer)
    self.diamondNum = BufferReadFloat(buffer)
    self.icon = BufferReadInt16(buffer)
end

function _UserDiamondInfo_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteString(buffer, self.userNickName)
    BufferWriteFloat(buffer, self.diamondNum)
    BufferWriteInt16(buffer, self.icon)
end

function UserDiamondInfo(buffer)
    local self = {}
    self.userId = 0                                  -- 用户ID
    self.userNickName = ""                           -- 用户昵称
    self.diamondNum = 0                              -- 拥有钻石数量
    self.icon = 0                                    -- 玩家头像

    setmetatable(self, {__index = _UserDiamondInfo_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _UserGameCurencyInfo_MT = {}
function _UserGameCurencyInfo_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.userNickName = BufferReadString(buffer)
    self.gameCurrencyNum = BufferReadInt64(buffer)
    self.icon = BufferReadInt16(buffer)
end

function _UserGameCurencyInfo_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteString(buffer, self.userNickName)
    BufferWriteInt64(buffer, self.gameCurrencyNum)
    BufferWriteInt16(buffer, self.icon)
end

function UserGameCurencyInfo(buffer)
    local self = {}
    self.userId = 0                                  -- 用户ID
    self.userNickName = ""                           -- 用户昵称
    self.gameCurrencyNum = 0
    self.icon = 0                                    -- 玩家头像

    setmetatable(self, {__index = _UserGameCurencyInfo_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_DZUSERRANK_ACK_MT = {}
function _LC_DZUSERRANK_ACK_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = UserDiamondInfo()                     -- UserDiamondInfo
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.userDiamondRank = i2
    local i5 = BufferReadUInt16(buffer)
    local i6 = {}
    for i = 1, i5 do
        local i8 = UserGameCurencyInfo()                 -- UserGameCurencyInfo
        i8:load(buffer)
        table.insert(i6, i8)
    end
    self.userGameCurrencyRank = i6
    local i9 = BufferReadUInt16(buffer)
    local i10 = {}
    for i = 1, i9 do
        local i12 = UserGameCurencyInfo()                -- UserGameCurencyInfo
        i12:load(buffer)
        table.insert(i10, i12)
    end
    self.userTodayGainRank = i10
    self.upTime = BufferReadInt32(buffer)
end

function _LC_DZUSERRANK_ACK_MT:dump(buffer) 
    local i2 = self.userDiamondRank
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
    local i6 = self.userGameCurrencyRank
    local i7 = #i6
    BufferWriteUInt16(buffer, i7)
    for i8 = 1, i7 do
        local i5 = i6[i8]
        i5:dump(buffer)
    end
    local i10 = self.userTodayGainRank
    local i11 = #i10
    BufferWriteUInt16(buffer, i11)
    for i12 = 1, i11 do
        local i9 = i10[i12]
        i9:dump(buffer)
    end
    BufferWriteInt32(buffer, self.upTime)
end

function LC_DZUSERRANK_ACK(buffer)
    local self = {}
    self.userDiamondRank = {}                        -- vector<UserDiamondInfo>
    self.userGameCurrencyRank = {}                   -- vector<UserGameCurencyInfo>
    self.userTodayGainRank = {}                      -- vector<UserGameCurencyInfo>
    self.upTime = 0                                  -- 更新时间

    setmetatable(self, {__index = _LC_DZUSERRANK_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_DZUSERRANKONLINE_ACK_MT = {}
function _LC_DZUSERRANKONLINE_ACK_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = 0
        i4 = BufferReadInt32(buffer)
        table.insert(i2, i4)
    end
    self.onLineDzRankUser = i2
end

function _LC_DZUSERRANKONLINE_ACK_MT:dump(buffer) 
    local i2 = self.onLineDzRankUser
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        BufferWriteInt32(buffer, i1)
    end
end

function LC_DZUSERRANKONLINE_ACK(buffer)
    local self = {}
    self.onLineDzRankUser = {}                       -- vector<User_ID>

    setmetatable(self, {__index = _LC_DZUSERRANKONLINE_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GD_UPDATEGAIN_MT = {}
function _GD_UPDATEGAIN_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
end

function _GD_UPDATEGAIN_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt64(buffer, self.gameCurrency)
end

function GD_UPDATEGAIN(buffer)
    local self = {}
    self.userId = 0
    self.gameCurrency = 0

    setmetatable(self, {__index = _GD_UPDATEGAIN_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CG_HANDUP_REQ_MT = {}
function _CG_HANDUP_REQ_MT:load(buffer) 
    self.info:load(buffer)
end

function _CG_HANDUP_REQ_MT:dump(buffer) 
    self.info:dump(buffer)
end

function CG_HANDUP_REQ(buffer)
    local self = {}
    self.info = CG_SUPPLYGAMECURRENCY()              -- CG_SUPPLYGAMECURRENCY

    setmetatable(self, {__index = _CG_HANDUP_REQ_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_FINDPASSWORD_MT = {}
function _CS_FINDPASSWORD_MT:load(buffer) 
    self.account = BufferReadString(buffer)
    self.phoneCode = BufferReadString(buffer)
    self.passWord = BufferReadString(buffer)
    self.validCode = BufferReadUInt32(buffer)
    self.validCodeValiPeriod = BufferReadUInt32(buffer)
    self.smsOperType = BufferReadUInt32(buffer)
end

function _CS_FINDPASSWORD_MT:dump(buffer) 
    BufferWriteString(buffer, self.account)
    BufferWriteString(buffer, self.phoneCode)
    BufferWriteString(buffer, self.passWord)
    BufferWriteUInt32(buffer, self.validCode)
    BufferWriteUInt32(buffer, self.validCodeValiPeriod)
    BufferWriteUInt32(buffer, self.smsOperType)
end

function CS_FINDPASSWORD(buffer)
    local self = {}
    self.account = ""
    self.phoneCode = ""
    self.passWord = ""
    self.validCode = 0                               -- 验证码
    self.validCodeValiPeriod = 0                     -- 验证码有效期 
    self.smsOperType = Sms_Operator_Type.Sms_Operator_Type_None -- 短信操作类型

    setmetatable(self, {__index = _CS_FINDPASSWORD_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_FINDPASSWORD_MT = {}
function _SC_FINDPASSWORD_MT:load(buffer) 
    self.nResult = BufferReadUInt32(buffer)
end

function _SC_FINDPASSWORD_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.nResult)
end

function SC_FINDPASSWORD(buffer)
    local self = {}
    self.nResult = FindPassWord_Result.FindPassWord_Result_Ok

    setmetatable(self, {__index = _SC_FINDPASSWORD_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CS_CHECKACCOUNTPHONECODE_MT = {}
function _CS_CHECKACCOUNTPHONECODE_MT:load(buffer) 
    self.userAccount = BufferReadString(buffer)
    self.phoneCode = BufferReadString(buffer)
end

function _CS_CHECKACCOUNTPHONECODE_MT:dump(buffer) 
    BufferWriteString(buffer, self.userAccount)
    BufferWriteString(buffer, self.phoneCode)
end

function CS_CHECKACCOUNTPHONECODE(buffer)
    local self = {}
    self.userAccount = ""
    self.phoneCode = ""

    setmetatable(self, {__index = _CS_CHECKACCOUNTPHONECODE_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SC_CHECKACCOUNTPHONECODE_MT = {}
function _SC_CHECKACCOUNTPHONECODE_MT:load(buffer) 
    self.nResult = BufferReadInt32(buffer)
end

function _SC_CHECKACCOUNTPHONECODE_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.nResult)
end

function SC_CHECKACCOUNTPHONECODE(buffer)
    local self = {}
    self.nResult = 0

    setmetatable(self, {__index = _SC_CHECKACCOUNTPHONECODE_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _BROKEN_GAME_INFO_MT = {}
function _BROKEN_GAME_INFO_MT:load(buffer) 
    self.srvId = BufferReadInt32(buffer)
end

function _BROKEN_GAME_INFO_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.srvId)
end

function BROKEN_GAME_INFO(buffer)
    local self = {}
    self.srvId = 0                                   -- 服务ID

    setmetatable(self, {__index = _BROKEN_GAME_INFO_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GC_RECONN_MT = {}
function _GC_RECONN_MT:load(buffer) 
    self.chair = BufferReadInt8(buffer)
end

function _GC_RECONN_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.chair)
end

function GC_RECONN(buffer)
    local self = {}
    self.chair = 0

    setmetatable(self, {__index = _GC_RECONN_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _USER_RECONN_STATUS_MT = {}
function _USER_RECONN_STATUS_MT:load(buffer) 
    self.eStatus = BufferReadUInt32(buffer)
    self.tableID = BufferReadInt8(buffer)
    self.chairID = BufferReadInt8(buffer)
end

function _USER_RECONN_STATUS_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.eStatus)
    BufferWriteInt8(buffer, self.tableID)
    BufferWriteInt8(buffer, self.chairID)
end

function USER_RECONN_STATUS(buffer)
    local self = {}
    self.eStatus = EUserStatus.EGAME_STATUS_NULL     -- 玩家当前状态
    self.tableID = 0                                 -- 当前所在桌子id
    self.chairID = 0                                 -- 当前所在椅子id

    setmetatable(self, {__index = _USER_RECONN_STATUS_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CL_TRACK_PLAYER_MT = {}
function _CL_TRACK_PLAYER_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.trackUserId = BufferReadInt32(buffer)
    self.lobbyId = BufferReadInt32(buffer)
end

function _CL_TRACK_PLAYER_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt32(buffer, self.trackUserId)
    BufferWriteInt32(buffer, self.lobbyId)
end

function CL_TRACK_PLAYER(buffer)
    local self = {}
    self.userId = 0                                  -- 玩家ID
    self.trackUserId = 0                             -- 被跟踪玩家ID
    self.lobbyId = 0                                 -- 跟踪玩家的LobbyId

    setmetatable(self, {__index = _CL_TRACK_PLAYER_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_TRACK_PLAYER_MT = {}
function _LC_TRACK_PLAYER_MT:load(buffer) 
    self.nResult = BufferReadUInt32(buffer)
    self.userId = BufferReadInt32(buffer)
    self.gameSrvId = BufferReadInt32(buffer)
    self.tableId = BufferReadInt8(buffer)
    self.chairId = BufferReadInt8(buffer)
end

function _LC_TRACK_PLAYER_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.nResult)
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt32(buffer, self.gameSrvId)
    BufferWriteInt8(buffer, self.tableId)
    BufferWriteInt8(buffer, self.chairId)
end

function LC_TRACK_PLAYER(buffer)
    local self = {}
    self.nResult = TRACK_RESULT.TRACK_RESULT_SUCCESS
    self.userId = 0
    self.gameSrvId = 0
    self.tableId = 0
    self.chairId = 0

    setmetatable(self, {__index = _LC_TRACK_PLAYER_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CL_TRACK_PLAYER_WATCH_MT = {}
function _CL_TRACK_PLAYER_WATCH_MT:load(buffer) 
    self.tableId = BufferReadInt8(buffer)
    self.chairId = BufferReadInt8(buffer)
end

function _CL_TRACK_PLAYER_WATCH_MT:dump(buffer) 
    BufferWriteInt8(buffer, self.tableId)
    BufferWriteInt8(buffer, self.chairId)
end

function CL_TRACK_PLAYER_WATCH(buffer)
    local self = {}
    self.tableId = 0
    self.chairId = 0

    setmetatable(self, {__index = _CL_TRACK_PLAYER_WATCH_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

TRACK_PLAYER_WATCH_RESULT = {
    TRACK_PLAYER_WATCH_RESULT_OK                     = 0, 
    TRACK_PLAYER_WATCH_RESULT_FAIL                   = 1, 
    TRACK_PLAYER_WATCH_RESULT_WATCHNUMLIMIT          = 2, 
}

local _LC_TRACK_PLAYER_WATCH_MT = {}
function _LC_TRACK_PLAYER_WATCH_MT:load(buffer) 
    self.nResult = BufferReadUInt32(buffer)
    self.tableId = BufferReadInt8(buffer)
    self.chairId = BufferReadInt8(buffer)
end

function _LC_TRACK_PLAYER_WATCH_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.nResult)
    BufferWriteInt8(buffer, self.tableId)
    BufferWriteInt8(buffer, self.chairId)
end

function LC_TRACK_PLAYER_WATCH(buffer)
    local self = {}
    self.nResult = TRACK_PLAYER_WATCH_RESULT.TRACK_PLAYER_WATCH_RESULT_OK
    self.tableId = 0
    self.chairId = 0

    setmetatable(self, {__index = _LC_TRACK_PLAYER_WATCH_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _ExChangeInfo_MT = {}
function _ExChangeInfo_MT:load(buffer) 
    self.diamond = BufferReadFloat(buffer)
    self.gameCurrency = BufferReadInt64(buffer)
end

function _ExChangeInfo_MT:dump(buffer) 
    BufferWriteFloat(buffer, self.diamond)
    BufferWriteInt64(buffer, self.gameCurrency)
end

function ExChangeInfo(buffer)
    local self = {}
    self.diamond = 0                                 -- 兑换钻石
    self.gameCurrency = 0                            -- 兑换游戏豆

    setmetatable(self, {__index = _ExChangeInfo_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _ML_EXCHANGEINFO_ACK_MT = {}
function _ML_EXCHANGEINFO_ACK_MT:load(buffer) 
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = 0
        i4 = BufferReadInt32(buffer)
        local i5 = ExChangeInfo()                        -- ExChangeInfo
        i5:load(buffer)
        i2[i4] = i5
    end
    self.exChangeInfo = i2
end

function _ML_EXCHANGEINFO_ACK_MT:dump(buffer) 
    i1 = self.exChangeInfo
    i2 = HashTableLen(i1)
    BufferWriteUInt16(buffer, i2)
    for k,v in pairs(i1) do
        i4 = k
        i5 = v
        BufferWriteInt32(buffer, i4)
        i5:dump(buffer)
    end
end

function ML_EXCHANGEINFO_ACK(buffer)
    local self = {}
    self.exChangeInfo = {}                           -- map<int, ExChangeInfo>

    setmetatable(self, {__index = _ML_EXCHANGEINFO_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _SYSTEM_BULLETIN_DATA_MT = {}
function _SYSTEM_BULLETIN_DATA_MT:load(buffer) 
    self.sysType = BufferReadInt32(buffer)
    self.text = BufferReadString(buffer)
end

function _SYSTEM_BULLETIN_DATA_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.sysType)
    BufferWriteString(buffer, self.text)
end

function SYSTEM_BULLETIN_DATA(buffer)
    local self = {}
    self.sysType = 0
    self.text = ""

    setmetatable(self, {__index = _SYSTEM_BULLETIN_DATA_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GL_GAMEUSER_UP_MT = {}
function _GL_GAMEUSER_UP_MT:load(buffer) 
    self.type = BufferReadUInt32(buffer)
    self.reson = BufferReadUInt32(buffer)
    self.gameId = BufferReadInt16(buffer)
    self.gameType = BufferReadUInt32(buffer)
    self.money = BufferReadInt32(buffer)
end

function _GL_GAMEUSER_UP_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.type)
    BufferWriteUInt32(buffer, self.reson)
    BufferWriteInt16(buffer, self.gameId)
    BufferWriteUInt32(buffer, self.gameType)
    BufferWriteInt32(buffer, self.money)
end

function GL_GAMEUSER_UP(buffer)
    local self = {}
    self.type = Log_Object_Type.Log_Object_Money
    self.reson = Log_Change_Reason.Log_Change_Game
    self.gameId = 0
    self.gameType = Game_Type.GameType_Common
    self.money = 0

    setmetatable(self, {__index = _GL_GAMEUSER_UP_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _ML_REGAWARDCONFIG_MT = {}
function _ML_REGAWARDCONFIG_MT:load(buffer) 
    self.regAward = BufferReadInt32(buffer)
end

function _ML_REGAWARDCONFIG_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.regAward)
end

function ML_REGAWARDCONFIG(buffer)
    local self = {}
    self.regAward = 0

    setmetatable(self, {__index = _ML_REGAWARDCONFIG_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _PacketAwardInfo_MT = {}
function _PacketAwardInfo_MT:load(buffer) 
    self.packetType = BufferReadInt32(buffer)
    self.awardValue = BufferReadInt32(buffer)
    self.status = BufferReadInt32(buffer)
end

function _PacketAwardInfo_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.packetType)
    BufferWriteInt32(buffer, self.awardValue)
    BufferWriteInt32(buffer, self.status)
end

function PacketAwardInfo(buffer)
    local self = {}
    self.packetType = 0                              -- 礼包类型 0 --注册奖励礼包 1--白银会员奖励 2--黄金会员奖励 3--钻石会员奖励
    self.awardValue = 0                              -- 奖励值
    self.status = 0                                  -- 奖励状态 0-无奖励状态 1-未领取奖励 2-已经领取奖励

    setmetatable(self, {__index = _PacketAwardInfo_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_PACKETSINFO_ACK_MT = {}
function _LC_PACKETSINFO_ACK_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    local i1 = BufferReadUInt16(buffer)
    local i2 = {}
    for i = 1, i1 do
        local i4 = PacketAwardInfo()                     -- PacketAwardInfo
        i4:load(buffer)
        table.insert(i2, i4)
    end
    self.packetAwardInfo = i2
end

function _LC_PACKETSINFO_ACK_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    local i2 = self.packetAwardInfo
    local i3 = #i2
    BufferWriteUInt16(buffer, i3)
    for i4 = 1, i3 do
        local i1 = i2[i4]
        i1:dump(buffer)
    end
end

function LC_PACKETSINFO_ACK(buffer)
    local self = {}
    self.userId = 0
    self.packetAwardInfo = {}                        -- vector<PacketAwardInfo>

    setmetatable(self, {__index = _LC_PACKETSINFO_ACK_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _CL_GETPACKETSAWARD_MT = {}
function _CL_GETPACKETSAWARD_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.packetType = BufferReadInt32(buffer)
end

function _CL_GETPACKETSAWARD_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt32(buffer, self.packetType)
end

function CL_GETPACKETSAWARD(buffer)
    local self = {}
    self.userId = 0
    self.packetType = 0                              -- 领取礼包类型

    setmetatable(self, {__index = _CL_GETPACKETSAWARD_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _LC_GETPACKETSAWARD_MT = {}
function _LC_GETPACKETSAWARD_MT:load(buffer) 
    self.userID = BufferReadInt32(buffer)
    self.packetType = BufferReadInt32(buffer)
    self.nResult = BufferReadInt32(buffer)
    self.awardValue = BufferReadInt32(buffer)
    self.totalCurrency = BufferReadInt64(buffer)
end

function _LC_GETPACKETSAWARD_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userID)
    BufferWriteInt32(buffer, self.packetType)
    BufferWriteInt32(buffer, self.nResult)
    BufferWriteInt32(buffer, self.awardValue)
    BufferWriteInt64(buffer, self.totalCurrency)
end

function LC_GETPACKETSAWARD(buffer)
    local self = {}
    self.userID = 0
    self.packetType = 0
    self.nResult = 0
    self.awardValue = 0
    self.totalCurrency = 0

    setmetatable(self, {__index = _LC_GETPACKETSAWARD_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _WORLDCHAT_MSG_MT = {}
function _WORLDCHAT_MSG_MT:load(buffer) 
    self.strMsg = BufferReadString(buffer)
end

function _WORLDCHAT_MSG_MT:dump(buffer) 
    BufferWriteString(buffer, self.strMsg)
end

function WORLDCHAT_MSG(buffer)
    local self = {}
    self.strMsg = ""

    setmetatable(self, {__index = _WORLDCHAT_MSG_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

EWORLDChatFail_Reason = {
    EWCF_Success                                     = 0, -- 聊天成功，客户端不需要显示
    EWCF_TimeLimit                                   = 1, -- 聊天过快
    EWCF_TextFilter                                  = 2, -- 聊天内容有非法内容
    EWCF_TextLengthOver                              = 3, -- 聊天内容超长
    EWCF_MoneyLess                                   = 4, -- 钻石不足
}

local _LC_WORLDCHAT_FAIL_MT = {}
function _LC_WORLDCHAT_FAIL_MT:load(buffer) 
    self.eReason = BufferReadUInt32(buffer)
end

function _LC_WORLDCHAT_FAIL_MT:dump(buffer) 
    BufferWriteUInt32(buffer, self.eReason)
end

function LC_WORLDCHAT_FAIL(buffer)
    local self = {}
    self.eReason = EWORLDChatFail_Reason.EWCF_Success

    setmetatable(self, {__index = _LC_WORLDCHAT_FAIL_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _WORLDCHAT_BROADCAST_MT = {}
function _WORLDCHAT_BROADCAST_MT:load(buffer) 
    self.srcID = BufferReadInt32(buffer)
    self.srcIcon = BufferReadInt16(buffer)
    self.srcName = BufferReadString(buffer)
    self.strMsg = BufferReadString(buffer)
end

function _WORLDCHAT_BROADCAST_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.srcID)
    BufferWriteInt16(buffer, self.srcIcon)
    BufferWriteString(buffer, self.srcName)
    BufferWriteString(buffer, self.strMsg)
end

function WORLDCHAT_BROADCAST(buffer)
    local self = {}
    self.srcID = 0                                   -- 发送人id
    self.srcIcon = 0                                 -- 发送人头像
    self.srcName = ""                                -- 发送人昵称
    self.strMsg = ""

    setmetatable(self, {__index = _WORLDCHAT_BROADCAST_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _GAME_DATA_MT = {}
function _GAME_DATA_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
    self.gameId = BufferReadInt16(buffer)
    self.nJoinGameNum = BufferReadInt32(buffer)
    self.nEndGameNum = BufferReadInt32(buffer)
end

function _GAME_DATA_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
    BufferWriteInt16(buffer, self.gameId)
    BufferWriteInt32(buffer, self.nJoinGameNum)
    BufferWriteInt32(buffer, self.nEndGameNum)
end

function GAME_DATA(buffer)
    local self = {}
    self.userId = 0                                  -- 玩家ID
    self.gameId = 0                                  -- 游戏id
    self.nJoinGameNum = 0                            -- 入局局数
    self.nEndGameNum = 0                             -- 摊牌局数

    setmetatable(self, {__index = _GAME_DATA_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

local _OTHER_USER_GAME_DATA_MT = {}
function _OTHER_USER_GAME_DATA_MT:load(buffer) 
    self.userId = BufferReadInt32(buffer)
end

function _OTHER_USER_GAME_DATA_MT:dump(buffer) 
    BufferWriteInt32(buffer, self.userId)
end

function OTHER_USER_GAME_DATA(buffer)
    local self = {}
    self.userId = 0                                  -- 玩家ID

    setmetatable(self, {__index = _OTHER_USER_GAME_DATA_MT})
    if buffer then
        self:load(buffer)
    end

    return self
end

